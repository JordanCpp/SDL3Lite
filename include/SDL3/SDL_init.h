/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef SDL3Lite_SDL_init_h
#define SDL3Lite_SDL_init_h

#ifdef __cplusplus
extern "C" {
#endif

    typedef enum SDL_AppResult
    {
        SDL_APP_CONTINUE,   /**< Value that requests that the app continue from the main callbacks. */
        SDL_APP_SUCCESS,    /**< Value that requests termination with success from the main callbacks. */
        SDL_APP_FAILURE     /**< Value that requests termination with error from the main callbacks. */
    } SDL_AppResult;


	/**
	 * Initialization flags for SDL_Init and/or SDL_InitSubSystem
	 *
	 * These are the flags which may be passed to SDL_Init(). You should specify
	 * the subsystems which you will be using in your application.
	 *
	 * \since This datatype is available since SDL 3.2.0.
	 *
	 * \sa SDL_Init
	 * \sa SDL_Quit
	 * \sa SDL_InitSubSystem
	 * \sa SDL_QuitSubSystem
	 * \sa SDL_WasInit
	 */
	typedef Uint32 SDL_InitFlags;

#define SDL_INIT_AUDIO      0x00000010u /**< `SDL_INIT_AUDIO` implies `SDL_INIT_EVENTS` */
#define SDL_INIT_VIDEO      0x00000020u /**< `SDL_INIT_VIDEO` implies `SDL_INIT_EVENTS`, should be initialized on the main thread */
#define SDL_INIT_JOYSTICK   0x00000200u /**< `SDL_INIT_JOYSTICK` implies `SDL_INIT_EVENTS`, should be initialized on the same thread as SDL_INIT_VIDEO on Windows if you don't set SDL_HINT_JOYSTICK_THREAD */
#define SDL_INIT_HAPTIC     0x00001000u
#define SDL_INIT_GAMEPAD    0x00002000u /**< `SDL_INIT_GAMEPAD` implies `SDL_INIT_JOYSTICK` */
#define SDL_INIT_EVENTS     0x00004000u
#define SDL_INIT_SENSOR     0x00008000u /**< `SDL_INIT_SENSOR` implies `SDL_INIT_EVENTS` */
#define SDL_INIT_CAMERA     0x00010000u /**< `SDL_INIT_CAMERA` implies `SDL_INIT_EVENTS` */

extern SDL_DECLSPEC bool SDLCALL SDL_SetAppMetadata(const char* appname, const char* appversion, const char* appidentifier);
extern SDL_DECLSPEC int  SDLCALL SDL_Init(SDL_InitFlags flags);
extern SDL_DECLSPEC void SDLCALL SDL_Quit();

#ifdef __cplusplus
}
#endif

#endif
