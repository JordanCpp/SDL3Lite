/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef SDL3Lite_IOStream_h
#define SDL3Lite_IOStream_h

#include <SDL3/StdInc.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct SDL_IOStream SDL_IOStream;

typedef enum SDL_IOStatus
{
    SDL_IO_STATUS_READY,     /**< Everything is ready (no errors and not EOF). */
    SDL_IO_STATUS_ERROR,     /**< Read or write I/O error */
    SDL_IO_STATUS_EOF,       /**< End of file */
    SDL_IO_STATUS_NOT_READY, /**< Non blocking I/O, not ready */
    SDL_IO_STATUS_READONLY,  /**< Tried to write a read-only buffer */
    SDL_IO_STATUS_WRITEONLY  /**< Tried to read a write-only buffer */
} SDL_IOStatus;

typedef enum SDL_IOWhence
{
    SDL_IO_SEEK_SET,  /**< Seek from the beginning of data */
    SDL_IO_SEEK_CUR,  /**< Seek relative to current read point */
    SDL_IO_SEEK_END   /**< Seek relative to the end of data */
} SDL_IOWhence;

extern SDL_DECLSPEC SDL_IOStream* SDLCALL SDL_IOFromFile(const char* file, const char* mode);
extern SDL_DECLSPEC bool          SDLCALL SDL_CloseIO(SDL_IOStream* context);
extern SDL_DECLSPEC size_t        SDLCALL SDL_ReadIO(SDL_IOStream* context, void* ptr, size_t size);
extern SDL_DECLSPEC size_t        SDLCALL SDL_WriteIO(SDL_IOStream* context, const void* ptr, size_t size);
extern SDL_DECLSPEC Sint64        SDLCALL SDL_SeekIO(SDL_IOStream* context, Sint64 offset, SDL_IOWhence whence);
extern SDL_DECLSPEC Sint64        SDLCALL SDL_GetIOSize(SDL_IOStream* context);

#ifdef __cplusplus
}
#endif

#endif
