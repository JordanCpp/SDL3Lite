/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef SDL3Lite_BmpLoad_hpp
#define SDL3Lite_BmpLoad_hpp

#include <stdio.h>
#include <SDL3/Types.h>
#include <SDL3/Result.hpp>
#include <SDL3/Vec2i.hpp>
#include <SDL3/String.hpp>

// Forward declarations for BMP structures
struct BmpInfoHeader;
struct BmpColorEntry;

class BmpLoader
{
public:
    BmpLoader(Result& result);
    ~BmpLoader();
    
    // Main interface
    bool Reset(const String& path);
    void Clear();
    
    // Getters
    const Vec2i& GetSize() const;
    int GetBpp() const;
    Uint8* GetPixels();
    const Uint8* GetPixels() const;
    
    // Status and utility methods
    bool IsValid() const;
    int GetDataSize() const;

private:
    // Copy prevention (Rule of Three)
    BmpLoader(const BmpLoader&);
    BmpLoader& operator=(const BmpLoader&);
    
    // Internal loading methods
    bool LoadFromFile(FILE* file);
    bool ValidateHeader(const BmpInfoHeader& header);
    
    // Format-specific loaders
    bool LoadMonochrome(FILE* file, const BmpColorEntry* palette, 
                       int width, int height, int rowStride, bool topDown);
    bool Load4Bit(FILE* file, const BmpColorEntry* palette,
                 int width, int height, int rowStride, bool topDown);
    bool Load8Bit(FILE* file, const BmpColorEntry* palette,
                 int width, int height, int rowStride, bool topDown);
    bool Load24Bit(FILE* file, int width, int height, int rowStride, bool topDown);
    bool Load32Bit(FILE* file, int width, int height, int rowStride, bool topDown);
    
    // Member variables
    Result& _result;
    Uint8*  _pixels;
    Vec2i   _size;
    int     _bpp;
};

#endif
