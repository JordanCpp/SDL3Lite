/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include <SDL3/Win32/MainWin.hpp>

MainWindow::MainWindow(Result& result, EventHandler& eventHandler, const Vec2i& pos, const Vec2i& size, const String& title, SDL_WindowFlags mode) :
	_result(&result),
	_eventHandler(&eventHandler),
	_hdc(NULL),
	_hwnd(NULL),
	_baseWindow(pos, size, title),
	_WindowFlags(mode)
{
	memset(&_message, 0, sizeof(MSG));
	memset(&_windowClass, 0, sizeof(WNDCLASSA));

	_windowClass.style = CS_HREDRAW | CS_VREDRAW;
	_windowClass.cbClsExtra = 0;
	_windowClass.cbWndExtra = 0;
	_windowClass.lpszClassName = title.c_str();
	_windowClass.hInstance = GetModuleHandle(NULL);
	_windowClass.hbrBackground = (HBRUSH)COLOR_APPWORKSPACE;
	_windowClass.lpszMenuName = NULL;
	_windowClass.lpfnWndProc = WndProc;

	if (RegisterClass(&_windowClass) == NULL)
	{
		_result->Message(_windowError.GetErrorMessage());
		return;
	}

	DWORD style = WS_OVERLAPPEDWINDOW | WS_VISIBLE;

	RECT rect;
	rect.left   = (LONG)_baseWindow.GetPos().x;
	rect.top    = (LONG)_baseWindow.GetPos().y;
	rect.right  = (LONG)_baseWindow.GetSize().x;
	rect.bottom = (LONG)_baseWindow.GetSize().y;

	if (!AdjustWindowRect(&rect, style, FALSE))
	{
		_result->Message(_windowError.GetErrorMessage());
		return;
	}

	int width  = rect.right - rect.left;
	int heigth = rect.bottom - rect.top;

	_hwnd = CreateWindow(_windowClass.lpszClassName, GetTitle().c_str(), style, GetPos().x, GetPos().y, width, heigth, NULL, NULL, _windowClass.hInstance, NULL);

	if (_hwnd == NULL)
	{
		_result->Message(_windowError.GetErrorMessage());
		return;
	}

	_hdc = GetDC(_hwnd);

	if (_hdc == NULL)
	{
		_result->Message(_windowError.GetErrorMessage());
		return;
	}

#if defined(_WIN64)
	SetWindowLongPtr(_hwnd, GWLP_WNDPROC, (LONG_PTR)WndProc);
	SetWindowLongPtr(_hwnd, GWLP_USERDATA, (LONG_PTR)this);
#elif defined(_WIN32)
	SetWindowLong(_hwnd, GWL_WNDPROC, (LONG)WndProc);
	SetWindowLong(_hwnd, GWL_USERDATA, (LONG)this);
#endif  

}

MainWindow::~MainWindow()
{
	if (UnregisterClass(_windowClass.lpszClassName, _windowClass.hInstance) == FALSE)
	{
		_result->Message(_windowError.GetErrorMessage());
	}
	else
	{
		if (ReleaseDC(_hwnd, _hdc) == 0)
		{
			_result->Message(_windowError.GetErrorMessage());
		}
	}
}

const Vec2i& MainWindow::GetPos()
{
	return _baseWindow.GetPos();
}

void MainWindow::SetPos(const Vec2i& pos)
{
	_baseWindow.SetPos(pos);
}

const Vec2i& MainWindow::GetSize()
{
	return _baseWindow.GetSize();
}

void MainWindow::SetSize(const Vec2i& size)
{
	_baseWindow.SetSize(size);
}

const String& MainWindow::GetTitle()
{
	return _baseWindow.GetTitle();
}

void MainWindow::SetTitle(const String& title)
{
	_baseWindow.SetTitle(title);

	SetWindowText(GetHwnd(), _baseWindow.GetTitle().c_str());
}

SDL_WindowFlags MainWindow::GetFlags()
{
	return _WindowFlags;
}

void MainWindow::PollEvents()
{
	while (PeekMessage(&_message, _hwnd, 0, 0, PM_REMOVE))
	{
		TranslateMessage(&_message);
		DispatchMessage(&_message);
	}
}

HWND MainWindow::GetHwnd()
{
	return _hwnd;
}

HDC MainWindow::GetHdc()
{
	return _hdc;
}

LRESULT CALLBACK MainWindow::Handler(UINT message, WPARAM wParam, LPARAM lParam)
{
	SDL_Event    event;
	SDL_WindowID windowId = GetWindowThreadProcessId(_hwnd, NULL);

	switch (message)
	{
	case WM_DESTROY:
		event.type = SDL_EVENT_QUIT;
		_eventHandler->Push(event);
		PostQuitMessage(0);
		break;

	case WM_CLOSE:
		event.type = SDL_EVENT_QUIT;
		_eventHandler->Push(event);
		break;

	case WM_ERASEBKGND:
		break;

	case WM_PALETTECHANGED:
		break;

	case WM_MOUSEMOVE:
		event.type = SDL_EVENT_MOUSE_MOTION;
		event.motion.x = LOWORD(lParam);
		event.motion.y = HIWORD(lParam);
		event.motion.windowID = windowId;
		event.motion.which = 0;
		event.motion.state = 0;
		_eventHandler->Push(event);
		break;

	case WM_LBUTTONDOWN:
	case WM_RBUTTONDOWN:
	case WM_MBUTTONDOWN:
		event.type            = SDL_EVENT_MOUSE_BUTTON_DOWN;
		event.button.x        = LOWORD(lParam);
		event.button.y        = HIWORD(lParam);
		event.button.windowID = windowId;
		event.button.which    = 0;

		switch (message)
		{
		case WM_LBUTTONDOWN:
			event.button.button = SDL_BUTTON_LEFT;
			break;
		case WM_RBUTTONDOWN:
			event.button.button = SDL_BUTTON_RIGHT;
			break;
		case WM_MBUTTONDOWN:
			event.button.button = SDL_BUTTON_MIDDLE;
			break;
		}
		_eventHandler->Push(event);
		break;

	case WM_LBUTTONUP:
	case WM_RBUTTONUP:
	case WM_MBUTTONUP:
		event.type            = SDL_EVENT_MOUSE_BUTTON_UP;
		event.button.x        = LOWORD(lParam);
		event.button.y        = HIWORD(lParam);
		event.button.windowID = windowId;
		event.button.which    = 0;

		switch (message)
		{
		case WM_LBUTTONUP:
			event.button.button = SDL_BUTTON_LEFT;
			break;
		case WM_RBUTTONUP:
			event.button.button = SDL_BUTTON_RIGHT;
			break;
		case WM_MBUTTONUP:
			event.button.button = SDL_BUTTON_MIDDLE;
			break;
		}
		_eventHandler->Push(event);
		break;
	}

	return DefWindowProc(_hwnd, message, wParam, lParam);
}

LRESULT CALLBACK MainWindow::WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	LRESULT result;

#if defined(_WIN64)
	MainWindow* This = (MainWindow*)GetWindowLongPtr(hwnd, GWLP_USERDATA);
#elif defined(_WIN32)
	MainWindow* This = (MainWindow*)GetWindowLong(hwnd, GWL_USERDATA);
#endif  

	if (This != NULL)
	{
		result = This->Handler(message, wParam, lParam);
	}
	else
	{
		result = DefWindowProc(hwnd, message, wParam, lParam);
	}

	return result;
}
