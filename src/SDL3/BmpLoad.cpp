/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include <stdio.h>
#include <SDL3/Types.h>
#include <SDL3/BmpLoad.hpp>

#pragma pack(push, 1)
typedef struct 
{
    Uint16 file_type;
    Uint32 file_size;
    Uint16 reserved1;
    Uint16 reserved2;
    Uint32 offset_data;
} BMPFileHeader;

typedef struct 
{
    Uint32 size;
    Sint32 width;
    Sint32 height;
    Uint16 planes;
    Uint16 bit_count;
    Uint32 compression;
    Uint32 size_image;
    Sint32 x_pixels_per_meter;
    Sint32 y_pixels_per_meter;
    Uint32 colors_used;
    Uint32 colors_important;
} BMPInfoHeader;
#pragma pack(pop)

BmpLoader::BmpLoader(Result& result) :
    _bpp(0),
    _result(result)
{
}

BmpLoader::~BmpLoader()
{
    Clear();
}

bool BmpLoader::Reset(const String& path)
{
    Clear();

    FILE* file = fopen(path.c_str(), "rb");

    if (!file) 
    {
        _result.Message("Can't open file: ", path);
        return false;
    }

    BMPFileHeader file_header;
    BMPInfoHeader info_header;

    if (fread(&file_header, sizeof(BMPFileHeader), 1, file) != 1 ||
        fread(&info_header, sizeof(BMPInfoHeader), 1, file) != 1) 
    {
        fclose(file);
        _result.Message("Failed to read BMP headers: ", path);

        return false;
    }

    if (file_header.file_type != 0x4D42)
    {
        fclose(file);
        _result.Message("Not a BMP file: ", path);

        return false;
    }

    if (info_header.bit_count != 8 && info_header.bit_count != 24 && info_header.bit_count != 32) 
    {
        fclose(file);
        _result.Message("Unsupported BMP format (only 8, 24, and 32-bit supported): ", path);

        return false;
    }

    if (info_header.compression != 0) 
    {
        fclose(file);
        _result.Message("Only uncompressed BMP supported: ", path);

        return false;
    }

    _size = Vec2i(info_header.width, info_header.height);
    _bpp  = info_header.bit_count / 8;
    
    if (_bpp == 0)
    {
        _bpp = 1;
    }

    const Uint32 row_stride      = (_size.x * info_header.bit_count + 31) / 32 * 4;
    const Uint32 pixel_data_size = row_stride * _size.y;

    _pixels.resize(pixel_data_size);

    fseek(file, file_header.offset_data, SEEK_SET);

    for (int y = _size.y - 1; y >= 0; --y) 
    {
        if (fread(_pixels.data() + y * row_stride, 1, row_stride, file) != row_stride)
        {
            fclose(file);
            Clear();
            _result.Message("Failed to read pixel data: ", path);

            return false;
        }
    }

    fclose(file);

    if (info_header.bit_count >= 24) 
    {
        const int channels = info_header.bit_count / 8;

        for (int y = 0; y < _size.y; ++y) 
        {
            Uint8* row = _pixels.data() + y * row_stride;

            for (int x = 0; x < _size.x; ++x) 
            {
                Uint8* pixel = row + x * channels;
                Uint8 tmp    = pixel[0];
                pixel[0]     = pixel[2];
                pixel[2]     = tmp;
            }
        }
    }

    return _result.Ok();
}

const Vec2i& BmpLoader::GetSize()
{
    return _size;
}

int BmpLoader::GetBpp()
{
    return _bpp;
}

Uint8* BmpLoader::GetPixels()
{
    return _pixels.data();
}

void BmpLoader::Clear()
{
    _pixels.clear();
}
