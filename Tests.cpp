/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include <SDL3Lite/Platforms/MainWindow.hpp>
#include <SDL3Lite/Platforms/OpenGL1Window.hpp>
#include <SDL3Lite/Platforms/SoftwareWindow.hpp>
#include <SDL3Lite/WindowCreator.hpp>
#include <SDL3Lite/BmpLoader.hpp>
#include <stdio.h>

using namespace SDL;

void SDL3LiteTest(bool expression, const char* file, int line, const char* detail)
{
    if (!expression)
    {
        printf("Test fail! Expression: %s File: %s Line: %d \n", detail, file, line);
    }
}

#define SDL_TEST(expression) SDL3LiteTest(expression, __FILE__, __LINE__, #expression)

void TestRingBuffer()
{
    size_t value = 0;
    RingBuffer<size_t, 100> ringBuffer;
    SDL_TEST(ringBuffer.IsEmpty()      == true);
    SDL_TEST(ringBuffer.IsFull()       == false);
    SDL_TEST(ringBuffer.Dequeue(value) == false);

    for (size_t i = 0; i < 100; i++)
    {
        ringBuffer.Enqueue(i);
    }

    SDL_TEST(ringBuffer.IsEmpty() == false);
    SDL_TEST(ringBuffer.IsFull()  == true);

    for (size_t j = 0; j < 100; j++)
    {
        size_t dest = 0;
        SDL_TEST(ringBuffer.Dequeue(dest) == true);
        SDL_TEST(dest                     == j);
    }

    SDL_TEST(ringBuffer.IsEmpty()      == true);
    SDL_TEST(ringBuffer.IsFull()       == false);
    SDL_TEST(ringBuffer.Dequeue(value) == false);
}

void TestEventHandler()
{
    SDL_Event    event;
    EventHandler eventHandler;
    SDL_TEST(eventHandler.Empty() == true);
    SDL_TEST(eventHandler.Running() == true);
    SDL_TEST(eventHandler.Pop(event) == false);

    for (size_t i = 0; i < 100; i++)
    {
        SDL_Event src;
        src.type = SDL_EVENT_QUIT;
        eventHandler.Push(src);
    }

    SDL_TEST(eventHandler.Empty()   == false);
    SDL_TEST(eventHandler.Running() == true);

    for (size_t j = 0; j < 100; j++)
    {
        SDL_Event dst;
        SDL_TEST(eventHandler.Pop(dst) == true);
        SDL_TEST(dst.type              == SDL_EVENT_QUIT);
    }

    SDL_TEST(eventHandler.Empty()   == true);
    SDL_TEST(eventHandler.Running() == true);

    eventHandler.Stop();
    SDL_TEST(eventHandler.Empty()   == true);
    SDL_TEST(eventHandler.Running() == false);
}

void TestResult()
{
    Result result;
    SDL_TEST(result.Ok()      == true);
    SDL_TEST(result.Message() == "");

    result.Message("message");
    SDL_TEST(result.Ok()      == false);
    SDL_TEST(result.Message() == "message");

    result.Message("error", "detail");
    SDL_TEST(result.Ok()      == false);
    SDL_TEST(result.Message() == "errordetail");

    result.Clear();
    SDL_TEST(result.Ok()      == true);
    SDL_TEST(result.Message() == "");
}

void TestBaseWindow()
{
    BaseWindow baseWindow(Vec2i(10, 15), Vec2i(640, 480), "Create BaseWindow");
    SDL_TEST(baseWindow.GetPos().x  == 10);
    SDL_TEST(baseWindow.GetPos().y  == 15);
    SDL_TEST(baseWindow.GetSize().x == 640);
    SDL_TEST(baseWindow.GetSize().y == 480);
    SDL_TEST(baseWindow.GetTitle()  == "Create BaseWindow");

    baseWindow.SetPos(Vec2i(35, 45));
    SDL_TEST(baseWindow.GetPos().x == 35);
    SDL_TEST(baseWindow.GetPos().y == 45);

    baseWindow.SetSize(Vec2i(500, 600));
    SDL_TEST(baseWindow.GetSize().x == 500);
    SDL_TEST(baseWindow.GetSize().y == 600);

    baseWindow.SetTitle("Change BaseWindow");
    SDL_TEST(baseWindow.GetTitle() == "Change BaseWindow");
}

void TestMainWindow(SDL_WindowFlags flags)
{
    Result       result;
    EventHandler eventHandler;
    MainWindow   mainWindow(result, eventHandler, Vec2i(10, 15), Vec2i(640, 480), "Create MainWindow", flags);
    SDL_TEST(result.Ok() == true);
    SDL_TEST(mainWindow.GetPos().x  == 10);
    SDL_TEST(mainWindow.GetPos().y  == 15);
    SDL_TEST(mainWindow.GetSize().x == 640);
    SDL_TEST(mainWindow.GetSize().y == 480);
    SDL_TEST(mainWindow.GetTitle()  == "Create MainWindow");
    SDL_TEST(mainWindow.GetFlags()  == flags);

    mainWindow.SetPos(Vec2i(35, 45));
    SDL_TEST(mainWindow.GetPos().x == 35);
    SDL_TEST(mainWindow.GetPos().y == 45);

    mainWindow.SetSize(Vec2i(500, 600));
    SDL_TEST(mainWindow.GetSize().x == 500);
    SDL_TEST(mainWindow.GetSize().y == 600);

    mainWindow.SetTitle("Change MainWindow");
    SDL_TEST(mainWindow.GetTitle() == "Change MainWindow");
}

void TestOpenGL1Window(SDL_WindowFlags flags)
{
    OpenGLAttributes openGLAttributes;
    Result           result;
    EventHandler     eventHandler;
    OpenGL1Window    openGL1Window(openGLAttributes, result, eventHandler, Vec2i(10, 15), Vec2i(640, 480), "Create OpenGL1Window", flags);
    SDL_TEST(result.Ok() == true);
    SDL_TEST(openGL1Window.GetPos().x  == 10);
    SDL_TEST(openGL1Window.GetPos().y  == 15);
    SDL_TEST(openGL1Window.GetSize().x == 640);
    SDL_TEST(openGL1Window.GetSize().y == 480);
    SDL_TEST(openGL1Window.GetTitle()  == "Create OpenGL1Window");
    SDL_TEST(openGL1Window.GetFlags()  == flags);

    openGL1Window.SetPos(Vec2i(35, 45));
    SDL_TEST(openGL1Window.GetPos().x == 35);
    SDL_TEST(openGL1Window.GetPos().y == 45);

    openGL1Window.SetSize(Vec2i(500, 600));
    SDL_TEST(openGL1Window.GetSize().x == 500);
    SDL_TEST(openGL1Window.GetSize().y == 600);

    openGL1Window.SetTitle("Change OpenGL1Window");
    SDL_TEST(openGL1Window.GetTitle() == "Change OpenGL1Window");
}

void TestSoftwareWindow(SDL_WindowFlags flags)
{
    Result         result;
    EventHandler   eventHandler;
    SoftwareWindow softwareWindow(result, eventHandler, Vec2i(10, 15), Vec2i(640, 480), "Create SoftwareWindow", flags);
    SDL_TEST(result.Ok() == true);
    SDL_TEST(softwareWindow.GetPos().x  == 10);
    SDL_TEST(softwareWindow.GetPos().y  == 15);
    SDL_TEST(softwareWindow.GetSize().x == 640);
    SDL_TEST(softwareWindow.GetSize().y == 480);
    SDL_TEST(softwareWindow.GetTitle()  == "Create SoftwareWindow");
    SDL_TEST(softwareWindow.GetFlags()  == flags);

    softwareWindow.SetPos(Vec2i(35, 45));
    SDL_TEST(softwareWindow.GetPos().x == 35);
    SDL_TEST(softwareWindow.GetPos().y == 45);

    softwareWindow.SetSize(Vec2i(500, 600));
    SDL_TEST(softwareWindow.GetSize().x == 500);
    SDL_TEST(softwareWindow.GetSize().y == 600);

    softwareWindow.SetTitle("Change SoftwareWindow");
    SDL_TEST(softwareWindow.GetTitle() == "Change SoftwareWindow");
}

void TestWindowCreator(SDL_WindowFlags flags)
{
    OpenGLAttributes openGLAttributes;
    Result           result;
    EventHandler     eventHandler;
    WindowCreator    windowCreator(openGLAttributes, result, eventHandler);

    IWindow* window = windowCreator.Create(Vec2i(10, 15), Vec2i(640, 480), "Create Window", flags);
    SDL_TEST(window              != NULL);
    SDL_TEST(result.Ok()         == true);
    SDL_TEST(window->GetPos().x  == 10);
    SDL_TEST(window->GetPos().y  == 15);
    SDL_TEST(window->GetSize().x == 640);
    SDL_TEST(window->GetSize().y == 480);
    SDL_TEST(window->GetTitle()  == "Create Window");
    SDL_TEST(window->GetFlags()  == flags);

    windowCreator.Destroy(window);
}

void TestBmpLoader()
{
    Result result;
    BmpLoader bmpLoader(result);
    SDL_TEST(bmpLoader.Reset("sample.bmp") == true);
    SDL_TEST(bmpLoader.GetPixels()         != NULL);
    SDL_TEST(bmpLoader.GetSize().x         == 408);
    SDL_TEST(bmpLoader.GetSize().y         == 167);
    SDL_TEST(bmpLoader.GetBpp()            == 3);
}

int main()
{
    TestRingBuffer();
    TestEventHandler();
    TestResult();
    TestBaseWindow();
    TestMainWindow(SDL_WINDOW_OPENGL);
    TestOpenGL1Window(SDL_WINDOW_OPENGL);
    TestSoftwareWindow(0);
    TestWindowCreator(SDL_WINDOW_OPENGL);
    TestBmpLoader();

    return 0;
}
