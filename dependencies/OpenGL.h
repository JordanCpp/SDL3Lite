/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef OpenGL_h
#define OpenGL_h

#if defined(_WIN32)
    #include <Windows.h>
#elif defined (__unix__)
    #include <dlfcn.h>
#endif

#include <stdio.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void (*OpenGL_Function_Pointer)(void);

int OpenGL_LoadLibrary();
OpenGL_Function_Pointer OpenGL_Load(const char* name);
void OpenGL_UnLoad();
void OpenGL_Assert(const char* file, int line, const char* expression);

#define GL_ASSERT(expression)                           \
    do                                                  \
    {                                                   \
        expression;                                     \
        OpenGL_Assert(__FILE__, __LINE__, #expression); \
    } while (false)   

/********************************************************************************************************************************
														 Defines
********************************************************************************************************************************/

#if defined(_WIN32)
    #define OPENGL_API_CALL __stdcall *
#elif defined(__unix__)
    #define OPENGL_API_CALL *
#else
    #define OPENGL_API_CALL
#endif

#define OPENGL_API_ENTRY extern

/********************************************************************************************************************************
														  Types
********************************************************************************************************************************/

typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLsizei;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void GLvoid;
typedef unsigned int GLhandle;
typedef char GLchar;
typedef signed long int GLsizeiptr;

typedef size_t GLintptr;
typedef size_t GLint64;
typedef size_t GLuint64;

typedef struct __GLsync* GLsync;

typedef void (OPENGL_API_CALL GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);

/********************************************************************************************************************************
														  Constants
********************************************************************************************************************************/

#define	GL_DEPTH_BUFFER_BIT	(0x00000100)
#define	GL_STENCIL_BUFFER_BIT	(0x00000400)
#define	GL_COLOR_BUFFER_BIT	(0x00004000)
#define	GL_FALSE	(0)
#define	GL_TRUE	(1)
#define	GL_POINTS	(0x0000)
#define	GL_LINES	(0x0001)
#define	GL_LINE_LOOP	(0x0002)
#define	GL_LINE_STRIP	(0x0003)
#define	GL_TRIANGLES	(0x0004)
#define	GL_TRIANGLE_STRIP	(0x0005)
#define	GL_TRIANGLE_FAN	(0x0006)
#define	GL_QUADS	(0x0007)
#define	GL_NEVER	(0x0200)
#define	GL_LESS	(0x0201)
#define	GL_EQUAL	(0x0202)
#define	GL_LEQUAL	(0x0203)
#define	GL_GREATER	(0x0204)
#define	GL_NOTEQUAL	(0x0205)
#define	GL_GEQUAL	(0x0206)
#define	GL_ALWAYS	(0x0207)
#define	GL_ZERO	(0)
#define	GL_ONE	(1)
#define	GL_SRC_COLOR	(0x0300)
#define	GL_ONE_MINUS_SRC_COLOR	(0x0301)
#define	GL_SRC_ALPHA	(0x0302)
#define	GL_ONE_MINUS_SRC_ALPHA	(0x0303)
#define	GL_DST_ALPHA	(0x0304)
#define	GL_ONE_MINUS_DST_ALPHA	(0x0305)
#define	GL_DST_COLOR	(0x0306)
#define	GL_ONE_MINUS_DST_COLOR	(0x0307)
#define	GL_SRC_ALPHA_SATURATE	(0x0308)
#define	GL_NONE	(0)
#define	GL_FRONT_LEFT	(0x0400)
#define	GL_FRONT_RIGHT	(0x0401)
#define	GL_BACK_LEFT	(0x0402)
#define	GL_BACK_RIGHT	(0x0403)
#define	GL_FRONT	(0x0404)
#define	GL_BACK	(0x0405)
#define	GL_LEFT	(0x0406)
#define	GL_RIGHT	(0x0407)
#define	GL_FRONT_AND_BACK	(0x0408)
#define	GL_NO_ERROR	(0)
#define	GL_INVALID_ENUM	(0x0500)
#define	GL_INVALID_VALUE	(0x0501)
#define	GL_INVALID_OPERATION	(0x0502)
#define	GL_OUT_OF_MEMORY	(0x0505)
#define	GL_CW	(0x0900)
#define	GL_CCW	(0x0901)
#define	GL_POINT_SIZE	(0x0B11)
#define	GL_POINT_SIZE_RANGE	(0x0B12)
#define	GL_POINT_SIZE_GRANULARITY	(0x0B13)
#define	GL_LINE_SMOOTH	(0x0B20)
#define	GL_LINE_WIDTH	(0x0B21)
#define	GL_LINE_WIDTH_RANGE	(0x0B22)
#define	GL_LINE_WIDTH_GRANULARITY	(0x0B23)
#define	GL_POLYGON_MODE	(0x0B40)
#define	GL_POLYGON_SMOOTH	(0x0B41)
#define	GL_CULL_FACE	(0x0B44)
#define	GL_CULL_FACE_MODE	(0x0B45)
#define	GL_FRONT_FACE	(0x0B46)
#define	GL_DEPTH_RANGE	(0x0B70)
#define	GL_DEPTH_TEST	(0x0B71)
#define	GL_DEPTH_WRITEMASK	(0x0B72)
#define	GL_DEPTH_CLEAR_VALUE	(0x0B73)
#define	GL_DEPTH_FUNC	(0x0B74)
#define	GL_STENCIL_TEST	(0x0B90)
#define	GL_STENCIL_CLEAR_VALUE	(0x0B91)
#define	GL_STENCIL_FUNC	(0x0B92)
#define	GL_STENCIL_VALUE_MASK	(0x0B93)
#define	GL_STENCIL_FAIL	(0x0B94)
#define	GL_STENCIL_PASS_DEPTH_FAIL	(0x0B95)
#define	GL_STENCIL_PASS_DEPTH_PASS	(0x0B96)
#define	GL_STENCIL_REF	(0x0B97)
#define	GL_STENCIL_WRITEMASK	(0x0B98)
#define	GL_VIEWPORT	(0x0BA2)
#define	GL_DITHER	(0x0BD0)
#define	GL_BLEND_DST	(0x0BE0)
#define	GL_BLEND_SRC	(0x0BE1)
#define	GL_BLEND	(0x0BE2)
#define	GL_LOGIC_OP_MODE	(0x0BF0)
#define	GL_DRAW_BUFFER	(0x0C01)
#define	GL_READ_BUFFER	(0x0C02)
#define	GL_SCISSOR_BOX	(0x0C10)
#define	GL_SCISSOR_TEST	(0x0C11)
#define	GL_COLOR_CLEAR_VALUE	(0x0C22)
#define	GL_COLOR_WRITEMASK	(0x0C23)
#define	GL_DOUBLEBUFFER	(0x0C32)
#define	GL_STEREO	(0x0C33)
#define	GL_LINE_SMOOTH_HINT	(0x0C52)
#define	GL_POLYGON_SMOOTH_HINT	(0x0C53)
#define	GL_UNPACK_SWAP_BYTES	(0x0CF0)
#define	GL_UNPACK_LSB_FIRST	(0x0CF1)
#define	GL_UNPACK_ROW_LENGTH	(0x0CF2)
#define	GL_UNPACK_SKIP_ROWS	(0x0CF3)
#define	GL_UNPACK_SKIP_PIXELS	(0x0CF4)
#define	GL_UNPACK_ALIGNMENT	(0x0CF5)
#define	GL_PACK_SWAP_BYTES	(0x0D00)
#define	GL_PACK_LSB_FIRST	(0x0D01)
#define	GL_PACK_ROW_LENGTH	(0x0D02)
#define	GL_PACK_SKIP_ROWS	(0x0D03)
#define	GL_PACK_SKIP_PIXELS	(0x0D04)
#define	GL_PACK_ALIGNMENT	(0x0D05)
#define	GL_MAX_TEXTURE_SIZE	(0x0D33)
#define	GL_MAX_VIEWPORT_DIMS	(0x0D3A)
#define	GL_SUBPIXEL_BITS	(0x0D50)
#define	GL_TEXTURE_1D	(0x0DE0)
#define	GL_TEXTURE_2D	(0x0DE1)
#define	GL_TEXTURE_WIDTH	(0x1000)
#define	GL_TEXTURE_HEIGHT	(0x1001)
#define	GL_TEXTURE_BORDER_COLOR	(0x1004)
#define	GL_DONT_CARE	(0x1100)
#define	GL_FASTEST	(0x1101)
#define	GL_NICEST	(0x1102)
#define	GL_BYTE	(0x1400)
#define	GL_UNSIGNED_BYTE	(0x1401)
#define	GL_SHORT	(0x1402)
#define	GL_UNSIGNED_SHORT	(0x1403)
#define	GL_INT	(0x1404)
#define	GL_UNSIGNED_INT	(0x1405)
#define	GL_FLOAT	(0x1406)
#define	GL_STACK_OVERFLOW	(0x0503)
#define	GL_STACK_UNDERFLOW	(0x0504)
#define	GL_CLEAR	(0x1500)
#define	GL_AND	(0x1501)
#define	GL_AND_REVERSE	(0x1502)
#define	GL_COPY	(0x1503)
#define	GL_AND_INVERTED	(0x1504)
#define	GL_NOOP	(0x1505)
#define	GL_XOR	(0x1506)
#define	GL_OR	(0x1507)
#define	GL_NOR	(0x1508)
#define	GL_EQUIV	(0x1509)
#define	GL_INVERT	(0x150A)
#define	GL_OR_REVERSE	(0x150B)
#define	GL_COPY_INVERTED	(0x150C)
#define	GL_OR_INVERTED	(0x150D)
#define	GL_NAND	(0x150E)
#define	GL_SET	(0x150F)
#define	GL_TEXTURE	(0x1702)
#define	GL_COLOR	(0x1800)
#define	GL_DEPTH	(0x1801)
#define	GL_STENCIL	(0x1802)
#define	GL_STENCIL_INDEX	(0x1901)
#define	GL_DEPTH_COMPONENT	(0x1902)
#define	GL_RED	(0x1903)
#define	GL_GREEN	(0x1904)
#define	GL_BLUE	(0x1905)
#define	GL_ALPHA	(0x1906)
#define	GL_RGB	(0x1907)
#define	GL_RGBA	(0x1908)
#define	GL_POINT	(0x1B00)
#define	GL_LINE	(0x1B01)
#define	GL_FILL	(0x1B02)
#define	GL_KEEP	(0x1E00)
#define	GL_REPLACE	(0x1E01)
#define	GL_INCR	(0x1E02)
#define	GL_DECR	(0x1E03)
#define	GL_VENDOR	(0x1F00)
#define	GL_RENDERER	(0x1F01)
#define	GL_VERSION	(0x1F02)
#define	GL_EXTENSIONS	(0x1F03)
#define	GL_NEAREST	(0x2600)
#define	GL_LINEAR	(0x2601)
#define	GL_NEAREST_MIPMAP_NEAREST	(0x2700)
#define	GL_LINEAR_MIPMAP_NEAREST	(0x2701)
#define	GL_NEAREST_MIPMAP_LINEAR	(0x2702)
#define	GL_LINEAR_MIPMAP_LINEAR	(0x2703)
#define	GL_TEXTURE_MAG_FILTER	(0x2800)
#define	GL_TEXTURE_MIN_FILTER	(0x2801)
#define	GL_TEXTURE_WRAP_S	(0x2802)
#define	GL_TEXTURE_WRAP_T	(0x2803)
#define	GL_REPEAT	(0x2901)
#define	GL_CURRENT_BIT	(0x00000001)
#define	GL_POINT_BIT	(0x00000002)
#define	GL_LINE_BIT	(0x00000004)
#define	GL_POLYGON_BIT	(0x00000008)
#define	GL_POLYGON_STIPPLE_BIT	(0x00000010)
#define	GL_PIXEL_MODE_BIT	(0x00000020)
#define	GL_LIGHTING_BIT	(0x00000040)
#define	GL_FOG_BIT	(0x00000080)
#define	GL_ACCUM_BUFFER_BIT	(0x00000200)
#define	GL_VIEWPORT_BIT	(0x00000800)
#define	GL_TRANSFORM_BIT	(0x00001000)
#define	GL_ENABLE_BIT	(0x00002000)
#define	GL_HINT_BIT	(0x00008000)
#define	GL_EVAL_BIT	(0x00010000)
#define	GL_LIST_BIT	(0x00020000)
#define	GL_TEXTURE_BIT	(0x00040000)
#define	GL_SCISSOR_BIT	(0x00080000)
#define	GL_ALL_ATTRIB_BITS	(0xFFFFFFFF)
#define	GL_QUAD_STRIP	(0x0008)
#define	GL_POLYGON	(0x0009)
#define	GL_ACCUM	(0x0100)
#define	GL_LOAD	(0x0101)
#define	GL_RETURN	(0x0102)
#define	GL_MULT	(0x0103)
#define	GL_ADD	(0x0104)
#define	GL_AUX0	(0x0409)
#define	GL_AUX1	(0x040A)
#define	GL_AUX2	(0x040B)
#define	GL_AUX3	(0x040C)
#define	GL_2D	(0x0600)
#define	GL_3D	(0x0601)
#define	GL_3D_COLOR	(0x0602)
#define	GL_3D_COLOR_TEXTURE	(0x0603)
#define	GL_4D_COLOR_TEXTURE	(0x0604)
#define	GL_PASS_THROUGH_TOKEN	(0x0700)
#define	GL_POINT_TOKEN	(0x0701)
#define	GL_LINE_TOKEN	(0x0702)
#define	GL_POLYGON_TOKEN	(0x0703)
#define	GL_BITMAP_TOKEN	(0x0704)
#define	GL_DRAW_PIXEL_TOKEN	(0x0705)
#define	GL_COPY_PIXEL_TOKEN	(0x0706)
#define	GL_LINE_RESET_TOKEN	(0x0707)
#define	GL_EXP	(0x0800)
#define	GL_EXP2	(0x0801)
#define	GL_COEFF	(0x0A00)
#define	GL_ORDER	(0x0A01)
#define	GL_DOMAIN	(0x0A02)
#define	GL_PIXEL_MAP_I_TO_I	(0x0C70)
#define	GL_PIXEL_MAP_S_TO_S	(0x0C71)
#define	GL_PIXEL_MAP_I_TO_R	(0x0C72)
#define	GL_PIXEL_MAP_I_TO_G	(0x0C73)
#define	GL_PIXEL_MAP_I_TO_B	(0x0C74)
#define	GL_PIXEL_MAP_I_TO_A	(0x0C75)
#define	GL_PIXEL_MAP_R_TO_R	(0x0C76)
#define	GL_PIXEL_MAP_G_TO_G	(0x0C77)
#define	GL_PIXEL_MAP_B_TO_B	(0x0C78)
#define	GL_PIXEL_MAP_A_TO_A	(0x0C79)
#define	GL_CURRENT_COLOR	(0x0B00)
#define	GL_CURRENT_INDEX	(0x0B01)
#define	GL_CURRENT_NORMAL	(0x0B02)
#define	GL_CURRENT_TEXTURE_COORDS	(0x0B03)
#define	GL_CURRENT_RASTER_COLOR	(0x0B04)
#define	GL_CURRENT_RASTER_INDEX	(0x0B05)
#define	GL_CURRENT_RASTER_TEXTURE_COORDS	(0x0B06)
#define	GL_CURRENT_RASTER_POSITION	(0x0B07)
#define	GL_CURRENT_RASTER_POSITION_VALID	(0x0B08)
#define	GL_CURRENT_RASTER_DISTANCE	(0x0B09)
#define	GL_POINT_SMOOTH	(0x0B10)
#define	GL_LINE_STIPPLE	(0x0B24)
#define	GL_LINE_STIPPLE_PATTERN	(0x0B25)
#define	GL_LINE_STIPPLE_REPEAT	(0x0B26)
#define	GL_LIST_MODE	(0x0B30)
#define	GL_MAX_LIST_NESTING	(0x0B31)
#define	GL_LIST_BASE	(0x0B32)
#define	GL_LIST_INDEX	(0x0B33)
#define	GL_POLYGON_STIPPLE	(0x0B42)
#define	GL_EDGE_FLAG	(0x0B43)
#define	GL_LIGHTING	(0x0B50)
#define	GL_LIGHT_MODEL_LOCAL_VIEWER	(0x0B51)
#define	GL_LIGHT_MODEL_TWO_SIDE	(0x0B52)
#define	GL_LIGHT_MODEL_AMBIENT	(0x0B53)
#define	GL_SHADE_MODEL	(0x0B54)
#define	GL_COLOR_MATERIAL_FACE	(0x0B55)
#define	GL_COLOR_MATERIAL_PARAMETER	(0x0B56)
#define	GL_COLOR_MATERIAL	(0x0B57)
#define	GL_FOG	(0x0B60)
#define	GL_FOG_INDEX	(0x0B61)
#define	GL_FOG_DENSITY	(0x0B62)
#define	GL_FOG_START	(0x0B63)
#define	GL_FOG_END	(0x0B64)
#define	GL_FOG_MODE	(0x0B65)
#define	GL_FOG_COLOR	(0x0B66)
#define	GL_ACCUM_CLEAR_VALUE	(0x0B80)
#define	GL_MATRIX_MODE	(0x0BA0)
#define	GL_NORMALIZE	(0x0BA1)
#define	GL_MODELVIEW_STACK_DEPTH	(0x0BA3)
#define	GL_PROJECTION_STACK_DEPTH	(0x0BA4)
#define	GL_TEXTURE_STACK_DEPTH	(0x0BA5)
#define	GL_MODELVIEW_MATRIX	(0x0BA6)
#define	GL_PROJECTION_MATRIX	(0x0BA7)
#define	GL_TEXTURE_MATRIX	(0x0BA8)
#define	GL_ATTRIB_STACK_DEPTH	(0x0BB0)
#define	GL_ALPHA_TEST	(0x0BC0)
#define	GL_ALPHA_TEST_FUNC	(0x0BC1)
#define	GL_ALPHA_TEST_REF	(0x0BC2)
#define	GL_LOGIC_OP	(0x0BF1)
#define	GL_AUX_BUFFERS	(0x0C00)
#define	GL_INDEX_CLEAR_VALUE	(0x0C20)
#define	GL_INDEX_WRITEMASK	(0x0C21)
#define	GL_INDEX_MODE	(0x0C30)
#define	GL_RGBA_MODE	(0x0C31)
#define	GL_RENDER_MODE	(0x0C40)
#define	GL_PERSPECTIVE_CORRECTION_HINT	(0x0C50)
#define	GL_POINT_SMOOTH_HINT	(0x0C51)
#define	GL_FOG_HINT	(0x0C54)
#define	GL_TEXTURE_GEN_S	(0x0C60)
#define	GL_TEXTURE_GEN_T	(0x0C61)
#define	GL_TEXTURE_GEN_R	(0x0C62)
#define	GL_TEXTURE_GEN_Q	(0x0C63)
#define	GL_PIXEL_MAP_I_TO_I_SIZE	(0x0CB0)
#define	GL_PIXEL_MAP_S_TO_S_SIZE	(0x0CB1)
#define	GL_PIXEL_MAP_I_TO_R_SIZE	(0x0CB2)
#define	GL_PIXEL_MAP_I_TO_G_SIZE	(0x0CB3)
#define	GL_PIXEL_MAP_I_TO_B_SIZE	(0x0CB4)
#define	GL_PIXEL_MAP_I_TO_A_SIZE	(0x0CB5)
#define	GL_PIXEL_MAP_R_TO_R_SIZE	(0x0CB6)
#define	GL_PIXEL_MAP_G_TO_G_SIZE	(0x0CB7)
#define	GL_PIXEL_MAP_B_TO_B_SIZE	(0x0CB8)
#define	GL_PIXEL_MAP_A_TO_A_SIZE	(0x0CB9)
#define	GL_MAP_COLOR	(0x0D10)
#define	GL_MAP_STENCIL	(0x0D11)
#define	GL_INDEX_SHIFT	(0x0D12)
#define	GL_INDEX_OFFSET	(0x0D13)
#define	GL_RED_SCALE	(0x0D14)
#define	GL_RED_BIAS	(0x0D15)
#define	GL_ZOOM_X	(0x0D16)
#define	GL_ZOOM_Y	(0x0D17)
#define	GL_GREEN_SCALE	(0x0D18)
#define	GL_GREEN_BIAS	(0x0D19)
#define	GL_BLUE_SCALE	(0x0D1A)
#define	GL_BLUE_BIAS	(0x0D1B)
#define	GL_ALPHA_SCALE	(0x0D1C)
#define	GL_ALPHA_BIAS	(0x0D1D)
#define	GL_DEPTH_SCALE	(0x0D1E)
#define	GL_DEPTH_BIAS	(0x0D1F)
#define	GL_MAX_EVAL_ORDER	(0x0D30)
#define	GL_MAX_LIGHTS	(0x0D31)
#define	GL_MAX_CLIP_PLANES	(0x0D32)
#define	GL_MAX_PIXEL_MAP_TABLE	(0x0D34)
#define	GL_MAX_ATTRIB_STACK_DEPTH	(0x0D35)
#define	GL_MAX_MODELVIEW_STACK_DEPTH	(0x0D36)
#define	GL_MAX_NAME_STACK_DEPTH	(0x0D37)
#define	GL_MAX_PROJECTION_STACK_DEPTH	(0x0D38)
#define	GL_MAX_TEXTURE_STACK_DEPTH	(0x0D39)
#define	GL_INDEX_BITS	(0x0D51)
#define	GL_RED_BITS	(0x0D52)
#define	GL_GREEN_BITS	(0x0D53)
#define	GL_BLUE_BITS	(0x0D54)
#define	GL_ALPHA_BITS	(0x0D55)
#define	GL_DEPTH_BITS	(0x0D56)
#define	GL_STENCIL_BITS	(0x0D57)
#define	GL_ACCUM_RED_BITS	(0x0D58)
#define	GL_ACCUM_GREEN_BITS	(0x0D59)
#define	GL_ACCUM_BLUE_BITS	(0x0D5A)
#define	GL_ACCUM_ALPHA_BITS	(0x0D5B)
#define	GL_NAME_STACK_DEPTH	(0x0D70)
#define	GL_AUTO_NORMAL	(0x0D80)
#define	GL_MAP1_COLOR_4	(0x0D90)
#define	GL_MAP1_INDEX	(0x0D91)
#define	GL_MAP1_NORMAL	(0x0D92)
#define	GL_MAP1_TEXTURE_COORD_1	(0x0D93)
#define	GL_MAP1_TEXTURE_COORD_2	(0x0D94)
#define	GL_MAP1_TEXTURE_COORD_3	(0x0D95)
#define	GL_MAP1_TEXTURE_COORD_4	(0x0D96)
#define	GL_MAP1_VERTEX_3	(0x0D97)
#define	GL_MAP1_VERTEX_4	(0x0D98)
#define	GL_MAP2_COLOR_4	(0x0DB0)
#define	GL_MAP2_INDEX	(0x0DB1)
#define	GL_MAP2_NORMAL	(0x0DB2)
#define	GL_MAP2_TEXTURE_COORD_1	(0x0DB3)
#define	GL_MAP2_TEXTURE_COORD_2	(0x0DB4)
#define	GL_MAP2_TEXTURE_COORD_3	(0x0DB5)
#define	GL_MAP2_TEXTURE_COORD_4	(0x0DB6)
#define	GL_MAP2_VERTEX_3	(0x0DB7)
#define	GL_MAP2_VERTEX_4	(0x0DB8)
#define	GL_MAP1_GRID_DOMAIN	(0x0DD0)
#define	GL_MAP1_GRID_SEGMENTS	(0x0DD1)
#define	GL_MAP2_GRID_DOMAIN	(0x0DD2)
#define	GL_MAP2_GRID_SEGMENTS	(0x0DD3)
#define	GL_TEXTURE_COMPONENTS	(0x1003)
#define	GL_TEXTURE_BORDER	(0x1005)
#define	GL_AMBIENT	(0x1200)
#define	GL_DIFFUSE	(0x1201)
#define	GL_SPECULAR	(0x1202)
#define	GL_POSITION	(0x1203)
#define	GL_SPOT_DIRECTION	(0x1204)
#define	GL_SPOT_EXPONENT	(0x1205)
#define	GL_SPOT_CUTOFF	(0x1206)
#define	GL_CONSTANT_ATTENUATION	(0x1207)
#define	GL_LINEAR_ATTENUATION	(0x1208)
#define	GL_QUADRATIC_ATTENUATION	(0x1209)
#define	GL_COMPILE	(0x1300)
#define	GL_COMPILE_AND_EXECUTE	(0x1301)
#define	GL_2_BYTES	(0x1407)
#define	GL_3_BYTES	(0x1408)
#define	GL_4_BYTES	(0x1409)
#define	GL_EMISSION	(0x1600)
#define	GL_SHININESS	(0x1601)
#define	GL_AMBIENT_AND_DIFFUSE	(0x1602)
#define	GL_COLOR_INDEXES	(0x1603)
#define	GL_MODELVIEW	(0x1700)
#define	GL_PROJECTION	(0x1701)
#define	GL_COLOR_INDEX	(0x1900)
#define	GL_LUMINANCE	(0x1909)
#define	GL_LUMINANCE_ALPHA	(0x190A)
#define	GL_BITMAP	(0x1A00)
#define	GL_RENDER	(0x1C00)
#define	GL_FEEDBACK	(0x1C01)
#define	GL_SELECT	(0x1C02)
#define	GL_FLAT	(0x1D00)
#define	GL_SMOOTH	(0x1D01)
#define	GL_S	(0x2000)
#define	GL_T	(0x2001)
#define	GL_R	(0x2002)
#define	GL_Q	(0x2003)
#define	GL_MODULATE	(0x2100)
#define	GL_DECAL	(0x2101)
#define	GL_TEXTURE_ENV_MODE	(0x2200)
#define	GL_TEXTURE_ENV_COLOR	(0x2201)
#define	GL_TEXTURE_ENV	(0x2300)
#define	GL_EYE_LINEAR	(0x2400)
#define	GL_OBJECT_LINEAR	(0x2401)
#define	GL_SPHERE_MAP	(0x2402)
#define	GL_TEXTURE_GEN_MODE	(0x2500)
#define	GL_OBJECT_PLANE	(0x2501)
#define	GL_EYE_PLANE	(0x2502)
#define	GL_CLAMP	(0x2900)
#define	GL_CLIP_PLANE0	(0x3000)
#define	GL_CLIP_PLANE1	(0x3001)
#define	GL_CLIP_PLANE2	(0x3002)
#define	GL_CLIP_PLANE3	(0x3003)
#define	GL_CLIP_PLANE4	(0x3004)
#define	GL_CLIP_PLANE5	(0x3005)
#define	GL_LIGHT0	(0x4000)
#define	GL_LIGHT1	(0x4001)
#define	GL_LIGHT2	(0x4002)
#define	GL_LIGHT3	(0x4003)
#define	GL_LIGHT4	(0x4004)
#define	GL_LIGHT5	(0x4005)
#define	GL_LIGHT6	(0x4006)
#define	GL_LIGHT7	(0x4007)
#define	GL_COLOR_LOGIC_OP	(0x0BF2)
#define	GL_POLYGON_OFFSET_UNITS	(0x2A00)
#define	GL_POLYGON_OFFSET_POINT	(0x2A01)
#define	GL_POLYGON_OFFSET_LINE	(0x2A02)
#define	GL_POLYGON_OFFSET_FILL	(0x8037)
#define	GL_POLYGON_OFFSET_FACTOR	(0x8038)
#define	GL_TEXTURE_BINDING_1D	(0x8068)
#define	GL_TEXTURE_BINDING_2D	(0x8069)
#define	GL_TEXTURE_INTERNAL_FORMAT	(0x1003)
#define	GL_TEXTURE_RED_SIZE	(0x805C)
#define	GL_TEXTURE_GREEN_SIZE	(0x805D)
#define	GL_TEXTURE_BLUE_SIZE	(0x805E)
#define	GL_TEXTURE_ALPHA_SIZE	(0x805F)
#define	GL_DOUBLE	(0x140A)
#define	GL_PROXY_TEXTURE_1D	(0x8063)
#define	GL_PROXY_TEXTURE_2D	(0x8064)
#define	GL_R3_G3_B2	(0x2A10)
#define	GL_RGB4	(0x804F)
#define	GL_RGB5	(0x8050)
#define	GL_RGB8	(0x8051)
#define	GL_RGB10	(0x8052)
#define	GL_RGB12	(0x8053)
#define	GL_RGB16	(0x8054)
#define	GL_RGBA2	(0x8055)
#define	GL_RGBA4	(0x8056)
#define	GL_RGB5_A1	(0x8057)
#define	GL_RGBA8	(0x8058)
#define	GL_RGB10_A2	(0x8059)
#define	GL_RGBA12	(0x805A)
#define	GL_RGBA16	(0x805B)
#define	GL_CLIENT_PIXEL_STORE_BIT	(0x00000001)
#define	GL_CLIENT_VERTEX_ARRAY_BIT	(0x00000002)
#define	GL_CLIENT_ALL_ATTRIB_BITS	(0xFFFFFFFF)
#define	GL_VERTEX_ARRAY_POINTER	(0x808E)
#define	GL_NORMAL_ARRAY_POINTER	(0x808F)
#define	GL_COLOR_ARRAY_POINTER	(0x8090)
#define	GL_INDEX_ARRAY_POINTER	(0x8091)
#define	GL_TEXTURE_COORD_ARRAY_POINTER	(0x8092)
#define	GL_EDGE_FLAG_ARRAY_POINTER	(0x8093)
#define	GL_FEEDBACK_BUFFER_POINTER	(0x0DF0)
#define	GL_SELECTION_BUFFER_POINTER	(0x0DF3)
#define	GL_CLIENT_ATTRIB_STACK_DEPTH	(0x0BB1)
#define	GL_INDEX_LOGIC_OP	(0x0BF1)
#define	GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	(0x0D3B)
#define	GL_FEEDBACK_BUFFER_SIZE	(0x0DF1)
#define	GL_FEEDBACK_BUFFER_TYPE	(0x0DF2)
#define	GL_SELECTION_BUFFER_SIZE	(0x0DF4)
#define	GL_VERTEX_ARRAY	(0x8074)
#define	GL_NORMAL_ARRAY	(0x8075)
#define	GL_COLOR_ARRAY	(0x8076)
#define	GL_INDEX_ARRAY	(0x8077)
#define	GL_TEXTURE_COORD_ARRAY	(0x8078)
#define	GL_EDGE_FLAG_ARRAY	(0x8079)
#define	GL_VERTEX_ARRAY_SIZE	(0x807A)
#define	GL_VERTEX_ARRAY_TYPE	(0x807B)
#define	GL_VERTEX_ARRAY_STRIDE	(0x807C)
#define	GL_NORMAL_ARRAY_TYPE	(0x807E)
#define	GL_NORMAL_ARRAY_STRIDE	(0x807F)
#define	GL_COLOR_ARRAY_SIZE	(0x8081)
#define	GL_COLOR_ARRAY_TYPE	(0x8082)
#define	GL_COLOR_ARRAY_STRIDE	(0x8083)
#define	GL_INDEX_ARRAY_TYPE	(0x8085)
#define	GL_INDEX_ARRAY_STRIDE	(0x8086)
#define	GL_TEXTURE_COORD_ARRAY_SIZE	(0x8088)
#define	GL_TEXTURE_COORD_ARRAY_TYPE	(0x8089)
#define	GL_TEXTURE_COORD_ARRAY_STRIDE	(0x808A)
#define	GL_EDGE_FLAG_ARRAY_STRIDE	(0x808C)
#define	GL_TEXTURE_LUMINANCE_SIZE	(0x8060)
#define	GL_TEXTURE_INTENSITY_SIZE	(0x8061)
#define	GL_TEXTURE_PRIORITY	(0x8066)
#define	GL_TEXTURE_RESIDENT	(0x8067)
#define	GL_ALPHA4	(0x803B)
#define	GL_ALPHA8	(0x803C)
#define	GL_ALPHA12	(0x803D)
#define	GL_ALPHA16	(0x803E)
#define	GL_LUMINANCE4	(0x803F)
#define	GL_LUMINANCE8	(0x8040)
#define	GL_LUMINANCE12	(0x8041)
#define	GL_LUMINANCE16	(0x8042)
#define	GL_LUMINANCE4_ALPHA4	(0x8043)
#define	GL_LUMINANCE6_ALPHA2	(0x8044)
#define	GL_LUMINANCE8_ALPHA8	(0x8045)
#define	GL_LUMINANCE12_ALPHA4	(0x8046)
#define	GL_LUMINANCE12_ALPHA12	(0x8047)
#define	GL_LUMINANCE16_ALPHA16	(0x8048)
#define	GL_INTENSITY	(0x8049)
#define	GL_INTENSITY4	(0x804A)
#define	GL_INTENSITY8	(0x804B)
#define	GL_INTENSITY12	(0x804C)
#define	GL_INTENSITY16	(0x804D)
#define	GL_V2F	(0x2A20)
#define	GL_V3F	(0x2A21)
#define	GL_C4UB_V2F	(0x2A22)
#define	GL_C4UB_V3F	(0x2A23)
#define	GL_C3F_V3F	(0x2A24)
#define	GL_N3F_V3F	(0x2A25)
#define	GL_C4F_N3F_V3F	(0x2A26)
#define	GL_T2F_V3F	(0x2A27)
#define	GL_T4F_V4F	(0x2A28)
#define	GL_T2F_C4UB_V3F	(0x2A29)
#define	GL_T2F_C3F_V3F	(0x2A2A)
#define	GL_T2F_N3F_V3F	(0x2A2B)
#define	GL_T2F_C4F_N3F_V3F	(0x2A2C)
#define	GL_T4F_C4F_N3F_V4F	(0x2A2D)
#define	GL_UNSIGNED_BYTE_3_3_2	(0x8032)
#define	GL_UNSIGNED_SHORT_4_4_4_4	(0x8033)
#define	GL_UNSIGNED_SHORT_5_5_5_1	(0x8034)
#define	GL_UNSIGNED_INT_8_8_8_8	(0x8035)
#define	GL_UNSIGNED_INT_10_10_10_2	(0x8036)
#define	GL_TEXTURE_BINDING_3D	(0x806A)
#define	GL_PACK_SKIP_IMAGES	(0x806B)
#define	GL_PACK_IMAGE_HEIGHT	(0x806C)
#define	GL_UNPACK_SKIP_IMAGES	(0x806D)
#define	GL_UNPACK_IMAGE_HEIGHT	(0x806E)
#define	GL_TEXTURE_3D	(0x806F)
#define	GL_PROXY_TEXTURE_3D	(0x8070)
#define	GL_TEXTURE_DEPTH	(0x8071)
#define	GL_TEXTURE_WRAP_R	(0x8072)
#define	GL_MAX_3D_TEXTURE_SIZE	(0x8073)
#define	GL_UNSIGNED_BYTE_2_3_3_REV	(0x8362)
#define	GL_UNSIGNED_SHORT_5_6_5	(0x8363)
#define	GL_UNSIGNED_SHORT_5_6_5_REV	(0x8364)
#define	GL_UNSIGNED_SHORT_4_4_4_4_REV	(0x8365)
#define	GL_UNSIGNED_SHORT_1_5_5_5_REV	(0x8366)
#define	GL_UNSIGNED_INT_8_8_8_8_REV	(0x8367)
#define	GL_UNSIGNED_INT_2_10_10_10_REV	(0x8368)
#define	GL_BGR	(0x80E0)
#define	GL_BGRA	(0x80E1)
#define	GL_MAX_ELEMENTS_VERTICES	(0x80E8)
#define	GL_MAX_ELEMENTS_INDICES	(0x80E9)
#define	GL_CLAMP_TO_EDGE	(0x812F)
#define	GL_TEXTURE_MIN_LOD	(0x813A)
#define	GL_TEXTURE_MAX_LOD	(0x813B)
#define	GL_TEXTURE_BASE_LEVEL	(0x813C)
#define	GL_TEXTURE_MAX_LEVEL	(0x813D)
#define	GL_SMOOTH_POINT_SIZE_RANGE	(0x0B12)
#define	GL_SMOOTH_POINT_SIZE_GRANULARITY	(0x0B13)
#define	GL_SMOOTH_LINE_WIDTH_RANGE	(0x0B22)
#define	GL_SMOOTH_LINE_WIDTH_GRANULARITY	(0x0B23)
#define	GL_ALIASED_LINE_WIDTH_RANGE	(0x846E)
#define	GL_RESCALE_NORMAL	(0x803A)
#define	GL_LIGHT_MODEL_COLOR_CONTROL	(0x81F8)
#define	GL_SINGLE_COLOR	(0x81F9)
#define	GL_SEPARATE_SPECULAR_COLOR	(0x81FA)
#define	GL_ALIASED_POINT_SIZE_RANGE	(0x846D)
#define	GL_TEXTURE0	(0x84C0)
#define	GL_TEXTURE1	(0x84C1)
#define	GL_TEXTURE2	(0x84C2)
#define	GL_TEXTURE3	(0x84C3)
#define	GL_TEXTURE4	(0x84C4)
#define	GL_TEXTURE5	(0x84C5)
#define	GL_TEXTURE6	(0x84C6)
#define	GL_TEXTURE7	(0x84C7)
#define	GL_TEXTURE8	(0x84C8)
#define	GL_TEXTURE9	(0x84C9)
#define	GL_TEXTURE10	(0x84CA)
#define	GL_TEXTURE11	(0x84CB)
#define	GL_TEXTURE12	(0x84CC)
#define	GL_TEXTURE13	(0x84CD)
#define	GL_TEXTURE14	(0x84CE)
#define	GL_TEXTURE15	(0x84CF)
#define	GL_TEXTURE16	(0x84D0)
#define	GL_TEXTURE17	(0x84D1)
#define	GL_TEXTURE18	(0x84D2)
#define	GL_TEXTURE19	(0x84D3)
#define	GL_TEXTURE20	(0x84D4)
#define	GL_TEXTURE21	(0x84D5)
#define	GL_TEXTURE22	(0x84D6)
#define	GL_TEXTURE23	(0x84D7)
#define	GL_TEXTURE24	(0x84D8)
#define	GL_TEXTURE25	(0x84D9)
#define	GL_TEXTURE26	(0x84DA)
#define	GL_TEXTURE27	(0x84DB)
#define	GL_TEXTURE28	(0x84DC)
#define	GL_TEXTURE29	(0x84DD)
#define	GL_TEXTURE30	(0x84DE)
#define	GL_TEXTURE31	(0x84DF)
#define	GL_ACTIVE_TEXTURE	(0x84E0)
#define	GL_MULTISAMPLE	(0x809D)
#define	GL_SAMPLE_ALPHA_TO_COVERAGE	(0x809E)
#define	GL_SAMPLE_ALPHA_TO_ONE	(0x809F)
#define	GL_SAMPLE_COVERAGE	(0x80A0)
#define	GL_SAMPLE_BUFFERS	(0x80A8)
#define	GL_SAMPLES	(0x80A9)
#define	GL_SAMPLE_COVERAGE_VALUE	(0x80AA)
#define	GL_SAMPLE_COVERAGE_INVERT	(0x80AB)
#define	GL_TEXTURE_CUBE_MAP	(0x8513)
#define	GL_TEXTURE_BINDING_CUBE_MAP	(0x8514)
#define	GL_TEXTURE_CUBE_MAP_POSITIVE_X	(0x8515)
#define	GL_TEXTURE_CUBE_MAP_NEGATIVE_X	(0x8516)
#define	GL_TEXTURE_CUBE_MAP_POSITIVE_Y	(0x8517)
#define	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	(0x8518)
#define	GL_TEXTURE_CUBE_MAP_POSITIVE_Z	(0x8519)
#define	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	(0x851A)
#define	GL_PROXY_TEXTURE_CUBE_MAP	(0x851B)
#define	GL_MAX_CUBE_MAP_TEXTURE_SIZE	(0x851C)
#define	GL_COMPRESSED_RGB	(0x84ED)
#define	GL_COMPRESSED_RGBA	(0x84EE)
#define	GL_TEXTURE_COMPRESSION_HINT	(0x84EF)
#define	GL_TEXTURE_COMPRESSED_IMAGE_SIZE	(0x86A0)
#define	GL_TEXTURE_COMPRESSED	(0x86A1)
#define	GL_NUM_COMPRESSED_TEXTURE_FORMATS	(0x86A2)
#define	GL_COMPRESSED_TEXTURE_FORMATS	(0x86A3)
#define	GL_CLAMP_TO_BORDER	(0x812D)
#define	GL_CLIENT_ACTIVE_TEXTURE	(0x84E1)
#define	GL_MAX_TEXTURE_UNITS	(0x84E2)
#define	GL_TRANSPOSE_MODELVIEW_MATRIX	(0x84E3)
#define	GL_TRANSPOSE_PROJECTION_MATRIX	(0x84E4)
#define	GL_TRANSPOSE_TEXTURE_MATRIX	(0x84E5)
#define	GL_TRANSPOSE_COLOR_MATRIX	(0x84E6)
#define	GL_MULTISAMPLE_BIT	(0x20000000)
#define	GL_NORMAL_MAP	(0x8511)
#define	GL_REFLECTION_MAP	(0x8512)
#define	GL_COMPRESSED_ALPHA	(0x84E9)
#define	GL_COMPRESSED_LUMINANCE	(0x84EA)
#define	GL_COMPRESSED_LUMINANCE_ALPHA	(0x84EB)
#define	GL_COMPRESSED_INTENSITY	(0x84EC)
#define	GL_COMBINE	(0x8570)
#define	GL_COMBINE_RGB	(0x8571)
#define	GL_COMBINE_ALPHA	(0x8572)
#define	GL_SOURCE0_RGB	(0x8580)
#define	GL_SOURCE1_RGB	(0x8581)
#define	GL_SOURCE2_RGB	(0x8582)
#define	GL_SOURCE0_ALPHA	(0x8588)
#define	GL_SOURCE1_ALPHA	(0x8589)
#define	GL_SOURCE2_ALPHA	(0x858A)
#define	GL_OPERAND0_RGB	(0x8590)
#define	GL_OPERAND1_RGB	(0x8591)
#define	GL_OPERAND2_RGB	(0x8592)
#define	GL_OPERAND0_ALPHA	(0x8598)
#define	GL_OPERAND1_ALPHA	(0x8599)
#define	GL_OPERAND2_ALPHA	(0x859A)
#define	GL_RGB_SCALE	(0x8573)
#define	GL_ADD_SIGNED	(0x8574)
#define	GL_INTERPOLATE	(0x8575)
#define	GL_SUBTRACT	(0x84E7)
#define	GL_CONSTANT	(0x8576)
#define	GL_PRIMARY_COLOR	(0x8577)
#define	GL_PREVIOUS	(0x8578)
#define	GL_DOT3_RGB	(0x86AE)
#define	GL_DOT3_RGBA	(0x86AF)
#define	GL_BLEND_DST_RGB	(0x80C8)
#define	GL_BLEND_SRC_RGB	(0x80C9)
#define	GL_BLEND_DST_ALPHA	(0x80CA)
#define	GL_BLEND_SRC_ALPHA	(0x80CB)
#define	GL_POINT_FADE_THRESHOLD_SIZE	(0x8128)
#define	GL_DEPTH_COMPONENT16	(0x81A5)
#define	GL_DEPTH_COMPONENT24	(0x81A6)
#define	GL_DEPTH_COMPONENT32	(0x81A7)
#define	GL_MIRRORED_REPEAT	(0x8370)
#define	GL_MAX_TEXTURE_LOD_BIAS	(0x84FD)
#define	GL_TEXTURE_LOD_BIAS	(0x8501)
#define	GL_INCR_WRAP	(0x8507)
#define	GL_DECR_WRAP	(0x8508)
#define	GL_TEXTURE_DEPTH_SIZE	(0x884A)
#define	GL_TEXTURE_COMPARE_MODE	(0x884C)
#define	GL_TEXTURE_COMPARE_FUNC	(0x884D)
#define	GL_POINT_SIZE_MIN	(0x8126)
#define	GL_POINT_SIZE_MAX	(0x8127)
#define	GL_POINT_DISTANCE_ATTENUATION	(0x8129)
#define	GL_GENERATE_MIPMAP	(0x8191)
#define	GL_GENERATE_MIPMAP_HINT	(0x8192)
#define	GL_FOG_COORDINATE_SOURCE	(0x8450)
#define	GL_FOG_COORDINATE	(0x8451)
#define	GL_FRAGMENT_DEPTH	(0x8452)
#define	GL_CURRENT_FOG_COORDINATE	(0x8453)
#define	GL_FOG_COORDINATE_ARRAY_TYPE	(0x8454)
#define	GL_FOG_COORDINATE_ARRAY_STRIDE	(0x8455)
#define	GL_FOG_COORDINATE_ARRAY_POINTER	(0x8456)
#define	GL_FOG_COORDINATE_ARRAY	(0x8457)
#define	GL_COLOR_SUM	(0x8458)
#define	GL_CURRENT_SECONDARY_COLOR	(0x8459)
#define	GL_SECONDARY_COLOR_ARRAY_SIZE	(0x845A)
#define	GL_SECONDARY_COLOR_ARRAY_TYPE	(0x845B)
#define	GL_SECONDARY_COLOR_ARRAY_STRIDE	(0x845C)
#define	GL_SECONDARY_COLOR_ARRAY_POINTER	(0x845D)
#define	GL_SECONDARY_COLOR_ARRAY	(0x845E)
#define	GL_TEXTURE_FILTER_CONTROL	(0x8500)
#define	GL_DEPTH_TEXTURE_MODE	(0x884B)
#define	GL_COMPARE_R_TO_TEXTURE	(0x884E)
#define	GL_BLEND_COLOR	(0x8005)
#define	GL_BLEND_EQUATION	(0x8009)
#define	GL_CONSTANT_COLOR	(0x8001)
#define	GL_ONE_MINUS_CONSTANT_COLOR	(0x8002)
#define	GL_CONSTANT_ALPHA	(0x8003)
#define	GL_ONE_MINUS_CONSTANT_ALPHA	(0x8004)
#define	GL_FUNC_ADD	(0x8006)
#define	GL_FUNC_REVERSE_SUBTRACT	(0x800B)
#define	GL_FUNC_SUBTRACT	(0x800A)
#define	GL_MIN	(0x8007)
#define	GL_MAX	(0x8008)
#define	GL_BUFFER_SIZE	(0x8764)
#define	GL_BUFFER_USAGE	(0x8765)
#define	GL_QUERY_COUNTER_BITS	(0x8864)
#define	GL_CURRENT_QUERY	(0x8865)
#define	GL_QUERY_RESULT	(0x8866)
#define	GL_QUERY_RESULT_AVAILABLE	(0x8867)
#define	GL_ARRAY_BUFFER	(0x8892)
#define	GL_ELEMENT_ARRAY_BUFFER	(0x8893)
#define	GL_ARRAY_BUFFER_BINDING	(0x8894)
#define	GL_ELEMENT_ARRAY_BUFFER_BINDING	(0x8895)
#define	GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	(0x889F)
#define	GL_READ_ONLY	(0x88B8)
#define	GL_WRITE_ONLY	(0x88B9)
#define	GL_READ_WRITE	(0x88BA)
#define	GL_BUFFER_ACCESS	(0x88BB)
#define	GL_BUFFER_MAPPED	(0x88BC)
#define	GL_BUFFER_MAP_POINTER	(0x88BD)
#define	GL_STREAM_DRAW	(0x88E0)
#define	GL_STREAM_READ	(0x88E1)
#define	GL_STREAM_COPY	(0x88E2)
#define	GL_STATIC_DRAW	(0x88E4)
#define	GL_STATIC_READ	(0x88E5)
#define	GL_STATIC_COPY	(0x88E6)
#define	GL_DYNAMIC_DRAW	(0x88E8)
#define	GL_DYNAMIC_READ	(0x88E9)
#define	GL_DYNAMIC_COPY	(0x88EA)
#define	GL_SAMPLES_PASSED	(0x8914)
#define	GL_SRC1_ALPHA	(0x8589)
#define	GL_VERTEX_ARRAY_BUFFER_BINDING	(0x8896)
#define	GL_NORMAL_ARRAY_BUFFER_BINDING	(0x8897)
#define	GL_COLOR_ARRAY_BUFFER_BINDING	(0x8898)
#define	GL_INDEX_ARRAY_BUFFER_BINDING	(0x8899)
#define	GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING	(0x889A)
#define	GL_EDGE_FLAG_ARRAY_BUFFER_BINDING	(0x889B)
#define	GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING	(0x889C)
#define	GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING	(0x889D)
#define	GL_WEIGHT_ARRAY_BUFFER_BINDING	(0x889E)
#define	GL_FOG_COORD_SRC	(0x8450)
#define	GL_FOG_COORD	(0x8451)
#define	GL_CURRENT_FOG_COORD	(0x8453)
#define	GL_FOG_COORD_ARRAY_TYPE	(0x8454)
#define	GL_FOG_COORD_ARRAY_STRIDE	(0x8455)
#define	GL_FOG_COORD_ARRAY_POINTER	(0x8456)
#define	GL_FOG_COORD_ARRAY	(0x8457)
#define	GL_FOG_COORD_ARRAY_BUFFER_BINDING	(0x889D)
#define	GL_SRC0_RGB	(0x8580)
#define	GL_SRC1_RGB	(0x8581)
#define	GL_SRC2_RGB	(0x8582)
#define	GL_SRC0_ALPHA	(0x8588)
#define	GL_SRC2_ALPHA	(0x858A)
#define	GL_BLEND_EQUATION_RGB	(0x8009)
#define	GL_VERTEX_ATTRIB_ARRAY_ENABLED	(0x8622)
#define	GL_VERTEX_ATTRIB_ARRAY_SIZE	(0x8623)
#define	GL_VERTEX_ATTRIB_ARRAY_STRIDE	(0x8624)
#define	GL_VERTEX_ATTRIB_ARRAY_TYPE	(0x8625)
#define	GL_CURRENT_VERTEX_ATTRIB	(0x8626)
#define	GL_VERTEX_PROGRAM_POINT_SIZE	(0x8642)
#define	GL_VERTEX_ATTRIB_ARRAY_POINTER	(0x8645)
#define	GL_STENCIL_BACK_FUNC	(0x8800)
#define	GL_STENCIL_BACK_FAIL	(0x8801)
#define	GL_STENCIL_BACK_PASS_DEPTH_FAIL	(0x8802)
#define	GL_STENCIL_BACK_PASS_DEPTH_PASS	(0x8803)
#define	GL_MAX_DRAW_BUFFERS	(0x8824)
#define	GL_DRAW_BUFFER0	(0x8825)
#define	GL_DRAW_BUFFER1	(0x8826)
#define	GL_DRAW_BUFFER2	(0x8827)
#define	GL_DRAW_BUFFER3	(0x8828)
#define	GL_DRAW_BUFFER4	(0x8829)
#define	GL_DRAW_BUFFER5	(0x882A)
#define	GL_DRAW_BUFFER6	(0x882B)
#define	GL_DRAW_BUFFER7	(0x882C)
#define	GL_DRAW_BUFFER8	(0x882D)
#define	GL_DRAW_BUFFER9	(0x882E)
#define	GL_DRAW_BUFFER10	(0x882F)
#define	GL_DRAW_BUFFER11	(0x8830)
#define	GL_DRAW_BUFFER12	(0x8831)
#define	GL_DRAW_BUFFER13	(0x8832)
#define	GL_DRAW_BUFFER14	(0x8833)
#define	GL_DRAW_BUFFER15	(0x8834)
#define	GL_BLEND_EQUATION_ALPHA	(0x883D)
#define	GL_MAX_VERTEX_ATTRIBS	(0x8869)
#define	GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	(0x886A)
#define	GL_MAX_TEXTURE_IMAGE_UNITS	(0x8872)
#define	GL_FRAGMENT_SHADER	(0x8B30)
#define	GL_VERTEX_SHADER	(0x8B31)
#define	GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	(0x8B49)
#define	GL_MAX_VERTEX_UNIFORM_COMPONENTS	(0x8B4A)
#define	GL_MAX_VARYING_FLOATS	(0x8B4B)
#define	GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	(0x8B4C)
#define	GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	(0x8B4D)
#define	GL_SHADER_TYPE	(0x8B4F)
#define	GL_FLOAT_VEC2	(0x8B50)
#define	GL_FLOAT_VEC3	(0x8B51)
#define	GL_FLOAT_VEC4	(0x8B52)
#define	GL_INT_VEC2	(0x8B53)
#define	GL_INT_VEC3	(0x8B54)
#define	GL_INT_VEC4	(0x8B55)
#define	GL_BOOL	(0x8B56)
#define	GL_BOOL_VEC2	(0x8B57)
#define	GL_BOOL_VEC3	(0x8B58)
#define	GL_BOOL_VEC4	(0x8B59)
#define	GL_FLOAT_MAT2	(0x8B5A)
#define	GL_FLOAT_MAT3	(0x8B5B)
#define	GL_FLOAT_MAT4	(0x8B5C)
#define	GL_SAMPLER_1D	(0x8B5D)
#define	GL_SAMPLER_2D	(0x8B5E)
#define	GL_SAMPLER_3D	(0x8B5F)
#define	GL_SAMPLER_CUBE	(0x8B60)
#define	GL_SAMPLER_1D_SHADOW	(0x8B61)
#define	GL_SAMPLER_2D_SHADOW	(0x8B62)
#define	GL_DELETE_STATUS	(0x8B80)
#define	GL_COMPILE_STATUS	(0x8B81)
#define	GL_LINK_STATUS	(0x8B82)
#define	GL_VALIDATE_STATUS	(0x8B83)
#define	GL_INFO_LOG_LENGTH	(0x8B84)
#define	GL_ATTACHED_SHADERS	(0x8B85)
#define	GL_ACTIVE_UNIFORMS	(0x8B86)
#define	GL_ACTIVE_UNIFORM_MAX_LENGTH	(0x8B87)
#define	GL_SHADER_SOURCE_LENGTH	(0x8B88)
#define	GL_ACTIVE_ATTRIBUTES	(0x8B89)
#define	GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	(0x8B8A)
#define	GL_FRAGMENT_SHADER_DERIVATIVE_HINT	(0x8B8B)
#define	GL_SHADING_LANGUAGE_VERSION	(0x8B8C)
#define	GL_CURRENT_PROGRAM	(0x8B8D)
#define	GL_POINT_SPRITE_COORD_ORIGIN	(0x8CA0)
#define	GL_LOWER_LEFT	(0x8CA1)
#define	GL_UPPER_LEFT	(0x8CA2)
#define	GL_STENCIL_BACK_REF	(0x8CA3)
#define	GL_STENCIL_BACK_VALUE_MASK	(0x8CA4)
#define	GL_STENCIL_BACK_WRITEMASK	(0x8CA5)
#define	GL_VERTEX_PROGRAM_TWO_SIDE	(0x8643)
#define	GL_POINT_SPRITE	(0x8861)
#define	GL_COORD_REPLACE	(0x8862)
#define	GL_MAX_TEXTURE_COORDS	(0x8871)
#define	GL_PIXEL_PACK_BUFFER	(0x88EB)
#define	GL_PIXEL_UNPACK_BUFFER	(0x88EC)
#define	GL_PIXEL_PACK_BUFFER_BINDING	(0x88ED)
#define	GL_PIXEL_UNPACK_BUFFER_BINDING	(0x88EF)
#define	GL_FLOAT_MAT2x3	(0x8B65)
#define	GL_FLOAT_MAT2x4	(0x8B66)
#define	GL_FLOAT_MAT3x2	(0x8B67)
#define	GL_FLOAT_MAT3x4	(0x8B68)
#define	GL_FLOAT_MAT4x2	(0x8B69)
#define	GL_FLOAT_MAT4x3	(0x8B6A)
#define	GL_SRGB	(0x8C40)
#define	GL_SRGB8	(0x8C41)
#define	GL_SRGB_ALPHA	(0x8C42)
#define	GL_SRGB8_ALPHA8	(0x8C43)
#define	GL_COMPRESSED_SRGB	(0x8C48)
#define	GL_COMPRESSED_SRGB_ALPHA	(0x8C49)
#define	GL_CURRENT_RASTER_SECONDARY_COLOR	(0x845F)
#define	GL_SLUMINANCE_ALPHA	(0x8C44)
#define	GL_SLUMINANCE8_ALPHA8	(0x8C45)
#define	GL_SLUMINANCE	(0x8C46)
#define	GL_SLUMINANCE8	(0x8C47)
#define	GL_COMPRESSED_SLUMINANCE	(0x8C4A)
#define	GL_COMPRESSED_SLUMINANCE_ALPHA	(0x8C4B)
#define	GL_COMPARE_REF_TO_TEXTURE	(0x884E)
#define	GL_CLIP_DISTANCE0	(0x3000)
#define	GL_CLIP_DISTANCE1	(0x3001)
#define	GL_CLIP_DISTANCE2	(0x3002)
#define	GL_CLIP_DISTANCE3	(0x3003)
#define	GL_CLIP_DISTANCE4	(0x3004)
#define	GL_CLIP_DISTANCE5	(0x3005)
#define	GL_CLIP_DISTANCE6	(0x3006)
#define	GL_CLIP_DISTANCE7	(0x3007)
#define	GL_MAX_CLIP_DISTANCES	(0x0D32)
#define	GL_MAJOR_VERSION	(0x821B)
#define	GL_MINOR_VERSION	(0x821C)
#define	GL_NUM_EXTENSIONS	(0x821D)
#define	GL_CONTEXT_FLAGS	(0x821E)
#define	GL_COMPRESSED_RED	(0x8225)
#define	GL_COMPRESSED_RG	(0x8226)
#define	GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT	(0x00000001)
#define	GL_RGBA32F	(0x8814)
#define	GL_RGB32F	(0x8815)
#define	GL_RGBA16F	(0x881A)
#define	GL_RGB16F	(0x881B)
#define	GL_VERTEX_ATTRIB_ARRAY_INTEGER	(0x88FD)
#define	GL_MAX_ARRAY_TEXTURE_LAYERS	(0x88FF)
#define	GL_MIN_PROGRAM_TEXEL_OFFSET	(0x8904)
#define	GL_MAX_PROGRAM_TEXEL_OFFSET	(0x8905)
#define	GL_CLAMP_READ_COLOR	(0x891C)
#define	GL_FIXED_ONLY	(0x891D)
#define	GL_MAX_VARYING_COMPONENTS	(0x8B4B)
#define	GL_TEXTURE_1D_ARRAY	(0x8C18)
#define	GL_PROXY_TEXTURE_1D_ARRAY	(0x8C19)
#define	GL_TEXTURE_2D_ARRAY	(0x8C1A)
#define	GL_PROXY_TEXTURE_2D_ARRAY	(0x8C1B)
#define	GL_TEXTURE_BINDING_1D_ARRAY	(0x8C1C)
#define	GL_TEXTURE_BINDING_2D_ARRAY	(0x8C1D)
#define	GL_R11F_G11F_B10F	(0x8C3A)
#define	GL_UNSIGNED_INT_10F_11F_11F_REV	(0x8C3B)
#define	GL_RGB9_E5	(0x8C3D)
#define	GL_UNSIGNED_INT_5_9_9_9_REV	(0x8C3E)
#define	GL_TEXTURE_SHARED_SIZE	(0x8C3F)
#define	GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	(0x8C76)
#define	GL_TRANSFORM_FEEDBACK_BUFFER_MODE	(0x8C7F)
#define	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	(0x8C80)
#define	GL_TRANSFORM_FEEDBACK_VARYINGS	(0x8C83)
#define	GL_TRANSFORM_FEEDBACK_BUFFER_START	(0x8C84)
#define	GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	(0x8C85)
#define	GL_PRIMITIVES_GENERATED	(0x8C87)
#define	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	(0x8C88)
#define	GL_RASTERIZER_DISCARD	(0x8C89)
#define	GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	(0x8C8A)
#define	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	(0x8C8B)
#define	GL_INTERLEAVED_ATTRIBS	(0x8C8C)
#define	GL_SEPARATE_ATTRIBS	(0x8C8D)
#define	GL_TRANSFORM_FEEDBACK_BUFFER	(0x8C8E)
#define	GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	(0x8C8F)
#define	GL_RGBA32UI	(0x8D70)
#define	GL_RGB32UI	(0x8D71)
#define	GL_RGBA16UI	(0x8D76)
#define	GL_RGB16UI	(0x8D77)
#define	GL_RGBA8UI	(0x8D7C)
#define	GL_RGB8UI	(0x8D7D)
#define	GL_RGBA32I	(0x8D82)
#define	GL_RGB32I	(0x8D83)
#define	GL_RGBA16I	(0x8D88)
#define	GL_RGB16I	(0x8D89)
#define	GL_RGBA8I	(0x8D8E)
#define	GL_RGB8I	(0x8D8F)
#define	GL_RED_INTEGER	(0x8D94)
#define	GL_GREEN_INTEGER	(0x8D95)
#define	GL_BLUE_INTEGER	(0x8D96)
#define	GL_RGB_INTEGER	(0x8D98)
#define	GL_RGBA_INTEGER	(0x8D99)
#define	GL_BGR_INTEGER	(0x8D9A)
#define	GL_BGRA_INTEGER	(0x8D9B)
#define	GL_SAMPLER_1D_ARRAY	(0x8DC0)
#define	GL_SAMPLER_2D_ARRAY	(0x8DC1)
#define	GL_SAMPLER_1D_ARRAY_SHADOW	(0x8DC3)
#define	GL_SAMPLER_2D_ARRAY_SHADOW	(0x8DC4)
#define	GL_SAMPLER_CUBE_SHADOW	(0x8DC5)
#define	GL_UNSIGNED_INT_VEC2	(0x8DC6)
#define	GL_UNSIGNED_INT_VEC3	(0x8DC7)
#define	GL_UNSIGNED_INT_VEC4	(0x8DC8)
#define	GL_INT_SAMPLER_1D	(0x8DC9)
#define	GL_INT_SAMPLER_2D	(0x8DCA)
#define	GL_INT_SAMPLER_3D	(0x8DCB)
#define	GL_INT_SAMPLER_CUBE	(0x8DCC)
#define	GL_INT_SAMPLER_1D_ARRAY	(0x8DCE)
#define	GL_INT_SAMPLER_2D_ARRAY	(0x8DCF)
#define	GL_UNSIGNED_INT_SAMPLER_1D	(0x8DD1)
#define	GL_UNSIGNED_INT_SAMPLER_2D	(0x8DD2)
#define	GL_UNSIGNED_INT_SAMPLER_3D	(0x8DD3)
#define	GL_UNSIGNED_INT_SAMPLER_CUBE	(0x8DD4)
#define	GL_UNSIGNED_INT_SAMPLER_1D_ARRAY	(0x8DD6)
#define	GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	(0x8DD7)
#define	GL_QUERY_WAIT	(0x8E13)
#define	GL_QUERY_NO_WAIT	(0x8E14)
#define	GL_QUERY_BY_REGION_WAIT	(0x8E15)
#define	GL_QUERY_BY_REGION_NO_WAIT	(0x8E16)
#define	GL_BUFFER_ACCESS_FLAGS	(0x911F)
#define	GL_BUFFER_MAP_LENGTH	(0x9120)
#define	GL_BUFFER_MAP_OFFSET	(0x9121)
#define	GL_DEPTH_COMPONENT32F	(0x8CAC)
#define	GL_DEPTH32F_STENCIL8	(0x8CAD)
#define	GL_FLOAT_32_UNSIGNED_INT_24_8_REV	(0x8DAD)
#define	GL_INVALID_FRAMEBUFFER_OPERATION	(0x0506)
#define	GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	(0x8210)
#define	GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	(0x8211)
#define	GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	(0x8212)
#define	GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	(0x8213)
#define	GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	(0x8214)
#define	GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	(0x8215)
#define	GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	(0x8216)
#define	GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	(0x8217)
#define	GL_FRAMEBUFFER_DEFAULT	(0x8218)
#define	GL_FRAMEBUFFER_UNDEFINED	(0x8219)
#define	GL_DEPTH_STENCIL_ATTACHMENT	(0x821A)
#define	GL_MAX_RENDERBUFFER_SIZE	(0x84E8)
#define	GL_DEPTH_STENCIL	(0x84F9)
#define	GL_UNSIGNED_INT_24_8	(0x84FA)
#define	GL_DEPTH24_STENCIL8	(0x88F0)
#define	GL_TEXTURE_STENCIL_SIZE	(0x88F1)
#define	GL_TEXTURE_RED_TYPE	(0x8C10)
#define	GL_TEXTURE_GREEN_TYPE	(0x8C11)
#define	GL_TEXTURE_BLUE_TYPE	(0x8C12)
#define	GL_TEXTURE_ALPHA_TYPE	(0x8C13)
#define	GL_TEXTURE_DEPTH_TYPE	(0x8C16)
#define	GL_UNSIGNED_NORMALIZED	(0x8C17)
#define	GL_FRAMEBUFFER_BINDING	(0x8CA6)
#define	GL_DRAW_FRAMEBUFFER_BINDING	(0x8CA6)
#define	GL_RENDERBUFFER_BINDING	(0x8CA7)
#define	GL_READ_FRAMEBUFFER	(0x8CA8)
#define	GL_DRAW_FRAMEBUFFER	(0x8CA9)
#define	GL_READ_FRAMEBUFFER_BINDING	(0x8CAA)
#define	GL_RENDERBUFFER_SAMPLES	(0x8CAB)
#define	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	(0x8CD0)
#define	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	(0x8CD1)
#define	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	(0x8CD2)
#define	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	(0x8CD3)
#define	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	(0x8CD4)
#define	GL_FRAMEBUFFER_COMPLETE	(0x8CD5)
#define	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	(0x8CD6)
#define	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	(0x8CD7)
#define	GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER	(0x8CDB)
#define	GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER	(0x8CDC)
#define	GL_FRAMEBUFFER_UNSUPPORTED	(0x8CDD)
#define	GL_MAX_COLOR_ATTACHMENTS	(0x8CDF)
#define	GL_COLOR_ATTACHMENT0	(0x8CE0)
#define	GL_COLOR_ATTACHMENT1	(0x8CE1)
#define	GL_COLOR_ATTACHMENT2	(0x8CE2)
#define	GL_COLOR_ATTACHMENT3	(0x8CE3)
#define	GL_COLOR_ATTACHMENT4	(0x8CE4)
#define	GL_COLOR_ATTACHMENT5	(0x8CE5)
#define	GL_COLOR_ATTACHMENT6	(0x8CE6)
#define	GL_COLOR_ATTACHMENT7	(0x8CE7)
#define	GL_COLOR_ATTACHMENT8	(0x8CE8)
#define	GL_COLOR_ATTACHMENT9	(0x8CE9)
#define	GL_COLOR_ATTACHMENT10	(0x8CEA)
#define	GL_COLOR_ATTACHMENT11	(0x8CEB)
#define	GL_COLOR_ATTACHMENT12	(0x8CEC)
#define	GL_COLOR_ATTACHMENT13	(0x8CED)
#define	GL_COLOR_ATTACHMENT14	(0x8CEE)
#define	GL_COLOR_ATTACHMENT15	(0x8CEF)
#define	GL_COLOR_ATTACHMENT16	(0x8CF0)
#define	GL_COLOR_ATTACHMENT17	(0x8CF1)
#define	GL_COLOR_ATTACHMENT18	(0x8CF2)
#define	GL_COLOR_ATTACHMENT19	(0x8CF3)
#define	GL_COLOR_ATTACHMENT20	(0x8CF4)
#define	GL_COLOR_ATTACHMENT21	(0x8CF5)
#define	GL_COLOR_ATTACHMENT22	(0x8CF6)
#define	GL_COLOR_ATTACHMENT23	(0x8CF7)
#define	GL_COLOR_ATTACHMENT24	(0x8CF8)
#define	GL_COLOR_ATTACHMENT25	(0x8CF9)
#define	GL_COLOR_ATTACHMENT26	(0x8CFA)
#define	GL_COLOR_ATTACHMENT27	(0x8CFB)
#define	GL_COLOR_ATTACHMENT28	(0x8CFC)
#define	GL_COLOR_ATTACHMENT29	(0x8CFD)
#define	GL_COLOR_ATTACHMENT30	(0x8CFE)
#define	GL_COLOR_ATTACHMENT31	(0x8CFF)
#define	GL_DEPTH_ATTACHMENT	(0x8D00)
#define	GL_STENCIL_ATTACHMENT	(0x8D20)
#define	GL_FRAMEBUFFER	(0x8D40)
#define	GL_RENDERBUFFER	(0x8D41)
#define	GL_RENDERBUFFER_WIDTH	(0x8D42)
#define	GL_RENDERBUFFER_HEIGHT	(0x8D43)
#define	GL_RENDERBUFFER_INTERNAL_FORMAT	(0x8D44)
#define	GL_STENCIL_INDEX1	(0x8D46)
#define	GL_STENCIL_INDEX4	(0x8D47)
#define	GL_STENCIL_INDEX8	(0x8D48)
#define	GL_STENCIL_INDEX16	(0x8D49)
#define	GL_RENDERBUFFER_RED_SIZE	(0x8D50)
#define	GL_RENDERBUFFER_GREEN_SIZE	(0x8D51)
#define	GL_RENDERBUFFER_BLUE_SIZE	(0x8D52)
#define	GL_RENDERBUFFER_ALPHA_SIZE	(0x8D53)
#define	GL_RENDERBUFFER_DEPTH_SIZE	(0x8D54)
#define	GL_RENDERBUFFER_STENCIL_SIZE	(0x8D55)
#define	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	(0x8D56)
#define	GL_MAX_SAMPLES	(0x8D57)
#define	GL_INDEX	(0x8222)
#define	GL_TEXTURE_LUMINANCE_TYPE	(0x8C14)
#define	GL_TEXTURE_INTENSITY_TYPE	(0x8C15)
#define	GL_FRAMEBUFFER_SRGB	(0x8DB9)
#define	GL_HALF_FLOAT	(0x140B)
#define	GL_MAP_READ_BIT	(0x0001)
#define	GL_MAP_WRITE_BIT	(0x0002)
#define	GL_MAP_INVALIDATE_RANGE_BIT	(0x0004)
#define	GL_MAP_INVALIDATE_BUFFER_BIT	(0x0008)
#define	GL_MAP_FLUSH_EXPLICIT_BIT	(0x0010)
#define	GL_MAP_UNSYNCHRONIZED_BIT	(0x0020)
#define	GL_COMPRESSED_RED_RGTC1	(0x8DBB)
#define	GL_COMPRESSED_SIGNED_RED_RGTC1	(0x8DBC)
#define	GL_COMPRESSED_RG_RGTC2	(0x8DBD)
#define	GL_COMPRESSED_SIGNED_RG_RGTC2	(0x8DBE)
#define	GL_RG	(0x8227)
#define	GL_RG_INTEGER	(0x8228)
#define	GL_R8	(0x8229)
#define	GL_R16	(0x822A)
#define	GL_RG8	(0x822B)
#define	GL_RG16	(0x822C)
#define	GL_R16F	(0x822D)
#define	GL_R32F	(0x822E)
#define	GL_RG16F	(0x822F)
#define	GL_RG32F	(0x8230)
#define	GL_R8I	(0x8231)
#define	GL_R8UI	(0x8232)
#define	GL_R16I	(0x8233)
#define	GL_R16UI	(0x8234)
#define	GL_R32I	(0x8235)
#define	GL_R32UI	(0x8236)
#define	GL_RG8I	(0x8237)
#define	GL_RG8UI	(0x8238)
#define	GL_RG16I	(0x8239)
#define	GL_RG16UI	(0x823A)
#define	GL_RG32I	(0x823B)
#define	GL_RG32UI	(0x823C)
#define	GL_VERTEX_ARRAY_BINDING	(0x85B5)
#define	GL_CLAMP_VERTEX_COLOR	(0x891A)
#define	GL_CLAMP_FRAGMENT_COLOR	(0x891B)
#define	GL_ALPHA_INTEGER	(0x8D97)
#define	GL_SAMPLER_2D_RECT	(0x8B63)
#define	GL_SAMPLER_2D_RECT_SHADOW	(0x8B64)
#define	GL_SAMPLER_BUFFER	(0x8DC2)
#define	GL_INT_SAMPLER_2D_RECT	(0x8DCD)
#define	GL_INT_SAMPLER_BUFFER	(0x8DD0)
#define	GL_UNSIGNED_INT_SAMPLER_2D_RECT	(0x8DD5)
#define	GL_UNSIGNED_INT_SAMPLER_BUFFER	(0x8DD8)
#define	GL_TEXTURE_BUFFER	(0x8C2A)
#define	GL_MAX_TEXTURE_BUFFER_SIZE	(0x8C2B)
#define	GL_TEXTURE_BINDING_BUFFER	(0x8C2C)
#define	GL_TEXTURE_BUFFER_DATA_STORE_BINDING	(0x8C2D)
#define	GL_TEXTURE_RECTANGLE	(0x84F5)
#define	GL_TEXTURE_BINDING_RECTANGLE	(0x84F6)
#define	GL_PROXY_TEXTURE_RECTANGLE	(0x84F7)
#define	GL_MAX_RECTANGLE_TEXTURE_SIZE	(0x84F8)
#define	GL_R8_SNORM	(0x8F94)
#define	GL_RG8_SNORM	(0x8F95)
#define	GL_RGB8_SNORM	(0x8F96)
#define	GL_RGBA8_SNORM	(0x8F97)
#define	GL_R16_SNORM	(0x8F98)
#define	GL_RG16_SNORM	(0x8F99)
#define	GL_RGB16_SNORM	(0x8F9A)
#define	GL_RGBA16_SNORM	(0x8F9B)
#define	GL_SIGNED_NORMALIZED	(0x8F9C)
#define	GL_PRIMITIVE_RESTART	(0x8F9D)
#define	GL_PRIMITIVE_RESTART_INDEX	(0x8F9E)
#define	GL_COPY_READ_BUFFER	(0x8F36)
#define	GL_COPY_WRITE_BUFFER	(0x8F37)
#define	GL_UNIFORM_BUFFER	(0x8A11)
#define	GL_UNIFORM_BUFFER_BINDING	(0x8A28)
#define	GL_UNIFORM_BUFFER_START	(0x8A29)
#define	GL_UNIFORM_BUFFER_SIZE	(0x8A2A)
#define	GL_MAX_VERTEX_UNIFORM_BLOCKS	(0x8A2B)
#define	GL_MAX_GEOMETRY_UNIFORM_BLOCKS	(0x8A2C)
#define	GL_MAX_FRAGMENT_UNIFORM_BLOCKS	(0x8A2D)
#define	GL_MAX_COMBINED_UNIFORM_BLOCKS	(0x8A2E)
#define	GL_MAX_UNIFORM_BUFFER_BINDINGS	(0x8A2F)
#define	GL_MAX_UNIFORM_BLOCK_SIZE	(0x8A30)
#define	GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS	(0x8A31)
#define	GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS	(0x8A32)
#define	GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	(0x8A33)
#define	GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT	(0x8A34)
#define	GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH	(0x8A35)
#define	GL_ACTIVE_UNIFORM_BLOCKS	(0x8A36)
#define	GL_UNIFORM_TYPE	(0x8A37)
#define	GL_UNIFORM_SIZE	(0x8A38)
#define	GL_UNIFORM_NAME_LENGTH	(0x8A39)
#define	GL_UNIFORM_BLOCK_INDEX	(0x8A3A)
#define	GL_UNIFORM_OFFSET	(0x8A3B)
#define	GL_UNIFORM_ARRAY_STRIDE	(0x8A3C)
#define	GL_UNIFORM_MATRIX_STRIDE	(0x8A3D)
#define	GL_UNIFORM_IS_ROW_MAJOR	(0x8A3E)
#define	GL_UNIFORM_BLOCK_BINDING	(0x8A3F)
#define	GL_UNIFORM_BLOCK_DATA_SIZE	(0x8A40)
#define	GL_UNIFORM_BLOCK_NAME_LENGTH	(0x8A41)
#define	GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS	(0x8A42)
#define	GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES	(0x8A43)
#define	GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	(0x8A44)
#define	GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER	(0x8A45)
#define	GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	(0x8A46)
#define	GL_INVALID_INDEX	(0xFFFFFFFF)
#define	GL_CONTEXT_CORE_PROFILE_BIT	(0x00000001)
#define	GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	(0x00000002)
#define	GL_LINES_ADJACENCY	(0x000A)
#define	GL_LINE_STRIP_ADJACENCY	(0x000B)
#define	GL_TRIANGLES_ADJACENCY	(0x000C)
#define	GL_TRIANGLE_STRIP_ADJACENCY	(0x000D)
#define	GL_PROGRAM_POINT_SIZE	(0x8642)
#define	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS	(0x8C29)
#define	GL_FRAMEBUFFER_ATTACHMENT_LAYERED	(0x8DA7)
#define	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS	(0x8DA8)
#define	GL_GEOMETRY_SHADER	(0x8DD9)
#define	GL_GEOMETRY_VERTICES_OUT	(0x8916)
#define	GL_GEOMETRY_INPUT_TYPE	(0x8917)
#define	GL_GEOMETRY_OUTPUT_TYPE	(0x8918)
#define	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS	(0x8DDF)
#define	GL_MAX_GEOMETRY_OUTPUT_VERTICES	(0x8DE0)
#define	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS	(0x8DE1)
#define	GL_MAX_VERTEX_OUTPUT_COMPONENTS	(0x9122)
#define	GL_MAX_GEOMETRY_INPUT_COMPONENTS	(0x9123)
#define	GL_MAX_GEOMETRY_OUTPUT_COMPONENTS	(0x9124)
#define	GL_MAX_FRAGMENT_INPUT_COMPONENTS	(0x9125)
#define	GL_CONTEXT_PROFILE_MASK	(0x9126)
#define	GL_DEPTH_CLAMP	(0x864F)
#define	GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION	(0x8E4C)
#define	GL_FIRST_VERTEX_CONVENTION	(0x8E4D)
#define	GL_LAST_VERTEX_CONVENTION	(0x8E4E)
#define	GL_PROVOKING_VERTEX	(0x8E4F)
#define	GL_TEXTURE_CUBE_MAP_SEAMLESS	(0x884F)
#define	GL_MAX_SERVER_WAIT_TIMEOUT	(0x9111)
#define	GL_OBJECT_TYPE	(0x9112)
#define	GL_SYNC_CONDITION	(0x9113)
#define	GL_SYNC_STATUS	(0x9114)
#define	GL_SYNC_FLAGS	(0x9115)
#define	GL_SYNC_FENCE	(0x9116)
#define	GL_SYNC_GPU_COMMANDS_COMPLETE	(0x9117)
#define	GL_UNSIGNALED	(0x9118)
#define	GL_SIGNALED	(0x9119)
#define	GL_ALREADY_SIGNALED	(0x911A)
#define	GL_TIMEOUT_EXPIRED	(0x911B)
#define	GL_CONDITION_SATISFIED	(0x911C)
#define	GL_WAIT_FAILED	(0x911D)
#define	GL_TIMEOUT_IGNORED	(0xFFFFFFFFFFFFFFFF)
#define	GL_SYNC_FLUSH_COMMANDS_BIT	(0x00000001)
#define	GL_SAMPLE_POSITION	(0x8E50)
#define	GL_SAMPLE_MASK	(0x8E51)
#define	GL_SAMPLE_MASK_VALUE	(0x8E52)
#define	GL_MAX_SAMPLE_MASK_WORDS	(0x8E59)
#define	GL_TEXTURE_2D_MULTISAMPLE	(0x9100)
#define	GL_PROXY_TEXTURE_2D_MULTISAMPLE	(0x9101)
#define	GL_TEXTURE_2D_MULTISAMPLE_ARRAY	(0x9102)
#define	GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY	(0x9103)
#define	GL_TEXTURE_BINDING_2D_MULTISAMPLE	(0x9104)
#define	GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY	(0x9105)
#define	GL_TEXTURE_SAMPLES	(0x9106)
#define	GL_TEXTURE_FIXED_SAMPLE_LOCATIONS	(0x9107)
#define	GL_SAMPLER_2D_MULTISAMPLE	(0x9108)
#define	GL_INT_SAMPLER_2D_MULTISAMPLE	(0x9109)
#define	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE	(0x910A)
#define	GL_SAMPLER_2D_MULTISAMPLE_ARRAY	(0x910B)
#define	GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	(0x910C)
#define	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	(0x910D)
#define	GL_MAX_COLOR_TEXTURE_SAMPLES	(0x910E)
#define	GL_MAX_DEPTH_TEXTURE_SAMPLES	(0x910F)
#define	GL_MAX_INTEGER_SAMPLES	(0x9110)
#define	GL_VERTEX_ATTRIB_ARRAY_DIVISOR	(0x88FE)
#define	GL_SRC1_COLOR	(0x88F9)
#define	GL_ONE_MINUS_SRC1_COLOR	(0x88FA)
#define	GL_ONE_MINUS_SRC1_ALPHA	(0x88FB)
#define	GL_MAX_DUAL_SOURCE_DRAW_BUFFERS	(0x88FC)
#define	GL_ANY_SAMPLES_PASSED	(0x8C2F)
#define	GL_SAMPLER_BINDING	(0x8919)
#define	GL_RGB10_A2UI	(0x906F)
#define	GL_TEXTURE_SWIZZLE_R	(0x8E42)
#define	GL_TEXTURE_SWIZZLE_G	(0x8E43)
#define	GL_TEXTURE_SWIZZLE_B	(0x8E44)
#define	GL_TEXTURE_SWIZZLE_A	(0x8E45)
#define	GL_TEXTURE_SWIZZLE_RGBA	(0x8E46)
#define	GL_TIME_ELAPSED	(0x88BF)
#define	GL_TIMESTAMP	(0x8E28)
#define	GL_INT_2_10_10_10_REV	(0x8D9F)
#define	GL_SAMPLE_SHADING	(0x8C36)
#define	GL_MIN_SAMPLE_SHADING_VALUE	(0x8C37)
#define	GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET	(0x8E5E)
#define	GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET	(0x8E5F)
#define	GL_TEXTURE_CUBE_MAP_ARRAY	(0x9009)
#define	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY	(0x900A)
#define	GL_PROXY_TEXTURE_CUBE_MAP_ARRAY	(0x900B)
#define	GL_SAMPLER_CUBE_MAP_ARRAY	(0x900C)
#define	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW	(0x900D)
#define	GL_INT_SAMPLER_CUBE_MAP_ARRAY	(0x900E)
#define	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY	(0x900F)
#define	GL_DRAW_INDIRECT_BUFFER	(0x8F3F)
#define	GL_DRAW_INDIRECT_BUFFER_BINDING	(0x8F43)
#define	GL_GEOMETRY_SHADER_INVOCATIONS	(0x887F)
#define	GL_MAX_GEOMETRY_SHADER_INVOCATIONS	(0x8E5A)
#define	GL_MIN_FRAGMENT_INTERPOLATION_OFFSET	(0x8E5B)
#define	GL_MAX_FRAGMENT_INTERPOLATION_OFFSET	(0x8E5C)
#define	GL_FRAGMENT_INTERPOLATION_OFFSET_BITS	(0x8E5D)
#define	GL_MAX_VERTEX_STREAMS	(0x8E71)
#define	GL_DOUBLE_VEC2	(0x8FFC)
#define	GL_DOUBLE_VEC3	(0x8FFD)
#define	GL_DOUBLE_VEC4	(0x8FFE)
#define	GL_DOUBLE_MAT2	(0x8F46)
#define	GL_DOUBLE_MAT3	(0x8F47)
#define	GL_DOUBLE_MAT4	(0x8F48)
#define	GL_DOUBLE_MAT2x3	(0x8F49)
#define	GL_DOUBLE_MAT2x4	(0x8F4A)
#define	GL_DOUBLE_MAT3x2	(0x8F4B)
#define	GL_DOUBLE_MAT3x4	(0x8F4C)
#define	GL_DOUBLE_MAT4x2	(0x8F4D)
#define	GL_DOUBLE_MAT4x3	(0x8F4E)
#define	GL_ACTIVE_SUBROUTINES	(0x8DE5)
#define	GL_ACTIVE_SUBROUTINE_UNIFORMS	(0x8DE6)
#define	GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS	(0x8E47)
#define	GL_ACTIVE_SUBROUTINE_MAX_LENGTH	(0x8E48)
#define	GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH	(0x8E49)
#define	GL_MAX_SUBROUTINES	(0x8DE7)
#define	GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS	(0x8DE8)
#define	GL_NUM_COMPATIBLE_SUBROUTINES	(0x8E4A)
#define	GL_COMPATIBLE_SUBROUTINES	(0x8E4B)
#define	GL_PATCHES	(0x000E)
#define	GL_PATCH_VERTICES	(0x8E72)
#define	GL_PATCH_DEFAULT_INNER_LEVEL	(0x8E73)
#define	GL_PATCH_DEFAULT_OUTER_LEVEL	(0x8E74)
#define	GL_TESS_CONTROL_OUTPUT_VERTICES	(0x8E75)
#define	GL_TESS_GEN_MODE	(0x8E76)
#define	GL_TESS_GEN_SPACING	(0x8E77)
#define	GL_TESS_GEN_VERTEX_ORDER	(0x8E78)
#define	GL_TESS_GEN_POINT_MODE	(0x8E79)
#define	GL_ISOLINES	(0x8E7A)
#define	GL_FRACTIONAL_ODD	(0x8E7B)
#define	GL_FRACTIONAL_EVEN	(0x8E7C)
#define	GL_MAX_PATCH_VERTICES	(0x8E7D)
#define	GL_MAX_TESS_GEN_LEVEL	(0x8E7E)
#define	GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS	(0x8E7F)
#define	GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS	(0x8E80)
#define	GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS	(0x8E81)
#define	GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS	(0x8E82)
#define	GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS	(0x8E83)
#define	GL_MAX_TESS_PATCH_COMPONENTS	(0x8E84)
#define	GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS	(0x8E85)
#define	GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS	(0x8E86)
#define	GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS	(0x8E89)
#define	GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS	(0x8E8A)
#define	GL_MAX_TESS_CONTROL_INPUT_COMPONENTS	(0x886C)
#define	GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS	(0x886D)
#define	GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS	(0x8E1E)
#define	GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS	(0x8E1F)
#define	GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER	(0x84F0)
#define	GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER	(0x84F1)
#define	GL_TESS_EVALUATION_SHADER	(0x8E87)
#define	GL_TESS_CONTROL_SHADER	(0x8E88)
#define	GL_TRANSFORM_FEEDBACK	(0x8E22)
#define	GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED	(0x8E23)
#define	GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE	(0x8E24)
#define	GL_TRANSFORM_FEEDBACK_BINDING	(0x8E25)
#define	GL_MAX_TRANSFORM_FEEDBACK_BUFFERS	(0x8E70)
#define	GL_FIXED	(0x140C)
#define	GL_IMPLEMENTATION_COLOR_READ_TYPE	(0x8B9A)
#define	GL_IMPLEMENTATION_COLOR_READ_FORMAT	(0x8B9B)
#define	GL_LOW_FLOAT	(0x8DF0)
#define	GL_MEDIUM_FLOAT	(0x8DF1)
#define	GL_HIGH_FLOAT	(0x8DF2)
#define	GL_LOW_INT	(0x8DF3)
#define	GL_MEDIUM_INT	(0x8DF4)
#define	GL_HIGH_INT	(0x8DF5)
#define	GL_SHADER_COMPILER	(0x8DFA)
#define	GL_SHADER_BINARY_FORMATS	(0x8DF8)
#define	GL_NUM_SHADER_BINARY_FORMATS	(0x8DF9)
#define	GL_MAX_VERTEX_UNIFORM_VECTORS	(0x8DFB)
#define	GL_MAX_VARYING_VECTORS	(0x8DFC)
#define	GL_MAX_FRAGMENT_UNIFORM_VECTORS	(0x8DFD)
#define	GL_RGB565	(0x8D62)
#define	GL_PROGRAM_BINARY_RETRIEVABLE_HINT	(0x8257)
#define	GL_PROGRAM_BINARY_LENGTH	(0x8741)
#define	GL_NUM_PROGRAM_BINARY_FORMATS	(0x87FE)
#define	GL_PROGRAM_BINARY_FORMATS	(0x87FF)
#define	GL_VERTEX_SHADER_BIT	(0x00000001)
#define	GL_FRAGMENT_SHADER_BIT	(0x00000002)
#define	GL_GEOMETRY_SHADER_BIT	(0x00000004)
#define	GL_TESS_CONTROL_SHADER_BIT	(0x00000008)
#define	GL_TESS_EVALUATION_SHADER_BIT	(0x00000010)
#define	GL_ALL_SHADER_BITS	(0xFFFFFFFF)
#define	GL_PROGRAM_SEPARABLE	(0x8258)
#define	GL_ACTIVE_PROGRAM	(0x8259)
#define	GL_PROGRAM_PIPELINE_BINDING	(0x825A)
#define	GL_MAX_VIEWPORTS	(0x825B)
#define	GL_VIEWPORT_SUBPIXEL_BITS	(0x825C)
#define	GL_VIEWPORT_BOUNDS_RANGE	(0x825D)
#define	GL_LAYER_PROVOKING_VERTEX	(0x825E)
#define	GL_VIEWPORT_INDEX_PROVOKING_VERTEX	(0x825F)
#define	GL_UNDEFINED_VERTEX	(0x8260)
#define	GL_COPY_READ_BUFFER_BINDING	(0x8F36)
#define	GL_COPY_WRITE_BUFFER_BINDING	(0x8F37)
#define	GL_TRANSFORM_FEEDBACK_ACTIVE	(0x8E24)
#define	GL_TRANSFORM_FEEDBACK_PAUSED	(0x8E23)
#define	GL_UNPACK_COMPRESSED_BLOCK_WIDTH	(0x9127)
#define	GL_UNPACK_COMPRESSED_BLOCK_HEIGHT	(0x9128)
#define	GL_UNPACK_COMPRESSED_BLOCK_DEPTH	(0x9129)
#define	GL_UNPACK_COMPRESSED_BLOCK_SIZE	(0x912A)
#define	GL_PACK_COMPRESSED_BLOCK_WIDTH	(0x912B)
#define	GL_PACK_COMPRESSED_BLOCK_HEIGHT	(0x912C)
#define	GL_PACK_COMPRESSED_BLOCK_DEPTH	(0x912D)
#define	GL_PACK_COMPRESSED_BLOCK_SIZE	(0x912E)
#define	GL_NUM_SAMPLE_COUNTS	(0x9380)
#define	GL_MIN_MAP_BUFFER_ALIGNMENT	(0x90BC)
#define	GL_ATOMIC_COUNTER_BUFFER	(0x92C0)
#define	GL_ATOMIC_COUNTER_BUFFER_BINDING	(0x92C1)
#define	GL_ATOMIC_COUNTER_BUFFER_START	(0x92C2)
#define	GL_ATOMIC_COUNTER_BUFFER_SIZE	(0x92C3)
#define	GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE	(0x92C4)
#define	GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS	(0x92C5)
#define	GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES	(0x92C6)
#define	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER	(0x92C7)
#define	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER	(0x92C8)
#define	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER	(0x92C9)
#define	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER	(0x92CA)
#define	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER	(0x92CB)
#define	GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS	(0x92CC)
#define	GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS	(0x92CD)
#define	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS	(0x92CE)
#define	GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS	(0x92CF)
#define	GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS	(0x92D0)
#define	GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS	(0x92D1)
#define	GL_MAX_VERTEX_ATOMIC_COUNTERS	(0x92D2)
#define	GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS	(0x92D3)
#define	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS	(0x92D4)
#define	GL_MAX_GEOMETRY_ATOMIC_COUNTERS	(0x92D5)
#define	GL_MAX_FRAGMENT_ATOMIC_COUNTERS	(0x92D6)
#define	GL_MAX_COMBINED_ATOMIC_COUNTERS	(0x92D7)
#define	GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE	(0x92D8)
#define	GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS	(0x92DC)
#define	GL_ACTIVE_ATOMIC_COUNTER_BUFFERS	(0x92D9)
#define	GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX	(0x92DA)
#define	GL_UNSIGNED_INT_ATOMIC_COUNTER	(0x92DB)
#define	GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT	(0x00000001)
#define	GL_ELEMENT_ARRAY_BARRIER_BIT	(0x00000002)
#define	GL_UNIFORM_BARRIER_BIT	(0x00000004)
#define	GL_TEXTURE_FETCH_BARRIER_BIT	(0x00000008)
#define	GL_SHADER_IMAGE_ACCESS_BARRIER_BIT	(0x00000020)
#define	GL_COMMAND_BARRIER_BIT	(0x00000040)
#define	GL_PIXEL_BUFFER_BARRIER_BIT	(0x00000080)
#define	GL_TEXTURE_UPDATE_BARRIER_BIT	(0x00000100)
#define	GL_BUFFER_UPDATE_BARRIER_BIT	(0x00000200)
#define	GL_FRAMEBUFFER_BARRIER_BIT	(0x00000400)
#define	GL_TRANSFORM_FEEDBACK_BARRIER_BIT	(0x00000800)
#define	GL_ATOMIC_COUNTER_BARRIER_BIT	(0x00001000)
#define	GL_ALL_BARRIER_BITS	(0xFFFFFFFF)
#define	GL_MAX_IMAGE_UNITS	(0x8F38)
#define	GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS	(0x8F39)
#define	GL_IMAGE_BINDING_NAME	(0x8F3A)
#define	GL_IMAGE_BINDING_LEVEL	(0x8F3B)
#define	GL_IMAGE_BINDING_LAYERED	(0x8F3C)
#define	GL_IMAGE_BINDING_LAYER	(0x8F3D)
#define	GL_IMAGE_BINDING_ACCESS	(0x8F3E)
#define	GL_IMAGE_1D	(0x904C)
#define	GL_IMAGE_2D	(0x904D)
#define	GL_IMAGE_3D	(0x904E)
#define	GL_IMAGE_2D_RECT	(0x904F)
#define	GL_IMAGE_CUBE	(0x9050)
#define	GL_IMAGE_BUFFER	(0x9051)
#define	GL_IMAGE_1D_ARRAY	(0x9052)
#define	GL_IMAGE_2D_ARRAY	(0x9053)
#define	GL_IMAGE_CUBE_MAP_ARRAY	(0x9054)
#define	GL_IMAGE_2D_MULTISAMPLE	(0x9055)
#define	GL_IMAGE_2D_MULTISAMPLE_ARRAY	(0x9056)
#define	GL_INT_IMAGE_1D	(0x9057)
#define	GL_INT_IMAGE_2D	(0x9058)
#define	GL_INT_IMAGE_3D	(0x9059)
#define	GL_INT_IMAGE_2D_RECT	(0x905A)
#define	GL_INT_IMAGE_CUBE	(0x905B)
#define	GL_INT_IMAGE_BUFFER	(0x905C)
#define	GL_INT_IMAGE_1D_ARRAY	(0x905D)
#define	GL_INT_IMAGE_2D_ARRAY	(0x905E)
#define	GL_INT_IMAGE_CUBE_MAP_ARRAY	(0x905F)
#define	GL_INT_IMAGE_2D_MULTISAMPLE	(0x9060)
#define	GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY	(0x9061)
#define	GL_UNSIGNED_INT_IMAGE_1D	(0x9062)
#define	GL_UNSIGNED_INT_IMAGE_2D	(0x9063)
#define	GL_UNSIGNED_INT_IMAGE_3D	(0x9064)
#define	GL_UNSIGNED_INT_IMAGE_2D_RECT	(0x9065)
#define	GL_UNSIGNED_INT_IMAGE_CUBE	(0x9066)
#define	GL_UNSIGNED_INT_IMAGE_BUFFER	(0x9067)
#define	GL_UNSIGNED_INT_IMAGE_1D_ARRAY	(0x9068)
#define	GL_UNSIGNED_INT_IMAGE_2D_ARRAY	(0x9069)
#define	GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY	(0x906A)
#define	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE	(0x906B)
#define	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY	(0x906C)
#define	GL_MAX_IMAGE_SAMPLES	(0x906D)
#define	GL_IMAGE_BINDING_FORMAT	(0x906E)
#define	GL_IMAGE_FORMAT_COMPATIBILITY_TYPE	(0x90C7)
#define	GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE	(0x90C8)
#define	GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS	(0x90C9)
#define	GL_MAX_VERTEX_IMAGE_UNIFORMS	(0x90CA)
#define	GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS	(0x90CB)
#define	GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS	(0x90CC)
#define	GL_MAX_GEOMETRY_IMAGE_UNIFORMS	(0x90CD)
#define	GL_MAX_FRAGMENT_IMAGE_UNIFORMS	(0x90CE)
#define	GL_MAX_COMBINED_IMAGE_UNIFORMS	(0x90CF)
#define	GL_COMPRESSED_RGBA_BPTC_UNORM	(0x8E8C)
#define	GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM	(0x8E8D)
#define	GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT	(0x8E8E)
#define	GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT	(0x8E8F)
#define	GL_TEXTURE_IMMUTABLE_FORMAT	(0x912F)
#define	GL_NUM_SHADING_LANGUAGE_VERSIONS	(0x82E9)
#define	GL_VERTEX_ATTRIB_ARRAY_LONG	(0x874E)
#define	GL_COMPRESSED_RGB8_ETC2	(0x9274)
#define	GL_COMPRESSED_SRGB8_ETC2	(0x9275)
#define	GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2	(0x9276)
#define	GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2	(0x9277)
#define	GL_COMPRESSED_RGBA8_ETC2_EAC	(0x9278)
#define	GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC	(0x9279)
#define	GL_COMPRESSED_R11_EAC	(0x9270)
#define	GL_COMPRESSED_SIGNED_R11_EAC	(0x9271)
#define	GL_COMPRESSED_RG11_EAC	(0x9272)
#define	GL_COMPRESSED_SIGNED_RG11_EAC	(0x9273)
#define	GL_PRIMITIVE_RESTART_FIXED_INDEX	(0x8D69)
#define	GL_ANY_SAMPLES_PASSED_CONSERVATIVE	(0x8D6A)
#define	GL_MAX_ELEMENT_INDEX	(0x8D6B)
#define	GL_COMPUTE_SHADER	(0x91B9)
#define	GL_MAX_COMPUTE_UNIFORM_BLOCKS	(0x91BB)
#define	GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS	(0x91BC)
#define	GL_MAX_COMPUTE_IMAGE_UNIFORMS	(0x91BD)
#define	GL_MAX_COMPUTE_SHARED_MEMORY_SIZE	(0x8262)
#define	GL_MAX_COMPUTE_UNIFORM_COMPONENTS	(0x8263)
#define	GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS	(0x8264)
#define	GL_MAX_COMPUTE_ATOMIC_COUNTERS	(0x8265)
#define	GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS	(0x8266)
#define	GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS	(0x90EB)
#define	GL_MAX_COMPUTE_WORK_GROUP_COUNT	(0x91BE)
#define	GL_MAX_COMPUTE_WORK_GROUP_SIZE	(0x91BF)
#define	GL_COMPUTE_WORK_GROUP_SIZE	(0x8267)
#define	GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER	(0x90EC)
#define	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER	(0x90ED)
#define	GL_DISPATCH_INDIRECT_BUFFER	(0x90EE)
#define	GL_DISPATCH_INDIRECT_BUFFER_BINDING	(0x90EF)
#define	GL_COMPUTE_SHADER_BIT	(0x00000020)
#define	GL_DEBUG_OUTPUT_SYNCHRONOUS	(0x8242)
#define	GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH	(0x8243)
#define	GL_DEBUG_CALLBACK_FUNCTION	(0x8244)
#define	GL_DEBUG_CALLBACK_USER_PARAM	(0x8245)
#define	GL_DEBUG_SOURCE_API	(0x8246)
#define	GL_DEBUG_SOURCE_WINDOW_SYSTEM	(0x8247)
#define	GL_DEBUG_SOURCE_SHADER_COMPILER	(0x8248)
#define	GL_DEBUG_SOURCE_THIRD_PARTY	(0x8249)
#define	GL_DEBUG_SOURCE_APPLICATION	(0x824A)
#define	GL_DEBUG_SOURCE_OTHER	(0x824B)
#define	GL_DEBUG_TYPE_ERROR	(0x824C)
#define	GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR	(0x824D)
#define	GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR	(0x824E)
#define	GL_DEBUG_TYPE_PORTABILITY	(0x824F)
#define	GL_DEBUG_TYPE_PERFORMANCE	(0x8250)
#define	GL_DEBUG_TYPE_OTHER	(0x8251)
#define	GL_MAX_DEBUG_MESSAGE_LENGTH	(0x9143)
#define	GL_MAX_DEBUG_LOGGED_MESSAGES	(0x9144)
#define	GL_DEBUG_LOGGED_MESSAGES	(0x9145)
#define	GL_DEBUG_SEVERITY_HIGH	(0x9146)
#define	GL_DEBUG_SEVERITY_MEDIUM	(0x9147)
#define	GL_DEBUG_SEVERITY_LOW	(0x9148)
#define	GL_DEBUG_TYPE_MARKER	(0x8268)
#define	GL_DEBUG_TYPE_PUSH_GROUP	(0x8269)
#define	GL_DEBUG_TYPE_POP_GROUP	(0x826A)
#define	GL_DEBUG_SEVERITY_NOTIFICATION	(0x826B)
#define	GL_MAX_DEBUG_GROUP_STACK_DEPTH	(0x826C)
#define	GL_DEBUG_GROUP_STACK_DEPTH	(0x826D)
#define	GL_BUFFER	(0x82E0)
#define	GL_SHADER	(0x82E1)
#define	GL_PROGRAM	(0x82E2)
#define	GL_QUERY	(0x82E3)
#define	GL_PROGRAM_PIPELINE	(0x82E4)
#define	GL_SAMPLER	(0x82E6)
#define	GL_MAX_LABEL_LENGTH	(0x82E8)
#define	GL_DEBUG_OUTPUT	(0x92E0)
#define	GL_CONTEXT_FLAG_DEBUG_BIT	(0x00000002)
#define	GL_MAX_UNIFORM_LOCATIONS	(0x826E)
#define	GL_FRAMEBUFFER_DEFAULT_WIDTH	(0x9310)
#define	GL_FRAMEBUFFER_DEFAULT_HEIGHT	(0x9311)
#define	GL_FRAMEBUFFER_DEFAULT_LAYERS	(0x9312)
#define	GL_FRAMEBUFFER_DEFAULT_SAMPLES	(0x9313)
#define	GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS	(0x9314)
#define	GL_MAX_FRAMEBUFFER_WIDTH	(0x9315)
#define	GL_MAX_FRAMEBUFFER_HEIGHT	(0x9316)
#define	GL_MAX_FRAMEBUFFER_LAYERS	(0x9317)
#define	GL_MAX_FRAMEBUFFER_SAMPLES	(0x9318)
#define	GL_INTERNALFORMAT_SUPPORTED	(0x826F)
#define	GL_INTERNALFORMAT_PREFERRED	(0x8270)
#define	GL_INTERNALFORMAT_RED_SIZE	(0x8271)
#define	GL_INTERNALFORMAT_GREEN_SIZE	(0x8272)
#define	GL_INTERNALFORMAT_BLUE_SIZE	(0x8273)
#define	GL_INTERNALFORMAT_ALPHA_SIZE	(0x8274)
#define	GL_INTERNALFORMAT_DEPTH_SIZE	(0x8275)
#define	GL_INTERNALFORMAT_STENCIL_SIZE	(0x8276)
#define	GL_INTERNALFORMAT_SHARED_SIZE	(0x8277)
#define	GL_INTERNALFORMAT_RED_TYPE	(0x8278)
#define	GL_INTERNALFORMAT_GREEN_TYPE	(0x8279)
#define	GL_INTERNALFORMAT_BLUE_TYPE	(0x827A)
#define	GL_INTERNALFORMAT_ALPHA_TYPE	(0x827B)
#define	GL_INTERNALFORMAT_DEPTH_TYPE	(0x827C)
#define	GL_INTERNALFORMAT_STENCIL_TYPE	(0x827D)
#define	GL_MAX_WIDTH	(0x827E)
#define	GL_MAX_HEIGHT	(0x827F)
#define	GL_MAX_DEPTH	(0x8280)
#define	GL_MAX_LAYERS	(0x8281)
#define	GL_MAX_COMBINED_DIMENSIONS	(0x8282)
#define	GL_COLOR_COMPONENTS	(0x8283)
#define	GL_DEPTH_COMPONENTS	(0x8284)
#define	GL_STENCIL_COMPONENTS	(0x8285)
#define	GL_COLOR_RENDERABLE	(0x8286)
#define	GL_DEPTH_RENDERABLE	(0x8287)
#define	GL_STENCIL_RENDERABLE	(0x8288)
#define	GL_FRAMEBUFFER_RENDERABLE	(0x8289)
#define	GL_FRAMEBUFFER_RENDERABLE_LAYERED	(0x828A)
#define	GL_FRAMEBUFFER_BLEND	(0x828B)
#define	GL_READ_PIXELS	(0x828C)
#define	GL_READ_PIXELS_FORMAT	(0x828D)
#define	GL_READ_PIXELS_TYPE	(0x828E)
#define	GL_TEXTURE_IMAGE_FORMAT	(0x828F)
#define	GL_TEXTURE_IMAGE_TYPE	(0x8290)
#define	GL_GET_TEXTURE_IMAGE_FORMAT	(0x8291)
#define	GL_GET_TEXTURE_IMAGE_TYPE	(0x8292)
#define	GL_MIPMAP	(0x8293)
#define	GL_MANUAL_GENERATE_MIPMAP	(0x8294)
#define	GL_AUTO_GENERATE_MIPMAP	(0x8295)
#define	GL_COLOR_ENCODING	(0x8296)
#define	GL_SRGB_READ	(0x8297)
#define	GL_SRGB_WRITE	(0x8298)
#define	GL_FILTER	(0x829A)
#define	GL_VERTEX_TEXTURE	(0x829B)
#define	GL_TESS_CONTROL_TEXTURE	(0x829C)
#define	GL_TESS_EVALUATION_TEXTURE	(0x829D)
#define	GL_GEOMETRY_TEXTURE	(0x829E)
#define	GL_FRAGMENT_TEXTURE	(0x829F)
#define	GL_COMPUTE_TEXTURE	(0x82A0)
#define	GL_TEXTURE_SHADOW	(0x82A1)
#define	GL_TEXTURE_GATHER	(0x82A2)
#define	GL_TEXTURE_GATHER_SHADOW	(0x82A3)
#define	GL_SHADER_IMAGE_LOAD	(0x82A4)
#define	GL_SHADER_IMAGE_STORE	(0x82A5)
#define	GL_SHADER_IMAGE_ATOMIC	(0x82A6)
#define	GL_IMAGE_TEXEL_SIZE	(0x82A7)
#define	GL_IMAGE_COMPATIBILITY_CLASS	(0x82A8)
#define	GL_IMAGE_PIXEL_FORMAT	(0x82A9)
#define	GL_IMAGE_PIXEL_TYPE	(0x82AA)
#define	GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST	(0x82AC)
#define	GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST	(0x82AD)
#define	GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE	(0x82AE)
#define	GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE	(0x82AF)
#define	GL_TEXTURE_COMPRESSED_BLOCK_WIDTH	(0x82B1)
#define	GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT	(0x82B2)
#define	GL_TEXTURE_COMPRESSED_BLOCK_SIZE	(0x82B3)
#define	GL_CLEAR_BUFFER	(0x82B4)
#define	GL_TEXTURE_VIEW	(0x82B5)
#define	GL_VIEW_COMPATIBILITY_CLASS	(0x82B6)
#define	GL_FULL_SUPPORT	(0x82B7)
#define	GL_CAVEAT_SUPPORT	(0x82B8)
#define	GL_IMAGE_CLASS_4_X_32	(0x82B9)
#define	GL_IMAGE_CLASS_2_X_32	(0x82BA)
#define	GL_IMAGE_CLASS_1_X_32	(0x82BB)
#define	GL_IMAGE_CLASS_4_X_16	(0x82BC)
#define	GL_IMAGE_CLASS_2_X_16	(0x82BD)
#define	GL_IMAGE_CLASS_1_X_16	(0x82BE)
#define	GL_IMAGE_CLASS_4_X_8	(0x82BF)
#define	GL_IMAGE_CLASS_2_X_8	(0x82C0)
#define	GL_IMAGE_CLASS_1_X_8	(0x82C1)
#define	GL_IMAGE_CLASS_11_11_10	(0x82C2)
#define	GL_IMAGE_CLASS_10_10_10_2	(0x82C3)
#define	GL_VIEW_CLASS_128_BITS	(0x82C4)
#define	GL_VIEW_CLASS_96_BITS	(0x82C5)
#define	GL_VIEW_CLASS_64_BITS	(0x82C6)
#define	GL_VIEW_CLASS_48_BITS	(0x82C7)
#define	GL_VIEW_CLASS_32_BITS	(0x82C8)
#define	GL_VIEW_CLASS_24_BITS	(0x82C9)
#define	GL_VIEW_CLASS_16_BITS	(0x82CA)
#define	GL_VIEW_CLASS_8_BITS	(0x82CB)
#define	GL_VIEW_CLASS_S3TC_DXT1_RGB	(0x82CC)
#define	GL_VIEW_CLASS_S3TC_DXT1_RGBA	(0x82CD)
#define	GL_VIEW_CLASS_S3TC_DXT3_RGBA	(0x82CE)
#define	GL_VIEW_CLASS_S3TC_DXT5_RGBA	(0x82CF)
#define	GL_VIEW_CLASS_RGTC1_RED	(0x82D0)
#define	GL_VIEW_CLASS_RGTC2_RG	(0x82D1)
#define	GL_VIEW_CLASS_BPTC_UNORM	(0x82D2)
#define	GL_VIEW_CLASS_BPTC_FLOAT	(0x82D3)
#define	GL_UNIFORM	(0x92E1)
#define	GL_UNIFORM_BLOCK	(0x92E2)
#define	GL_PROGRAM_INPUT	(0x92E3)
#define	GL_PROGRAM_OUTPUT	(0x92E4)
#define	GL_BUFFER_VARIABLE	(0x92E5)
#define	GL_SHADER_STORAGE_BLOCK	(0x92E6)
#define	GL_VERTEX_SUBROUTINE	(0x92E8)
#define	GL_TESS_CONTROL_SUBROUTINE	(0x92E9)
#define	GL_TESS_EVALUATION_SUBROUTINE	(0x92EA)
#define	GL_GEOMETRY_SUBROUTINE	(0x92EB)
#define	GL_FRAGMENT_SUBROUTINE	(0x92EC)
#define	GL_COMPUTE_SUBROUTINE	(0x92ED)
#define	GL_VERTEX_SUBROUTINE_UNIFORM	(0x92EE)
#define	GL_TESS_CONTROL_SUBROUTINE_UNIFORM	(0x92EF)
#define	GL_TESS_EVALUATION_SUBROUTINE_UNIFORM	(0x92F0)
#define	GL_GEOMETRY_SUBROUTINE_UNIFORM	(0x92F1)
#define	GL_FRAGMENT_SUBROUTINE_UNIFORM	(0x92F2)
#define	GL_COMPUTE_SUBROUTINE_UNIFORM	(0x92F3)
#define	GL_TRANSFORM_FEEDBACK_VARYING	(0x92F4)
#define	GL_ACTIVE_RESOURCES	(0x92F5)
#define	GL_MAX_NAME_LENGTH	(0x92F6)
#define	GL_MAX_NUM_ACTIVE_VARIABLES	(0x92F7)
#define	GL_MAX_NUM_COMPATIBLE_SUBROUTINES	(0x92F8)
#define	GL_NAME_LENGTH	(0x92F9)
#define	GL_TYPE	(0x92FA)
#define	GL_ARRAY_SIZE	(0x92FB)
#define	GL_OFFSET	(0x92FC)
#define	GL_BLOCK_INDEX	(0x92FD)
#define	GL_ARRAY_STRIDE	(0x92FE)
#define	GL_MATRIX_STRIDE	(0x92FF)
#define	GL_IS_ROW_MAJOR	(0x9300)
#define	GL_ATOMIC_COUNTER_BUFFER_INDEX	(0x9301)
#define	GL_BUFFER_BINDING	(0x9302)
#define	GL_BUFFER_DATA_SIZE	(0x9303)
#define	GL_NUM_ACTIVE_VARIABLES	(0x9304)
#define	GL_ACTIVE_VARIABLES	(0x9305)
#define	GL_REFERENCED_BY_VERTEX_SHADER	(0x9306)
#define	GL_REFERENCED_BY_TESS_CONTROL_SHADER	(0x9307)
#define	GL_REFERENCED_BY_TESS_EVALUATION_SHADER	(0x9308)
#define	GL_REFERENCED_BY_GEOMETRY_SHADER	(0x9309)
#define	GL_REFERENCED_BY_FRAGMENT_SHADER	(0x930A)
#define	GL_REFERENCED_BY_COMPUTE_SHADER	(0x930B)
#define	GL_TOP_LEVEL_ARRAY_SIZE	(0x930C)
#define	GL_TOP_LEVEL_ARRAY_STRIDE	(0x930D)
#define	GL_LOCATION	(0x930E)
#define	GL_LOCATION_INDEX	(0x930F)
#define	GL_IS_PER_PATCH	(0x92E7)
#define	GL_SHADER_STORAGE_BUFFER	(0x90D2)
#define	GL_SHADER_STORAGE_BUFFER_BINDING	(0x90D3)
#define	GL_SHADER_STORAGE_BUFFER_START	(0x90D4)
#define	GL_SHADER_STORAGE_BUFFER_SIZE	(0x90D5)
#define	GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS	(0x90D6)
#define	GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS	(0x90D7)
#define	GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS	(0x90D8)
#define	GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS	(0x90D9)
#define	GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS	(0x90DA)
#define	GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS	(0x90DB)
#define	GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS	(0x90DC)
#define	GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS	(0x90DD)
#define	GL_MAX_SHADER_STORAGE_BLOCK_SIZE	(0x90DE)
#define	GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT	(0x90DF)
#define	GL_SHADER_STORAGE_BARRIER_BIT	(0x00002000)
#define	GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES	(0x8F39)
#define	GL_DEPTH_STENCIL_TEXTURE_MODE	(0x90EA)
#define	GL_TEXTURE_BUFFER_OFFSET	(0x919D)
#define	GL_TEXTURE_BUFFER_SIZE	(0x919E)
#define	GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT	(0x919F)
#define	GL_TEXTURE_VIEW_MIN_LEVEL	(0x82DB)
#define	GL_TEXTURE_VIEW_NUM_LEVELS	(0x82DC)
#define	GL_TEXTURE_VIEW_MIN_LAYER	(0x82DD)
#define	GL_TEXTURE_VIEW_NUM_LAYERS	(0x82DE)
#define	GL_TEXTURE_IMMUTABLE_LEVELS	(0x82DF)
#define	GL_VERTEX_ATTRIB_BINDING	(0x82D4)
#define	GL_VERTEX_ATTRIB_RELATIVE_OFFSET	(0x82D5)
#define	GL_VERTEX_BINDING_DIVISOR	(0x82D6)
#define	GL_VERTEX_BINDING_OFFSET	(0x82D7)
#define	GL_VERTEX_BINDING_STRIDE	(0x82D8)
#define	GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET	(0x82D9)
#define	GL_MAX_VERTEX_ATTRIB_BINDINGS	(0x82DA)
#define	GL_VERTEX_BINDING_BUFFER	(0x8F4F)
#define	GL_DISPLAY_LIST	(0x82E7)
#define	GL_MAX_VERTEX_ATTRIB_STRIDE	(0x82E5)
#define	GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED	(0x8221)
#define	GL_TEXTURE_BUFFER_BINDING	(0x8C2A)
#define	GL_MAP_PERSISTENT_BIT	(0x0040)
#define	GL_MAP_COHERENT_BIT	(0x0080)
#define	GL_DYNAMIC_STORAGE_BIT	(0x0100)
#define	GL_CLIENT_STORAGE_BIT	(0x0200)
#define	GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT	(0x00004000)
#define	GL_BUFFER_IMMUTABLE_STORAGE	(0x821F)
#define	GL_BUFFER_STORAGE_FLAGS	(0x8220)
#define	GL_CLEAR_TEXTURE	(0x9365)
#define	GL_LOCATION_COMPONENT	(0x934A)
#define	GL_TRANSFORM_FEEDBACK_BUFFER_INDEX	(0x934B)
#define	GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE	(0x934C)
#define	GL_QUERY_BUFFER	(0x9192)
#define	GL_QUERY_BUFFER_BARRIER_BIT	(0x00008000)
#define	GL_QUERY_BUFFER_BINDING	(0x9193)
#define	GL_QUERY_RESULT_NO_WAIT	(0x9194)
#define	GL_MIRROR_CLAMP_TO_EDGE	(0x8743)
#define	GL_CONTEXT_LOST	(0x0507)
#define	GL_NEGATIVE_ONE_TO_ONE	(0x935E)
#define	GL_ZERO_TO_ONE	(0x935F)
#define	GL_CLIP_ORIGIN	(0x935C)
#define	GL_CLIP_DEPTH_MODE	(0x935D)
#define	GL_QUERY_WAIT_INVERTED	(0x8E17)
#define	GL_QUERY_NO_WAIT_INVERTED	(0x8E18)
#define	GL_QUERY_BY_REGION_WAIT_INVERTED	(0x8E19)
#define	GL_QUERY_BY_REGION_NO_WAIT_INVERTED	(0x8E1A)
#define	GL_MAX_CULL_DISTANCES	(0x82F9)
#define	GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES	(0x82FA)
#define	GL_TEXTURE_TARGET	(0x1006)
#define	GL_QUERY_TARGET	(0x82EA)
#define	GL_GUILTY_CONTEXT_RESET	(0x8253)
#define	GL_INNOCENT_CONTEXT_RESET	(0x8254)
#define	GL_UNKNOWN_CONTEXT_RESET	(0x8255)
#define	GL_RESET_NOTIFICATION_STRATEGY	(0x8256)
#define	GL_LOSE_CONTEXT_ON_RESET	(0x8252)
#define	GL_NO_RESET_NOTIFICATION	(0x8261)
#define	GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT	(0x00000004)
#define	GL_COLOR_TABLE	(0x80D0)
#define	GL_POST_CONVOLUTION_COLOR_TABLE	(0x80D1)
#define	GL_POST_COLOR_MATRIX_COLOR_TABLE	(0x80D2)
#define	GL_PROXY_COLOR_TABLE	(0x80D3)
#define	GL_PROXY_POST_CONVOLUTION_COLOR_TABLE	(0x80D4)
#define	GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE	(0x80D5)
#define	GL_CONVOLUTION_1D	(0x8010)
#define	GL_CONVOLUTION_2D	(0x8011)
#define	GL_SEPARABLE_2D	(0x8012)
#define	GL_HISTOGRAM	(0x8024)
#define	GL_PROXY_HISTOGRAM	(0x8025)
#define	GL_MINMAX	(0x802E)
#define	GL_CONTEXT_RELEASE_BEHAVIOR	(0x82FB)
#define	GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH	(0x82FC)
#define	GL_SHADER_BINARY_FORMAT_SPIR_V	(0x9551)
#define	GL_SPIR_V_BINARY	(0x9552)
#define	GL_PARAMETER_BUFFER	(0x80EE)
#define	GL_PARAMETER_BUFFER_BINDING	(0x80EF)
#define	GL_CONTEXT_FLAG_NO_ERROR_BIT	(0x00000008)
#define	GL_VERTICES_SUBMITTED	(0x82EE)
#define	GL_PRIMITIVES_SUBMITTED	(0x82EF)
#define	GL_VERTEX_SHADER_INVOCATIONS	(0x82F0)
#define	GL_TESS_CONTROL_SHADER_PATCHES	(0x82F1)
#define	GL_TESS_EVALUATION_SHADER_INVOCATIONS	(0x82F2)
#define	GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED	(0x82F3)
#define	GL_FRAGMENT_SHADER_INVOCATIONS	(0x82F4)
#define	GL_COMPUTE_SHADER_INVOCATIONS	(0x82F5)
#define	GL_CLIPPING_INPUT_PRIMITIVES	(0x82F6)
#define	GL_CLIPPING_OUTPUT_PRIMITIVES	(0x82F7)
#define	GL_POLYGON_OFFSET_CLAMP	(0x8E1B)
#define	GL_SPIR_V_EXTENSIONS	(0x9553)
#define	GL_NUM_SPIR_V_EXTENSIONS	(0x9554)
#define	GL_TEXTURE_MAX_ANISOTROPY	(0x84FE)
#define	GL_MAX_TEXTURE_MAX_ANISOTROPY	(0x84FF)
#define	GL_TRANSFORM_FEEDBACK_OVERFLOW	(0x82EC)
#define	GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW	(0x82ED)

/********************************************************************************************************************************
														OpenGl 1.0
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLCULLFACEPROC)(GLenum mode);
typedef void (OPENGL_API_CALL PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (OPENGL_API_CALL PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (OPENGL_API_CALL PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (OPENGL_API_CALL PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (OPENGL_API_CALL PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (OPENGL_API_CALL PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
typedef void (OPENGL_API_CALL PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
typedef void (OPENGL_API_CALL PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
typedef void (OPENGL_API_CALL PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (OPENGL_API_CALL PFNGLCLEARPROC)(GLbitfield mask);
typedef void (OPENGL_API_CALL PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (OPENGL_API_CALL PFNGLCLEARSTENCILPROC)(GLint s);
typedef void (OPENGL_API_CALL PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (OPENGL_API_CALL PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (OPENGL_API_CALL PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (OPENGL_API_CALL PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (OPENGL_API_CALL PFNGLDISABLEPROC)(GLenum cap);
typedef void (OPENGL_API_CALL PFNGLENABLEPROC)(GLenum cap);
typedef void (OPENGL_API_CALL PFNGLFINISHPROC)(void);
typedef void (OPENGL_API_CALL PFNGLFLUSHPROC)(void);
typedef void (OPENGL_API_CALL PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (OPENGL_API_CALL PFNGLLOGICOPPROC)(GLenum opcode);
typedef void (OPENGL_API_CALL PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (OPENGL_API_CALL PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (OPENGL_API_CALL PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (OPENGL_API_CALL PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLREADBUFFERPROC)(GLenum src);
typedef void (OPENGL_API_CALL PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
typedef void (OPENGL_API_CALL PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean* data);
typedef void (OPENGL_API_CALL PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble* data);
typedef GLenum(OPENGL_API_CALL PFNGLGETERRORPROC)(void);
typedef void (OPENGL_API_CALL PFNGLGETFLOATVPROC)(GLenum pname, GLfloat* data);
typedef void (OPENGL_API_CALL PFNGLGETINTEGERVPROC)(GLenum pname, GLint* data);
typedef const GLubyte* (OPENGL_API_CALL PFNGLGETSTRINGPROC)(GLenum name);
typedef void (OPENGL_API_CALL PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
typedef void (OPENGL_API_CALL PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint* params);
typedef GLboolean(OPENGL_API_CALL PFNGLISENABLEDPROC)(GLenum cap);
typedef void (OPENGL_API_CALL PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void (OPENGL_API_CALL PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef void (OPENGL_API_CALL PFNGLENDLISTPROC)(void);
typedef void (OPENGL_API_CALL PFNGLCALLLISTPROC)(GLuint list);
typedef void (OPENGL_API_CALL PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void* lists);
typedef void (OPENGL_API_CALL PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef GLuint(OPENGL_API_CALL PFNGLGENLISTSPROC)(GLsizei range);
typedef void (OPENGL_API_CALL PFNGLLISTBASEPROC)(GLuint base);
typedef void (OPENGL_API_CALL PFNGLBEGINPROC)(GLenum mode);
typedef void (OPENGL_API_CALL PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
typedef void (OPENGL_API_CALL PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (OPENGL_API_CALL PFNGLCOLOR3BVPROC)(const GLbyte* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (OPENGL_API_CALL PFNGLCOLOR3DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (OPENGL_API_CALL PFNGLCOLOR3FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (OPENGL_API_CALL PFNGLCOLOR3IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (OPENGL_API_CALL PFNGLCOLOR3SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (OPENGL_API_CALL PFNGLCOLOR3UBVPROC)(const GLubyte* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (OPENGL_API_CALL PFNGLCOLOR3UIVPROC)(const GLuint* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (OPENGL_API_CALL PFNGLCOLOR3USVPROC)(const GLushort* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void (OPENGL_API_CALL PFNGLCOLOR4BVPROC)(const GLbyte* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void (OPENGL_API_CALL PFNGLCOLOR4DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (OPENGL_API_CALL PFNGLCOLOR4FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (OPENGL_API_CALL PFNGLCOLOR4IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void (OPENGL_API_CALL PFNGLCOLOR4SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void (OPENGL_API_CALL PFNGLCOLOR4UBVPROC)(const GLubyte* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (OPENGL_API_CALL PFNGLCOLOR4UIVPROC)(const GLuint* v);
typedef void (OPENGL_API_CALL PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void (OPENGL_API_CALL PFNGLCOLOR4USVPROC)(const GLushort* v);
typedef void (OPENGL_API_CALL PFNGLEDGEFLAGPROC)(GLboolean flag);
typedef void (OPENGL_API_CALL PFNGLEDGEFLAGVPROC)(const GLboolean* flag);
typedef void (OPENGL_API_CALL PFNGLENDPROC)(void);
typedef void (OPENGL_API_CALL PFNGLINDEXDPROC)(GLdouble c);
typedef void (OPENGL_API_CALL PFNGLINDEXDVPROC)(const GLdouble* c);
typedef void (OPENGL_API_CALL PFNGLINDEXFPROC)(GLfloat c);
typedef void (OPENGL_API_CALL PFNGLINDEXFVPROC)(const GLfloat* c);
typedef void (OPENGL_API_CALL PFNGLINDEXIPROC)(GLint c);
typedef void (OPENGL_API_CALL PFNGLINDEXIVPROC)(const GLint* c);
typedef void (OPENGL_API_CALL PFNGLINDEXSPROC)(GLshort c);
typedef void (OPENGL_API_CALL PFNGLINDEXSVPROC)(const GLshort* c);
typedef void (OPENGL_API_CALL PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (OPENGL_API_CALL PFNGLNORMAL3BVPROC)(const GLbyte* v);
typedef void (OPENGL_API_CALL PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (OPENGL_API_CALL PFNGLNORMAL3DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (OPENGL_API_CALL PFNGLNORMAL3FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void (OPENGL_API_CALL PFNGLNORMAL3IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void (OPENGL_API_CALL PFNGLNORMAL3SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS2DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS2FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS2IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS2SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS3DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS3FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS3IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS3SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS4DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS4FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS4IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (OPENGL_API_CALL PFNGLRASTERPOS4SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void (OPENGL_API_CALL PFNGLRECTDVPROC)(const GLdouble* v1, const GLdouble* v2);
typedef void (OPENGL_API_CALL PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void (OPENGL_API_CALL PFNGLRECTFVPROC)(const GLfloat* v1, const GLfloat* v2);
typedef void (OPENGL_API_CALL PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void (OPENGL_API_CALL PFNGLRECTIVPROC)(const GLint* v1, const GLint* v2);
typedef void (OPENGL_API_CALL PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void (OPENGL_API_CALL PFNGLRECTSVPROC)(const GLshort* v1, const GLshort* v2);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD1DPROC)(GLdouble s);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD1DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD1FPROC)(GLfloat s);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD1FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD1IPROC)(GLint s);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD1IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD1SPROC)(GLshort s);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD1SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD2DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD2FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD2IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD2SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD3DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD3FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD3IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD3SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD4DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD4FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD4IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (OPENGL_API_CALL PFNGLTEXCOORD4SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void (OPENGL_API_CALL PFNGLVERTEX2DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void (OPENGL_API_CALL PFNGLVERTEX2FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX2IPROC)(GLint x, GLint y);
typedef void (OPENGL_API_CALL PFNGLVERTEX2IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef void (OPENGL_API_CALL PFNGLVERTEX2SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (OPENGL_API_CALL PFNGLVERTEX3DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (OPENGL_API_CALL PFNGLVERTEX3FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void (OPENGL_API_CALL PFNGLVERTEX3IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (OPENGL_API_CALL PFNGLVERTEX3SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (OPENGL_API_CALL PFNGLVERTEX4DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (OPENGL_API_CALL PFNGLVERTEX4FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (OPENGL_API_CALL PFNGLVERTEX4IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (OPENGL_API_CALL PFNGLVERTEX4SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble* equation);
typedef void (OPENGL_API_CALL PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void (OPENGL_API_CALL PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLFOGFVPROC)(GLenum pname, const GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLFOGIPROC)(GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLFOGIVPROC)(GLenum pname, const GLint* params);
typedef void (OPENGL_API_CALL PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint* params);
typedef void (OPENGL_API_CALL PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint* params);
typedef void (OPENGL_API_CALL PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void (OPENGL_API_CALL PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint* params);
typedef void (OPENGL_API_CALL PFNGLPOLYGONSTIPPLEPROC)(const GLubyte* mask);
typedef void (OPENGL_API_CALL PFNGLSHADEMODELPROC)(GLenum mode);
typedef void (OPENGL_API_CALL PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint* params);
typedef void (OPENGL_API_CALL PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void (OPENGL_API_CALL PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble* params);
typedef void (OPENGL_API_CALL PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint* params);
typedef void (OPENGL_API_CALL PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat* buffer);
typedef void (OPENGL_API_CALL PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint* buffer);
typedef GLint(OPENGL_API_CALL PFNGLRENDERMODEPROC)(GLenum mode);
typedef void (OPENGL_API_CALL PFNGLINITNAMESPROC)(void);
typedef void (OPENGL_API_CALL PFNGLLOADNAMEPROC)(GLuint name);
typedef void (OPENGL_API_CALL PFNGLPASSTHROUGHPROC)(GLfloat token);
typedef void (OPENGL_API_CALL PFNGLPOPNAMEPROC)(void);
typedef void (OPENGL_API_CALL PFNGLPUSHNAMEPROC)(GLuint name);
typedef void (OPENGL_API_CALL PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (OPENGL_API_CALL PFNGLCLEARINDEXPROC)(GLfloat c);
typedef void (OPENGL_API_CALL PFNGLINDEXMASKPROC)(GLuint mask);
typedef void (OPENGL_API_CALL PFNGLACCUMPROC)(GLenum op, GLfloat value);
typedef void (OPENGL_API_CALL PFNGLPOPATTRIBPROC)(void);
typedef void (OPENGL_API_CALL PFNGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void (OPENGL_API_CALL PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
typedef void (OPENGL_API_CALL PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
typedef void (OPENGL_API_CALL PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
typedef void (OPENGL_API_CALL PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
typedef void (OPENGL_API_CALL PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void (OPENGL_API_CALL PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void (OPENGL_API_CALL PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void (OPENGL_API_CALL PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void (OPENGL_API_CALL PFNGLEVALCOORD1DPROC)(GLdouble u);
typedef void (OPENGL_API_CALL PFNGLEVALCOORD1DVPROC)(const GLdouble* u);
typedef void (OPENGL_API_CALL PFNGLEVALCOORD1FPROC)(GLfloat u);
typedef void (OPENGL_API_CALL PFNGLEVALCOORD1FVPROC)(const GLfloat* u);
typedef void (OPENGL_API_CALL PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void (OPENGL_API_CALL PFNGLEVALCOORD2DVPROC)(const GLdouble* u);
typedef void (OPENGL_API_CALL PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void (OPENGL_API_CALL PFNGLEVALCOORD2FVPROC)(const GLfloat* u);
typedef void (OPENGL_API_CALL PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void (OPENGL_API_CALL PFNGLEVALPOINT1PROC)(GLint i);
typedef void (OPENGL_API_CALL PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void (OPENGL_API_CALL PFNGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void (OPENGL_API_CALL PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef void (OPENGL_API_CALL PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void (OPENGL_API_CALL PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat* values);
typedef void (OPENGL_API_CALL PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint* values);
typedef void (OPENGL_API_CALL PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort* values);
typedef void (OPENGL_API_CALL PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void (OPENGL_API_CALL PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
typedef void (OPENGL_API_CALL PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble* equation);
typedef void (OPENGL_API_CALL PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint* v);
typedef void (OPENGL_API_CALL PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat* values);
typedef void (OPENGL_API_CALL PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint* values);
typedef void (OPENGL_API_CALL PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort* values);
typedef void (OPENGL_API_CALL PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte* mask);
typedef void (OPENGL_API_CALL PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint* params);
typedef GLboolean(OPENGL_API_CALL PFNGLISLISTPROC)(GLuint list);
typedef void (OPENGL_API_CALL PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (OPENGL_API_CALL PFNGLLOADIDENTITYPROC)(void);
typedef void (OPENGL_API_CALL PFNGLLOADMATRIXFPROC)(const GLfloat* m);
typedef void (OPENGL_API_CALL PFNGLLOADMATRIXDPROC)(const GLdouble* m);
typedef void (OPENGL_API_CALL PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void (OPENGL_API_CALL PFNGLMULTMATRIXFPROC)(const GLfloat* m);
typedef void (OPENGL_API_CALL PFNGLMULTMATRIXDPROC)(const GLdouble* m);
typedef void (OPENGL_API_CALL PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (OPENGL_API_CALL PFNGLPOPMATRIXPROC)(void);
typedef void (OPENGL_API_CALL PFNGLPUSHMATRIXPROC)(void);
typedef void (OPENGL_API_CALL PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (OPENGL_API_CALL PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (OPENGL_API_CALL PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (OPENGL_API_CALL PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (OPENGL_API_CALL PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (OPENGL_API_CALL PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);

OPENGL_API_ENTRY PFNGLCULLFACEPROC glCullFace;
OPENGL_API_ENTRY PFNGLFRONTFACEPROC glFrontFace;
OPENGL_API_ENTRY PFNGLHINTPROC glHint;
OPENGL_API_ENTRY PFNGLLINEWIDTHPROC glLineWidth;
OPENGL_API_ENTRY PFNGLPOINTSIZEPROC glPointSize;
OPENGL_API_ENTRY PFNGLPOLYGONMODEPROC glPolygonMode;
OPENGL_API_ENTRY PFNGLSCISSORPROC glScissor;
OPENGL_API_ENTRY PFNGLTEXPARAMETERFPROC glTexParameterf;
OPENGL_API_ENTRY PFNGLTEXPARAMETERFVPROC glTexParameterfv;
OPENGL_API_ENTRY PFNGLTEXPARAMETERIPROC glTexParameteri;
OPENGL_API_ENTRY PFNGLTEXPARAMETERIVPROC glTexParameteriv;
OPENGL_API_ENTRY PFNGLTEXIMAGE1DPROC glTexImage1D;
OPENGL_API_ENTRY PFNGLTEXIMAGE2DPROC glTexImage2D;
OPENGL_API_ENTRY PFNGLDRAWBUFFERPROC glDrawBuffer;
OPENGL_API_ENTRY PFNGLCLEARPROC glClear;
OPENGL_API_ENTRY PFNGLCLEARCOLORPROC glClearColor;
OPENGL_API_ENTRY PFNGLCLEARSTENCILPROC glClearStencil;
OPENGL_API_ENTRY PFNGLCLEARDEPTHPROC glClearDepth;
OPENGL_API_ENTRY PFNGLSTENCILMASKPROC glStencilMask;
OPENGL_API_ENTRY PFNGLCOLORMASKPROC glColorMask;
OPENGL_API_ENTRY PFNGLDEPTHMASKPROC glDepthMask;
OPENGL_API_ENTRY PFNGLDISABLEPROC glDisable;
OPENGL_API_ENTRY PFNGLENABLEPROC glEnable;
OPENGL_API_ENTRY PFNGLFINISHPROC glFinish;
OPENGL_API_ENTRY PFNGLFLUSHPROC glFlush;
OPENGL_API_ENTRY PFNGLBLENDFUNCPROC glBlendFunc;
OPENGL_API_ENTRY PFNGLLOGICOPPROC glLogicOp;
OPENGL_API_ENTRY PFNGLSTENCILFUNCPROC glStencilFunc;
OPENGL_API_ENTRY PFNGLSTENCILOPPROC glStencilOp;
OPENGL_API_ENTRY PFNGLDEPTHFUNCPROC glDepthFunc;
OPENGL_API_ENTRY PFNGLPIXELSTOREFPROC glPixelStoref;
OPENGL_API_ENTRY PFNGLPIXELSTOREIPROC glPixelStorei;
OPENGL_API_ENTRY PFNGLREADBUFFERPROC glReadBuffer;
OPENGL_API_ENTRY PFNGLREADPIXELSPROC glReadPixels;
OPENGL_API_ENTRY PFNGLGETBOOLEANVPROC glGetBooleanv;
OPENGL_API_ENTRY PFNGLGETDOUBLEVPROC glGetDoublev;
OPENGL_API_ENTRY PFNGLGETERRORPROC glGetError;
OPENGL_API_ENTRY PFNGLGETFLOATVPROC glGetFloatv;
OPENGL_API_ENTRY PFNGLGETINTEGERVPROC glGetIntegerv;
OPENGL_API_ENTRY PFNGLGETSTRINGPROC glGetString;
OPENGL_API_ENTRY PFNGLGETTEXIMAGEPROC glGetTexImage;
OPENGL_API_ENTRY PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
OPENGL_API_ENTRY PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
OPENGL_API_ENTRY PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
OPENGL_API_ENTRY PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
OPENGL_API_ENTRY PFNGLISENABLEDPROC glIsEnabled;
OPENGL_API_ENTRY PFNGLDEPTHRANGEPROC glDepthRange;
OPENGL_API_ENTRY PFNGLVIEWPORTPROC glViewport;
OPENGL_API_ENTRY PFNGLNEWLISTPROC glNewList;
OPENGL_API_ENTRY PFNGLENDLISTPROC glEndList;
OPENGL_API_ENTRY PFNGLCALLLISTPROC glCallList;
OPENGL_API_ENTRY PFNGLCALLLISTSPROC glCallLists;
OPENGL_API_ENTRY PFNGLDELETELISTSPROC glDeleteLists;
OPENGL_API_ENTRY PFNGLGENLISTSPROC glGenLists;
OPENGL_API_ENTRY PFNGLLISTBASEPROC glListBase;
OPENGL_API_ENTRY PFNGLBEGINPROC glBegin;
OPENGL_API_ENTRY PFNGLBITMAPPROC glBitmap;
OPENGL_API_ENTRY PFNGLCOLOR3BPROC glColor3b;
OPENGL_API_ENTRY PFNGLCOLOR3BVPROC glColor3bv;
OPENGL_API_ENTRY PFNGLCOLOR3DPROC glColor3d;
OPENGL_API_ENTRY PFNGLCOLOR3DVPROC glColor3dv;
OPENGL_API_ENTRY PFNGLCOLOR3FPROC glColor3f;
OPENGL_API_ENTRY PFNGLCOLOR3FVPROC glColor3fv;
OPENGL_API_ENTRY PFNGLCOLOR3IPROC glColor3i;
OPENGL_API_ENTRY PFNGLCOLOR3IVPROC glColor3iv;
OPENGL_API_ENTRY PFNGLCOLOR3SPROC glColor3s;
OPENGL_API_ENTRY PFNGLCOLOR3SVPROC glColor3sv;
OPENGL_API_ENTRY PFNGLCOLOR3UBPROC glColor3ub;
OPENGL_API_ENTRY PFNGLCOLOR3UBVPROC glColor3ubv;
OPENGL_API_ENTRY PFNGLCOLOR3UIPROC glColor3ui;
OPENGL_API_ENTRY PFNGLCOLOR3UIVPROC glColor3uiv;
OPENGL_API_ENTRY PFNGLCOLOR3USPROC glColor3us;
OPENGL_API_ENTRY PFNGLCOLOR3USVPROC glColor3usv;
OPENGL_API_ENTRY PFNGLCOLOR4BPROC glColor4b;
OPENGL_API_ENTRY PFNGLCOLOR4BVPROC glColor4bv;
OPENGL_API_ENTRY PFNGLCOLOR4DPROC glColor4d;
OPENGL_API_ENTRY PFNGLCOLOR4DVPROC glColor4dv;
OPENGL_API_ENTRY PFNGLCOLOR4FPROC glColor4f;
OPENGL_API_ENTRY PFNGLCOLOR4FVPROC glColor4fv;
OPENGL_API_ENTRY PFNGLCOLOR4IPROC glColor4i;
OPENGL_API_ENTRY PFNGLCOLOR4IVPROC glColor4iv;
OPENGL_API_ENTRY PFNGLCOLOR4SPROC glColor4s;
OPENGL_API_ENTRY PFNGLCOLOR4SVPROC glColor4sv;
OPENGL_API_ENTRY PFNGLCOLOR4UBPROC glColor4ub;
OPENGL_API_ENTRY PFNGLCOLOR4UBVPROC glColor4ubv;
OPENGL_API_ENTRY PFNGLCOLOR4UIPROC glColor4ui;
OPENGL_API_ENTRY PFNGLCOLOR4UIVPROC glColor4uiv;
OPENGL_API_ENTRY PFNGLCOLOR4USPROC glColor4us;
OPENGL_API_ENTRY PFNGLCOLOR4USVPROC glColor4usv;
OPENGL_API_ENTRY PFNGLEDGEFLAGPROC glEdgeFlag;
OPENGL_API_ENTRY PFNGLEDGEFLAGVPROC glEdgeFlagv;
OPENGL_API_ENTRY PFNGLENDPROC glEnd;
OPENGL_API_ENTRY PFNGLINDEXDPROC glIndexd;
OPENGL_API_ENTRY PFNGLINDEXDVPROC glIndexdv;
OPENGL_API_ENTRY PFNGLINDEXFPROC glIndexf;
OPENGL_API_ENTRY PFNGLINDEXFVPROC glIndexfv;
OPENGL_API_ENTRY PFNGLINDEXIPROC glIndexi;
OPENGL_API_ENTRY PFNGLINDEXIVPROC glIndexiv;
OPENGL_API_ENTRY PFNGLINDEXSPROC glIndexs;
OPENGL_API_ENTRY PFNGLINDEXSVPROC glIndexsv;
OPENGL_API_ENTRY PFNGLNORMAL3BPROC glNormal3b;
OPENGL_API_ENTRY PFNGLNORMAL3BVPROC glNormal3bv;
OPENGL_API_ENTRY PFNGLNORMAL3DPROC glNormal3d;
OPENGL_API_ENTRY PFNGLNORMAL3DVPROC glNormal3dv;
OPENGL_API_ENTRY PFNGLNORMAL3FPROC glNormal3f;
OPENGL_API_ENTRY PFNGLNORMAL3FVPROC glNormal3fv;
OPENGL_API_ENTRY PFNGLNORMAL3IPROC glNormal3i;
OPENGL_API_ENTRY PFNGLNORMAL3IVPROC glNormal3iv;
OPENGL_API_ENTRY PFNGLNORMAL3SPROC glNormal3s;
OPENGL_API_ENTRY PFNGLNORMAL3SVPROC glNormal3sv;
OPENGL_API_ENTRY PFNGLRASTERPOS2DPROC glRasterPos2d;
OPENGL_API_ENTRY PFNGLRASTERPOS2DVPROC glRasterPos2dv;
OPENGL_API_ENTRY PFNGLRASTERPOS2FPROC glRasterPos2f;
OPENGL_API_ENTRY PFNGLRASTERPOS2FVPROC glRasterPos2fv;
OPENGL_API_ENTRY PFNGLRASTERPOS2IPROC glRasterPos2i;
OPENGL_API_ENTRY PFNGLRASTERPOS2IVPROC glRasterPos2iv;
OPENGL_API_ENTRY PFNGLRASTERPOS2SPROC glRasterPos2s;
OPENGL_API_ENTRY PFNGLRASTERPOS2SVPROC glRasterPos2sv;
OPENGL_API_ENTRY PFNGLRASTERPOS3DPROC glRasterPos3d;
OPENGL_API_ENTRY PFNGLRASTERPOS3DVPROC glRasterPos3dv;
OPENGL_API_ENTRY PFNGLRASTERPOS3FPROC glRasterPos3f;
OPENGL_API_ENTRY PFNGLRASTERPOS3FVPROC glRasterPos3fv;
OPENGL_API_ENTRY PFNGLRASTERPOS3IPROC glRasterPos3i;
OPENGL_API_ENTRY PFNGLRASTERPOS3IVPROC glRasterPos3iv;
OPENGL_API_ENTRY PFNGLRASTERPOS3SPROC glRasterPos3s;
OPENGL_API_ENTRY PFNGLRASTERPOS3SVPROC glRasterPos3sv;
OPENGL_API_ENTRY PFNGLRASTERPOS4DPROC glRasterPos4d;
OPENGL_API_ENTRY PFNGLRASTERPOS4DVPROC glRasterPos4dv;
OPENGL_API_ENTRY PFNGLRASTERPOS4FPROC glRasterPos4f;
OPENGL_API_ENTRY PFNGLRASTERPOS4FVPROC glRasterPos4fv;
OPENGL_API_ENTRY PFNGLRASTERPOS4IPROC glRasterPos4i;
OPENGL_API_ENTRY PFNGLRASTERPOS4IVPROC glRasterPos4iv;
OPENGL_API_ENTRY PFNGLRASTERPOS4SPROC glRasterPos4s;
OPENGL_API_ENTRY PFNGLRASTERPOS4SVPROC glRasterPos4sv;
OPENGL_API_ENTRY PFNGLRECTDPROC glRectd;
OPENGL_API_ENTRY PFNGLRECTDVPROC glRectdv;
OPENGL_API_ENTRY PFNGLRECTFPROC glRectf;
OPENGL_API_ENTRY PFNGLRECTFVPROC glRectfv;
OPENGL_API_ENTRY PFNGLRECTIPROC glRecti;
OPENGL_API_ENTRY PFNGLRECTIVPROC glRectiv;
OPENGL_API_ENTRY PFNGLRECTSPROC glRects;
OPENGL_API_ENTRY PFNGLRECTSVPROC glRectsv;
OPENGL_API_ENTRY PFNGLTEXCOORD1DPROC glTexCoord1d;
OPENGL_API_ENTRY PFNGLTEXCOORD1DVPROC glTexCoord1dv;
OPENGL_API_ENTRY PFNGLTEXCOORD1FPROC glTexCoord1f;
OPENGL_API_ENTRY PFNGLTEXCOORD1FVPROC glTexCoord1fv;
OPENGL_API_ENTRY PFNGLTEXCOORD1IPROC glTexCoord1i;
OPENGL_API_ENTRY PFNGLTEXCOORD1IVPROC glTexCoord1iv;
OPENGL_API_ENTRY PFNGLTEXCOORD1SPROC glTexCoord1s;
OPENGL_API_ENTRY PFNGLTEXCOORD1SVPROC glTexCoord1sv;
OPENGL_API_ENTRY PFNGLTEXCOORD2DPROC glTexCoord2d;
OPENGL_API_ENTRY PFNGLTEXCOORD2DVPROC glTexCoord2dv;
OPENGL_API_ENTRY PFNGLTEXCOORD2FPROC glTexCoord2f;
OPENGL_API_ENTRY PFNGLTEXCOORD2FVPROC glTexCoord2fv;
OPENGL_API_ENTRY PFNGLTEXCOORD2IPROC glTexCoord2i;
OPENGL_API_ENTRY PFNGLTEXCOORD2IVPROC glTexCoord2iv;
OPENGL_API_ENTRY PFNGLTEXCOORD2SPROC glTexCoord2s;
OPENGL_API_ENTRY PFNGLTEXCOORD2SVPROC glTexCoord2sv;
OPENGL_API_ENTRY PFNGLTEXCOORD3DPROC glTexCoord3d;
OPENGL_API_ENTRY PFNGLTEXCOORD3DVPROC glTexCoord3dv;
OPENGL_API_ENTRY PFNGLTEXCOORD3FPROC glTexCoord3f;
OPENGL_API_ENTRY PFNGLTEXCOORD3FVPROC glTexCoord3fv;
OPENGL_API_ENTRY PFNGLTEXCOORD3IPROC glTexCoord3i;
OPENGL_API_ENTRY PFNGLTEXCOORD3IVPROC glTexCoord3iv;
OPENGL_API_ENTRY PFNGLTEXCOORD3SPROC glTexCoord3s;
OPENGL_API_ENTRY PFNGLTEXCOORD3SVPROC glTexCoord3sv;
OPENGL_API_ENTRY PFNGLTEXCOORD4DPROC glTexCoord4d;
OPENGL_API_ENTRY PFNGLTEXCOORD4DVPROC glTexCoord4dv;
OPENGL_API_ENTRY PFNGLTEXCOORD4FPROC glTexCoord4f;
OPENGL_API_ENTRY PFNGLTEXCOORD4FVPROC glTexCoord4fv;
OPENGL_API_ENTRY PFNGLTEXCOORD4IPROC glTexCoord4i;
OPENGL_API_ENTRY PFNGLTEXCOORD4IVPROC glTexCoord4iv;
OPENGL_API_ENTRY PFNGLTEXCOORD4SPROC glTexCoord4s;
OPENGL_API_ENTRY PFNGLTEXCOORD4SVPROC glTexCoord4sv;
OPENGL_API_ENTRY PFNGLVERTEX2DPROC glVertex2d;
OPENGL_API_ENTRY PFNGLVERTEX2DVPROC glVertex2dv;
OPENGL_API_ENTRY PFNGLVERTEX2FPROC glVertex2f;
OPENGL_API_ENTRY PFNGLVERTEX2FVPROC glVertex2fv;
OPENGL_API_ENTRY PFNGLVERTEX2IPROC glVertex2i;
OPENGL_API_ENTRY PFNGLVERTEX2IVPROC glVertex2iv;
OPENGL_API_ENTRY PFNGLVERTEX2SPROC glVertex2s;
OPENGL_API_ENTRY PFNGLVERTEX2SVPROC glVertex2sv;
OPENGL_API_ENTRY PFNGLVERTEX3DPROC glVertex3d;
OPENGL_API_ENTRY PFNGLVERTEX3DVPROC glVertex3dv;
OPENGL_API_ENTRY PFNGLVERTEX3FPROC glVertex3f;
OPENGL_API_ENTRY PFNGLVERTEX3FVPROC glVertex3fv;
OPENGL_API_ENTRY PFNGLVERTEX3IPROC glVertex3i;
OPENGL_API_ENTRY PFNGLVERTEX3IVPROC glVertex3iv;
OPENGL_API_ENTRY PFNGLVERTEX3SPROC glVertex3s;
OPENGL_API_ENTRY PFNGLVERTEX3SVPROC glVertex3sv;
OPENGL_API_ENTRY PFNGLVERTEX4DPROC glVertex4d;
OPENGL_API_ENTRY PFNGLVERTEX4DVPROC glVertex4dv;
OPENGL_API_ENTRY PFNGLVERTEX4FPROC glVertex4f;
OPENGL_API_ENTRY PFNGLVERTEX4FVPROC glVertex4fv;
OPENGL_API_ENTRY PFNGLVERTEX4IPROC glVertex4i;
OPENGL_API_ENTRY PFNGLVERTEX4IVPROC glVertex4iv;
OPENGL_API_ENTRY PFNGLVERTEX4SPROC glVertex4s;
OPENGL_API_ENTRY PFNGLVERTEX4SVPROC glVertex4sv;
OPENGL_API_ENTRY PFNGLCLIPPLANEPROC glClipPlane;
OPENGL_API_ENTRY PFNGLCOLORMATERIALPROC glColorMaterial;
OPENGL_API_ENTRY PFNGLFOGFPROC glFogf;
OPENGL_API_ENTRY PFNGLFOGFVPROC glFogfv;
OPENGL_API_ENTRY PFNGLFOGIPROC glFogi;
OPENGL_API_ENTRY PFNGLFOGIVPROC glFogiv;
OPENGL_API_ENTRY PFNGLLIGHTFPROC glLightf;
OPENGL_API_ENTRY PFNGLLIGHTFVPROC glLightfv;
OPENGL_API_ENTRY PFNGLLIGHTIPROC glLighti;
OPENGL_API_ENTRY PFNGLLIGHTIVPROC glLightiv;
OPENGL_API_ENTRY PFNGLLIGHTMODELFPROC glLightModelf;
OPENGL_API_ENTRY PFNGLLIGHTMODELFVPROC glLightModelfv;
OPENGL_API_ENTRY PFNGLLIGHTMODELIPROC glLightModeli;
OPENGL_API_ENTRY PFNGLLIGHTMODELIVPROC glLightModeliv;
OPENGL_API_ENTRY PFNGLLINESTIPPLEPROC glLineStipple;
OPENGL_API_ENTRY PFNGLMATERIALFPROC glMaterialf;
OPENGL_API_ENTRY PFNGLMATERIALFVPROC glMaterialfv;
OPENGL_API_ENTRY PFNGLMATERIALIPROC glMateriali;
OPENGL_API_ENTRY PFNGLMATERIALIVPROC glMaterialiv;
OPENGL_API_ENTRY PFNGLPOLYGONSTIPPLEPROC glPolygonStipple;
OPENGL_API_ENTRY PFNGLSHADEMODELPROC glShadeModel;
OPENGL_API_ENTRY PFNGLTEXENVFPROC glTexEnvf;
OPENGL_API_ENTRY PFNGLTEXENVFVPROC glTexEnvfv;
OPENGL_API_ENTRY PFNGLTEXENVIPROC glTexEnvi;
OPENGL_API_ENTRY PFNGLTEXENVIVPROC glTexEnviv;
OPENGL_API_ENTRY PFNGLTEXGENDPROC glTexGend;
OPENGL_API_ENTRY PFNGLTEXGENDVPROC glTexGendv;
OPENGL_API_ENTRY PFNGLTEXGENFPROC glTexGenf;
OPENGL_API_ENTRY PFNGLTEXGENFVPROC glTexGenfv;
OPENGL_API_ENTRY PFNGLTEXGENIPROC glTexGeni;
OPENGL_API_ENTRY PFNGLTEXGENIVPROC glTexGeniv;
OPENGL_API_ENTRY PFNGLFEEDBACKBUFFERPROC glFeedbackBuffer;
OPENGL_API_ENTRY PFNGLSELECTBUFFERPROC glSelectBuffer;
OPENGL_API_ENTRY PFNGLRENDERMODEPROC glRenderMode;
OPENGL_API_ENTRY PFNGLINITNAMESPROC glInitNames;
OPENGL_API_ENTRY PFNGLLOADNAMEPROC glLoadName;
OPENGL_API_ENTRY PFNGLPASSTHROUGHPROC glPassThrough;
OPENGL_API_ENTRY PFNGLPOPNAMEPROC glPopName;
OPENGL_API_ENTRY PFNGLPUSHNAMEPROC glPushName;
OPENGL_API_ENTRY PFNGLCLEARACCUMPROC glClearAccum;
OPENGL_API_ENTRY PFNGLCLEARINDEXPROC glClearIndex;
OPENGL_API_ENTRY PFNGLINDEXMASKPROC glIndexMask;
OPENGL_API_ENTRY PFNGLACCUMPROC glAccum;
OPENGL_API_ENTRY PFNGLPOPATTRIBPROC glPopAttrib;
OPENGL_API_ENTRY PFNGLPUSHATTRIBPROC glPushAttrib;
OPENGL_API_ENTRY PFNGLMAP1DPROC glMap1d;
OPENGL_API_ENTRY PFNGLMAP1FPROC glMap1f;
OPENGL_API_ENTRY PFNGLMAP2DPROC glMap2d;
OPENGL_API_ENTRY PFNGLMAP2FPROC glMap2f;
OPENGL_API_ENTRY PFNGLMAPGRID1DPROC glMapGrid1d;
OPENGL_API_ENTRY PFNGLMAPGRID1FPROC glMapGrid1f;
OPENGL_API_ENTRY PFNGLMAPGRID2DPROC glMapGrid2d;
OPENGL_API_ENTRY PFNGLMAPGRID2FPROC glMapGrid2f;
OPENGL_API_ENTRY PFNGLEVALCOORD1DPROC glEvalCoord1d;
OPENGL_API_ENTRY PFNGLEVALCOORD1DVPROC glEvalCoord1dv;
OPENGL_API_ENTRY PFNGLEVALCOORD1FPROC glEvalCoord1f;
OPENGL_API_ENTRY PFNGLEVALCOORD1FVPROC glEvalCoord1fv;
OPENGL_API_ENTRY PFNGLEVALCOORD2DPROC glEvalCoord2d;
OPENGL_API_ENTRY PFNGLEVALCOORD2DVPROC glEvalCoord2dv;
OPENGL_API_ENTRY PFNGLEVALCOORD2FPROC glEvalCoord2f;
OPENGL_API_ENTRY PFNGLEVALCOORD2FVPROC glEvalCoord2fv;
OPENGL_API_ENTRY PFNGLEVALMESH1PROC glEvalMesh1;
OPENGL_API_ENTRY PFNGLEVALPOINT1PROC glEvalPoint1;
OPENGL_API_ENTRY PFNGLEVALMESH2PROC glEvalMesh2;
OPENGL_API_ENTRY PFNGLEVALPOINT2PROC glEvalPoint2;
OPENGL_API_ENTRY PFNGLALPHAFUNCPROC glAlphaFunc;
OPENGL_API_ENTRY PFNGLPIXELZOOMPROC glPixelZoom;
OPENGL_API_ENTRY PFNGLPIXELTRANSFERFPROC glPixelTransferf;
OPENGL_API_ENTRY PFNGLPIXELTRANSFERIPROC glPixelTransferi;
OPENGL_API_ENTRY PFNGLPIXELMAPFVPROC glPixelMapfv;
OPENGL_API_ENTRY PFNGLPIXELMAPUIVPROC glPixelMapuiv;
OPENGL_API_ENTRY PFNGLPIXELMAPUSVPROC glPixelMapusv;
OPENGL_API_ENTRY PFNGLCOPYPIXELSPROC glCopyPixels;
OPENGL_API_ENTRY PFNGLDRAWPIXELSPROC glDrawPixels;
OPENGL_API_ENTRY PFNGLGETCLIPPLANEPROC glGetClipPlane;
OPENGL_API_ENTRY PFNGLGETLIGHTFVPROC glGetLightfv;
OPENGL_API_ENTRY PFNGLGETLIGHTIVPROC glGetLightiv;
OPENGL_API_ENTRY PFNGLGETMAPDVPROC glGetMapdv;
OPENGL_API_ENTRY PFNGLGETMAPFVPROC glGetMapfv;
OPENGL_API_ENTRY PFNGLGETMAPIVPROC glGetMapiv;
OPENGL_API_ENTRY PFNGLGETMATERIALFVPROC glGetMaterialfv;
OPENGL_API_ENTRY PFNGLGETMATERIALIVPROC glGetMaterialiv;
OPENGL_API_ENTRY PFNGLGETPIXELMAPFVPROC glGetPixelMapfv;
OPENGL_API_ENTRY PFNGLGETPIXELMAPUIVPROC glGetPixelMapuiv;
OPENGL_API_ENTRY PFNGLGETPIXELMAPUSVPROC glGetPixelMapusv;
OPENGL_API_ENTRY PFNGLGETPOLYGONSTIPPLEPROC glGetPolygonStipple;
OPENGL_API_ENTRY PFNGLGETTEXENVFVPROC glGetTexEnvfv;
OPENGL_API_ENTRY PFNGLGETTEXENVIVPROC glGetTexEnviv;
OPENGL_API_ENTRY PFNGLGETTEXGENDVPROC glGetTexGendv;
OPENGL_API_ENTRY PFNGLGETTEXGENFVPROC glGetTexGenfv;
OPENGL_API_ENTRY PFNGLGETTEXGENIVPROC glGetTexGeniv;
OPENGL_API_ENTRY PFNGLISLISTPROC glIsList;
OPENGL_API_ENTRY PFNGLFRUSTUMPROC glFrustum;
OPENGL_API_ENTRY PFNGLLOADIDENTITYPROC glLoadIdentity;
OPENGL_API_ENTRY PFNGLLOADMATRIXFPROC glLoadMatrixf;
OPENGL_API_ENTRY PFNGLLOADMATRIXDPROC glLoadMatrixd;
OPENGL_API_ENTRY PFNGLMATRIXMODEPROC glMatrixMode;
OPENGL_API_ENTRY PFNGLMULTMATRIXFPROC glMultMatrixf;
OPENGL_API_ENTRY PFNGLMULTMATRIXDPROC glMultMatrixd;
OPENGL_API_ENTRY PFNGLORTHOPROC glOrtho;
OPENGL_API_ENTRY PFNGLPOPMATRIXPROC glPopMatrix;
OPENGL_API_ENTRY PFNGLPUSHMATRIXPROC glPushMatrix;
OPENGL_API_ENTRY PFNGLROTATEDPROC glRotated;
OPENGL_API_ENTRY PFNGLROTATEFPROC glRotatef;
OPENGL_API_ENTRY PFNGLSCALEDPROC glScaled;
OPENGL_API_ENTRY PFNGLSCALEFPROC glScalef;
OPENGL_API_ENTRY PFNGLTRANSLATEDPROC glTranslated;
OPENGL_API_ENTRY PFNGLTRANSLATEFPROC glTranslatef;

/********************************************************************************************************************************
														OpenGl 1.1
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (OPENGL_API_CALL PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices);
typedef void (OPENGL_API_CALL PFNGLGETPOINTERVPROC)(GLenum pname, void** params);
typedef void (OPENGL_API_CALL PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (OPENGL_API_CALL PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (OPENGL_API_CALL PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (OPENGL_API_CALL PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (OPENGL_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
typedef void (OPENGL_API_CALL PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
typedef void (OPENGL_API_CALL PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (OPENGL_API_CALL PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint* textures);
typedef void (OPENGL_API_CALL PFNGLGENTEXTURESPROC)(GLsizei n, GLuint* textures);
typedef GLboolean(OPENGL_API_CALL PFNGLISTEXTUREPROC)(GLuint texture);
typedef void (OPENGL_API_CALL PFNGLARRAYELEMENTPROC)(GLint i);
typedef void (OPENGL_API_CALL PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void (OPENGL_API_CALL PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void (OPENGL_API_CALL PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void* pointer);
typedef void (OPENGL_API_CALL PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void (OPENGL_API_CALL PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
typedef void (OPENGL_API_CALL PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void* pointer);
typedef void (OPENGL_API_CALL PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
typedef void (OPENGL_API_CALL PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void (OPENGL_API_CALL PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef GLboolean(OPENGL_API_CALL PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint* textures, GLboolean* residences);
typedef void (OPENGL_API_CALL PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint* textures, const GLfloat* priorities);
typedef void (OPENGL_API_CALL PFNGLINDEXUBPROC)(GLubyte c);
typedef void (OPENGL_API_CALL PFNGLINDEXUBVPROC)(const GLubyte* c);
typedef void (OPENGL_API_CALL PFNGLPOPCLIENTATTRIBPROC)(void);
typedef void (OPENGL_API_CALL PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);

OPENGL_API_ENTRY PFNGLDRAWARRAYSPROC glDrawArrays;
OPENGL_API_ENTRY PFNGLDRAWELEMENTSPROC glDrawElements;
OPENGL_API_ENTRY PFNGLGETPOINTERVPROC glGetPointerv;
OPENGL_API_ENTRY PFNGLPOLYGONOFFSETPROC glPolygonOffset;
OPENGL_API_ENTRY PFNGLCOPYTEXIMAGE1DPROC glCopyTexImage1D;
OPENGL_API_ENTRY PFNGLCOPYTEXIMAGE2DPROC glCopyTexImage2D;
OPENGL_API_ENTRY PFNGLCOPYTEXSUBIMAGE1DPROC glCopyTexSubImage1D;
OPENGL_API_ENTRY PFNGLCOPYTEXSUBIMAGE2DPROC glCopyTexSubImage2D;
OPENGL_API_ENTRY PFNGLTEXSUBIMAGE1DPROC glTexSubImage1D;
OPENGL_API_ENTRY PFNGLTEXSUBIMAGE2DPROC glTexSubImage2D;
OPENGL_API_ENTRY PFNGLBINDTEXTUREPROC glBindTexture;
OPENGL_API_ENTRY PFNGLDELETETEXTURESPROC glDeleteTextures;
OPENGL_API_ENTRY PFNGLGENTEXTURESPROC glGenTextures;
OPENGL_API_ENTRY PFNGLISTEXTUREPROC glIsTexture;
OPENGL_API_ENTRY PFNGLARRAYELEMENTPROC glArrayElement;
OPENGL_API_ENTRY PFNGLCOLORPOINTERPROC glColorPointer;
OPENGL_API_ENTRY PFNGLDISABLECLIENTSTATEPROC glDisableClientState;
OPENGL_API_ENTRY PFNGLEDGEFLAGPOINTERPROC glEdgeFlagPointer;
OPENGL_API_ENTRY PFNGLENABLECLIENTSTATEPROC glEnableClientState;
OPENGL_API_ENTRY PFNGLINDEXPOINTERPROC glIndexPointer;
OPENGL_API_ENTRY PFNGLINTERLEAVEDARRAYSPROC glInterleavedArrays;
OPENGL_API_ENTRY PFNGLNORMALPOINTERPROC glNormalPointer;
OPENGL_API_ENTRY PFNGLTEXCOORDPOINTERPROC glTexCoordPointer;
OPENGL_API_ENTRY PFNGLVERTEXPOINTERPROC glVertexPointer;
OPENGL_API_ENTRY PFNGLARETEXTURESRESIDENTPROC glAreTexturesResident;
OPENGL_API_ENTRY PFNGLPRIORITIZETEXTURESPROC glPrioritizeTextures;
OPENGL_API_ENTRY PFNGLINDEXUBPROC glIndexub;
OPENGL_API_ENTRY PFNGLINDEXUBVPROC glIndexubv;
OPENGL_API_ENTRY PFNGLPOPCLIENTATTRIBPROC glPopClientAttrib;
OPENGL_API_ENTRY PFNGLPUSHCLIENTATTRIBPROC glPushClientAttrib;

/********************************************************************************************************************************
														OpenGl 1.2
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);
typedef void (OPENGL_API_CALL PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
typedef void (OPENGL_API_CALL PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
typedef void (OPENGL_API_CALL PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);

OPENGL_API_ENTRY PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
OPENGL_API_ENTRY PFNGLTEXIMAGE3DPROC glTexImage3D;
OPENGL_API_ENTRY PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
OPENGL_API_ENTRY PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;

/********************************************************************************************************************************
														OpenGl 1.3
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (OPENGL_API_CALL PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (OPENGL_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
typedef void (OPENGL_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
typedef void (OPENGL_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
typedef void (OPENGL_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
typedef void (OPENGL_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
typedef void (OPENGL_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
typedef void (OPENGL_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void* img);
typedef void (OPENGL_API_CALL PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat* m);
typedef void (OPENGL_API_CALL PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble* m);
typedef void (OPENGL_API_CALL PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat* m);
typedef void (OPENGL_API_CALL PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble* m);

OPENGL_API_ENTRY PFNGLACTIVETEXTUREPROC glActiveTexture;
OPENGL_API_ENTRY PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
OPENGL_API_ENTRY PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
OPENGL_API_ENTRY PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
OPENGL_API_ENTRY PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
OPENGL_API_ENTRY PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
OPENGL_API_ENTRY PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
OPENGL_API_ENTRY PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
OPENGL_API_ENTRY PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;
OPENGL_API_ENTRY PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s;
OPENGL_API_ENTRY PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv;
OPENGL_API_ENTRY PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf;
OPENGL_API_ENTRY PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd;
OPENGL_API_ENTRY PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf;
OPENGL_API_ENTRY PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd;

/********************************************************************************************************************************
														OpenGl 1.4
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (OPENGL_API_CALL PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount);
typedef void (OPENGL_API_CALL PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount);
typedef void (OPENGL_API_CALL PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint* params);
typedef void (OPENGL_API_CALL PFNGLFOGCOORDFPROC)(GLfloat coord);
typedef void (OPENGL_API_CALL PFNGLFOGCOORDFVPROC)(const GLfloat* coord);
typedef void (OPENGL_API_CALL PFNGLFOGCOORDDPROC)(GLdouble coord);
typedef void (OPENGL_API_CALL PFNGLFOGCOORDDVPROC)(const GLdouble* coord);
typedef void (OPENGL_API_CALL PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte* v);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte* v);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint* v);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLOR3USVPROC)(const GLushort* v);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS2DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS2FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS2IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS2SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS3DVPROC)(const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS3FVPROC)(const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS3IVPROC)(const GLint* v);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (OPENGL_API_CALL PFNGLWINDOWPOS3SVPROC)(const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (OPENGL_API_CALL PFNGLBLENDEQUATIONPROC)(GLenum mode);

OPENGL_API_ENTRY PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
OPENGL_API_ENTRY PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
OPENGL_API_ENTRY PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
OPENGL_API_ENTRY PFNGLPOINTPARAMETERFPROC glPointParameterf;
OPENGL_API_ENTRY PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
OPENGL_API_ENTRY PFNGLPOINTPARAMETERIPROC glPointParameteri;
OPENGL_API_ENTRY PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
OPENGL_API_ENTRY PFNGLFOGCOORDFPROC glFogCoordf;
OPENGL_API_ENTRY PFNGLFOGCOORDFVPROC glFogCoordfv;
OPENGL_API_ENTRY PFNGLFOGCOORDDPROC glFogCoordd;
OPENGL_API_ENTRY PFNGLFOGCOORDDVPROC glFogCoorddv;
OPENGL_API_ENTRY PFNGLFOGCOORDPOINTERPROC glFogCoordPointer;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us;
OPENGL_API_ENTRY PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv;
OPENGL_API_ENTRY PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer;
OPENGL_API_ENTRY PFNGLWINDOWPOS2DPROC glWindowPos2d;
OPENGL_API_ENTRY PFNGLWINDOWPOS2DVPROC glWindowPos2dv;
OPENGL_API_ENTRY PFNGLWINDOWPOS2FPROC glWindowPos2f;
OPENGL_API_ENTRY PFNGLWINDOWPOS2FVPROC glWindowPos2fv;
OPENGL_API_ENTRY PFNGLWINDOWPOS2IPROC glWindowPos2i;
OPENGL_API_ENTRY PFNGLWINDOWPOS2IVPROC glWindowPos2iv;
OPENGL_API_ENTRY PFNGLWINDOWPOS2SPROC glWindowPos2s;
OPENGL_API_ENTRY PFNGLWINDOWPOS2SVPROC glWindowPos2sv;
OPENGL_API_ENTRY PFNGLWINDOWPOS3DPROC glWindowPos3d;
OPENGL_API_ENTRY PFNGLWINDOWPOS3DVPROC glWindowPos3dv;
OPENGL_API_ENTRY PFNGLWINDOWPOS3FPROC glWindowPos3f;
OPENGL_API_ENTRY PFNGLWINDOWPOS3FVPROC glWindowPos3fv;
OPENGL_API_ENTRY PFNGLWINDOWPOS3IPROC glWindowPos3i;
OPENGL_API_ENTRY PFNGLWINDOWPOS3IVPROC glWindowPos3iv;
OPENGL_API_ENTRY PFNGLWINDOWPOS3SPROC glWindowPos3s;
OPENGL_API_ENTRY PFNGLWINDOWPOS3SVPROC glWindowPos3sv;
OPENGL_API_ENTRY PFNGLBLENDCOLORPROC glBlendColor;
OPENGL_API_ENTRY PFNGLBLENDEQUATIONPROC glBlendEquation;

/********************************************************************************************************************************
														OpenGl 1.5
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLGENQUERIESPROC)(GLsizei n, GLuint* ids);
typedef void (OPENGL_API_CALL PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint* ids);
typedef GLboolean(OPENGL_API_CALL PFNGLISQUERYPROC)(GLuint id);
typedef void (OPENGL_API_CALL PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (OPENGL_API_CALL PFNGLENDQUERYPROC)(GLenum target);
typedef void (OPENGL_API_CALL PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint* params);
typedef void (OPENGL_API_CALL PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (OPENGL_API_CALL PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint* buffers);
typedef void (OPENGL_API_CALL PFNGLGENBUFFERSPROC)(GLsizei n, GLuint* buffers);
typedef GLboolean(OPENGL_API_CALL PFNGLISBUFFERPROC)(GLuint buffer);
typedef void (OPENGL_API_CALL PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void* data, GLenum usage);
typedef void (OPENGL_API_CALL PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
typedef void (OPENGL_API_CALL PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
typedef void* (OPENGL_API_CALL PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef GLboolean(OPENGL_API_CALL PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef void (OPENGL_API_CALL PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void** params);

OPENGL_API_ENTRY PFNGLGENQUERIESPROC glGenQueries;
OPENGL_API_ENTRY PFNGLDELETEQUERIESPROC glDeleteQueries;
OPENGL_API_ENTRY PFNGLISQUERYPROC glIsQuery;
OPENGL_API_ENTRY PFNGLBEGINQUERYPROC glBeginQuery;
OPENGL_API_ENTRY PFNGLENDQUERYPROC glEndQuery;
OPENGL_API_ENTRY PFNGLGETQUERYIVPROC glGetQueryiv;
OPENGL_API_ENTRY PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
OPENGL_API_ENTRY PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
OPENGL_API_ENTRY PFNGLBINDBUFFERPROC glBindBuffer;
OPENGL_API_ENTRY PFNGLDELETEBUFFERSPROC glDeleteBuffers;
OPENGL_API_ENTRY PFNGLGENBUFFERSPROC glGenBuffers;
OPENGL_API_ENTRY PFNGLISBUFFERPROC glIsBuffer;
OPENGL_API_ENTRY PFNGLBUFFERDATAPROC glBufferData;
OPENGL_API_ENTRY PFNGLBUFFERSUBDATAPROC glBufferSubData;
OPENGL_API_ENTRY PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
OPENGL_API_ENTRY PFNGLMAPBUFFERPROC glMapBuffer;
OPENGL_API_ENTRY PFNGLUNMAPBUFFERPROC glUnmapBuffer;
OPENGL_API_ENTRY PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
OPENGL_API_ENTRY PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;

/********************************************************************************************************************************
														OpenGl 2.0
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (OPENGL_API_CALL PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum* bufs);
typedef void (OPENGL_API_CALL PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (OPENGL_API_CALL PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (OPENGL_API_CALL PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (OPENGL_API_CALL PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (OPENGL_API_CALL PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar* name);
typedef void (OPENGL_API_CALL PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef GLuint(OPENGL_API_CALL PFNGLCREATEPROGRAMPROC)(void);
typedef GLuint(OPENGL_API_CALL PFNGLCREATESHADERPROC)(GLenum type);
typedef void (OPENGL_API_CALL PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (OPENGL_API_CALL PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (OPENGL_API_CALL PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (OPENGL_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (OPENGL_API_CALL PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (OPENGL_API_CALL PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
typedef void (OPENGL_API_CALL PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
typedef void (OPENGL_API_CALL PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
typedef GLint(OPENGL_API_CALL PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar* name);
typedef void (OPENGL_API_CALL PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void (OPENGL_API_CALL PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void (OPENGL_API_CALL PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
typedef GLint(OPENGL_API_CALL PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar* name);
typedef void (OPENGL_API_CALL PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble* params);
typedef void (OPENGL_API_CALL PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void** pointer);
typedef GLboolean(OPENGL_API_CALL PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean(OPENGL_API_CALL PFNGLISSHADERPROC)(GLuint shader);
typedef void (OPENGL_API_CALL PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (OPENGL_API_CALL PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length);
typedef void (OPENGL_API_CALL PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (OPENGL_API_CALL PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (OPENGL_API_CALL PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (OPENGL_API_CALL PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (OPENGL_API_CALL PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (OPENGL_API_CALL PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (OPENGL_API_CALL PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (OPENGL_API_CALL PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (OPENGL_API_CALL PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (OPENGL_API_CALL PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);

OPENGL_API_ENTRY PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
OPENGL_API_ENTRY PFNGLDRAWBUFFERSPROC glDrawBuffers;
OPENGL_API_ENTRY PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
OPENGL_API_ENTRY PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
OPENGL_API_ENTRY PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
OPENGL_API_ENTRY PFNGLATTACHSHADERPROC glAttachShader;
OPENGL_API_ENTRY PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
OPENGL_API_ENTRY PFNGLCOMPILESHADERPROC glCompileShader;
OPENGL_API_ENTRY PFNGLCREATEPROGRAMPROC glCreateProgram;
OPENGL_API_ENTRY PFNGLCREATESHADERPROC glCreateShader;
OPENGL_API_ENTRY PFNGLDELETEPROGRAMPROC glDeleteProgram;
OPENGL_API_ENTRY PFNGLDELETESHADERPROC glDeleteShader;
OPENGL_API_ENTRY PFNGLDETACHSHADERPROC glDetachShader;
OPENGL_API_ENTRY PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
OPENGL_API_ENTRY PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
OPENGL_API_ENTRY PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
OPENGL_API_ENTRY PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
OPENGL_API_ENTRY PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
OPENGL_API_ENTRY PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
OPENGL_API_ENTRY PFNGLGETPROGRAMIVPROC glGetProgramiv;
OPENGL_API_ENTRY PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
OPENGL_API_ENTRY PFNGLGETSHADERIVPROC glGetShaderiv;
OPENGL_API_ENTRY PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
OPENGL_API_ENTRY PFNGLGETSHADERSOURCEPROC glGetShaderSource;
OPENGL_API_ENTRY PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
OPENGL_API_ENTRY PFNGLGETUNIFORMFVPROC glGetUniformfv;
OPENGL_API_ENTRY PFNGLGETUNIFORMIVPROC glGetUniformiv;
OPENGL_API_ENTRY PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
OPENGL_API_ENTRY PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
OPENGL_API_ENTRY PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
OPENGL_API_ENTRY PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
OPENGL_API_ENTRY PFNGLISPROGRAMPROC glIsProgram;
OPENGL_API_ENTRY PFNGLISSHADERPROC glIsShader;
OPENGL_API_ENTRY PFNGLLINKPROGRAMPROC glLinkProgram;
OPENGL_API_ENTRY PFNGLSHADERSOURCEPROC glShaderSource;
OPENGL_API_ENTRY PFNGLUSEPROGRAMPROC glUseProgram;
OPENGL_API_ENTRY PFNGLUNIFORM1FPROC glUniform1f;
OPENGL_API_ENTRY PFNGLUNIFORM2FPROC glUniform2f;
OPENGL_API_ENTRY PFNGLUNIFORM3FPROC glUniform3f;
OPENGL_API_ENTRY PFNGLUNIFORM4FPROC glUniform4f;
OPENGL_API_ENTRY PFNGLUNIFORM1IPROC glUniform1i;
OPENGL_API_ENTRY PFNGLUNIFORM2IPROC glUniform2i;
OPENGL_API_ENTRY PFNGLUNIFORM3IPROC glUniform3i;
OPENGL_API_ENTRY PFNGLUNIFORM4IPROC glUniform4i;
OPENGL_API_ENTRY PFNGLUNIFORM1FVPROC glUniform1fv;
OPENGL_API_ENTRY PFNGLUNIFORM2FVPROC glUniform2fv;
OPENGL_API_ENTRY PFNGLUNIFORM3FVPROC glUniform3fv;
OPENGL_API_ENTRY PFNGLUNIFORM4FVPROC glUniform4fv;
OPENGL_API_ENTRY PFNGLUNIFORM1IVPROC glUniform1iv;
OPENGL_API_ENTRY PFNGLUNIFORM2IVPROC glUniform2iv;
OPENGL_API_ENTRY PFNGLUNIFORM3IVPROC glUniform3iv;
OPENGL_API_ENTRY PFNGLUNIFORM4IVPROC glUniform4iv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
OPENGL_API_ENTRY PFNGLVALIDATEPROGRAMPROC glValidateProgram;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;

/********************************************************************************************************************************
														OpenGl 2.1
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);

OPENGL_API_ENTRY PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;

/********************************************************************************************************************************
														OpenGl 3.0
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (OPENGL_API_CALL PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean* data);
typedef void (OPENGL_API_CALL PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint* data);
typedef void (OPENGL_API_CALL PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void (OPENGL_API_CALL PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef GLboolean(OPENGL_API_CALL PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef void (OPENGL_API_CALL PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void (OPENGL_API_CALL PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef void (OPENGL_API_CALL PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (OPENGL_API_CALL PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (OPENGL_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode);
typedef void (OPENGL_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
typedef void (OPENGL_API_CALL PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void (OPENGL_API_CALL PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void (OPENGL_API_CALL PFNGLENDCONDITIONALRENDERPROC)(void);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void (OPENGL_API_CALL PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint* params);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort* v);
typedef void (OPENGL_API_CALL PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint* params);
typedef void (OPENGL_API_CALL PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar* name);
typedef GLint(OPENGL_API_CALL PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar* name);
typedef void (OPENGL_API_CALL PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void (OPENGL_API_CALL PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (OPENGL_API_CALL PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (OPENGL_API_CALL PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (OPENGL_API_CALL PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint* params);
typedef void (OPENGL_API_CALL PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint* params);
typedef void (OPENGL_API_CALL PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint* value);
typedef void (OPENGL_API_CALL PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef const GLubyte* (OPENGL_API_CALL PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef GLboolean(OPENGL_API_CALL PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef void (OPENGL_API_CALL PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (OPENGL_API_CALL PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint* renderbuffers);
typedef void (OPENGL_API_CALL PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
typedef void (OPENGL_API_CALL PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef GLboolean(OPENGL_API_CALL PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef void (OPENGL_API_CALL PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (OPENGL_API_CALL PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint* framebuffers);
typedef void (OPENGL_API_CALL PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
typedef GLenum(OPENGL_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef void (OPENGL_API_CALL PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (OPENGL_API_CALL PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (OPENGL_API_CALL PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (OPENGL_API_CALL PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (OPENGL_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (OPENGL_API_CALL PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (OPENGL_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void* (OPENGL_API_CALL PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (OPENGL_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (OPENGL_API_CALL PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (OPENGL_API_CALL PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint* arrays);
typedef void (OPENGL_API_CALL PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
typedef GLboolean(OPENGL_API_CALL PFNGLISVERTEXARRAYPROC)(GLuint array);

OPENGL_API_ENTRY PFNGLCOLORMASKIPROC glColorMaski;
OPENGL_API_ENTRY PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
OPENGL_API_ENTRY PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
OPENGL_API_ENTRY PFNGLENABLEIPROC glEnablei;
OPENGL_API_ENTRY PFNGLDISABLEIPROC glDisablei;
OPENGL_API_ENTRY PFNGLISENABLEDIPROC glIsEnabledi;
OPENGL_API_ENTRY PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
OPENGL_API_ENTRY PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
OPENGL_API_ENTRY PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
OPENGL_API_ENTRY PFNGLBINDBUFFERBASEPROC glBindBufferBase;
OPENGL_API_ENTRY PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
OPENGL_API_ENTRY PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
OPENGL_API_ENTRY PFNGLCLAMPCOLORPROC glClampColor;
OPENGL_API_ENTRY PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
OPENGL_API_ENTRY PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
OPENGL_API_ENTRY PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
OPENGL_API_ENTRY PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
OPENGL_API_ENTRY PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
OPENGL_API_ENTRY PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
OPENGL_API_ENTRY PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
OPENGL_API_ENTRY PFNGLUNIFORM1UIPROC glUniform1ui;
OPENGL_API_ENTRY PFNGLUNIFORM2UIPROC glUniform2ui;
OPENGL_API_ENTRY PFNGLUNIFORM3UIPROC glUniform3ui;
OPENGL_API_ENTRY PFNGLUNIFORM4UIPROC glUniform4ui;
OPENGL_API_ENTRY PFNGLUNIFORM1UIVPROC glUniform1uiv;
OPENGL_API_ENTRY PFNGLUNIFORM2UIVPROC glUniform2uiv;
OPENGL_API_ENTRY PFNGLUNIFORM3UIVPROC glUniform3uiv;
OPENGL_API_ENTRY PFNGLUNIFORM4UIVPROC glUniform4uiv;
OPENGL_API_ENTRY PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
OPENGL_API_ENTRY PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
OPENGL_API_ENTRY PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
OPENGL_API_ENTRY PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
OPENGL_API_ENTRY PFNGLCLEARBUFFERIVPROC glClearBufferiv;
OPENGL_API_ENTRY PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
OPENGL_API_ENTRY PFNGLCLEARBUFFERFVPROC glClearBufferfv;
OPENGL_API_ENTRY PFNGLCLEARBUFFERFIPROC glClearBufferfi;
OPENGL_API_ENTRY PFNGLGETSTRINGIPROC glGetStringi;
OPENGL_API_ENTRY PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
OPENGL_API_ENTRY PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
OPENGL_API_ENTRY PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
OPENGL_API_ENTRY PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
OPENGL_API_ENTRY PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
OPENGL_API_ENTRY PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
OPENGL_API_ENTRY PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
OPENGL_API_ENTRY PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
OPENGL_API_ENTRY PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
OPENGL_API_ENTRY PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
OPENGL_API_ENTRY PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
OPENGL_API_ENTRY PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
OPENGL_API_ENTRY PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
OPENGL_API_ENTRY PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
OPENGL_API_ENTRY PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
OPENGL_API_ENTRY PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
OPENGL_API_ENTRY PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
OPENGL_API_ENTRY PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
OPENGL_API_ENTRY PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
OPENGL_API_ENTRY PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
OPENGL_API_ENTRY PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
OPENGL_API_ENTRY PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
OPENGL_API_ENTRY PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
OPENGL_API_ENTRY PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
OPENGL_API_ENTRY PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
OPENGL_API_ENTRY PFNGLISVERTEXARRAYPROC glIsVertexArray;

/********************************************************************************************************************************
														OpenGl 3.1
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (OPENGL_API_CALL PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount);
typedef void (OPENGL_API_CALL PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (OPENGL_API_CALL PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void (OPENGL_API_CALL PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (OPENGL_API_CALL PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar* const* uniformNames, GLuint* uniformIndices);
typedef void (OPENGL_API_CALL PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
typedef GLuint(OPENGL_API_CALL PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar* uniformBlockName);
typedef void (OPENGL_API_CALL PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
typedef void (OPENGL_API_CALL PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);

OPENGL_API_ENTRY PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
OPENGL_API_ENTRY PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
OPENGL_API_ENTRY PFNGLTEXBUFFERPROC glTexBuffer;
OPENGL_API_ENTRY PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
OPENGL_API_ENTRY PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
OPENGL_API_ENTRY PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
OPENGL_API_ENTRY PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
OPENGL_API_ENTRY PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
OPENGL_API_ENTRY PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
OPENGL_API_ENTRY PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
OPENGL_API_ENTRY PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
OPENGL_API_ENTRY PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;

/********************************************************************************************************************************
														OpenGl 3.2
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex);
typedef void (OPENGL_API_CALL PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex);
typedef void (OPENGL_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex);
typedef void (OPENGL_API_CALL PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount, const GLint* basevertex);
typedef void (OPENGL_API_CALL PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef GLsync(OPENGL_API_CALL PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef GLboolean(OPENGL_API_CALL PFNGLISSYNCPROC)(GLsync sync);
typedef void (OPENGL_API_CALL PFNGLDELETESYNCPROC)(GLsync sync);
typedef GLenum(OPENGL_API_CALL PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (OPENGL_API_CALL PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (OPENGL_API_CALL PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64* data);
typedef void (OPENGL_API_CALL PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei* length, GLint* values);
typedef void (OPENGL_API_CALL PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64* data);
typedef void (OPENGL_API_CALL PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64* params);
typedef void (OPENGL_API_CALL PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (OPENGL_API_CALL PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (OPENGL_API_CALL PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (OPENGL_API_CALL PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat* val);
typedef void (OPENGL_API_CALL PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);

OPENGL_API_ENTRY PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
OPENGL_API_ENTRY PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
OPENGL_API_ENTRY PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
OPENGL_API_ENTRY PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
OPENGL_API_ENTRY PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
OPENGL_API_ENTRY PFNGLFENCESYNCPROC glFenceSync;
OPENGL_API_ENTRY PFNGLISSYNCPROC glIsSync;
OPENGL_API_ENTRY PFNGLDELETESYNCPROC glDeleteSync;
OPENGL_API_ENTRY PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
OPENGL_API_ENTRY PFNGLWAITSYNCPROC glWaitSync;
OPENGL_API_ENTRY PFNGLGETINTEGER64VPROC glGetInteger64v;
OPENGL_API_ENTRY PFNGLGETSYNCIVPROC glGetSynciv;
OPENGL_API_ENTRY PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
OPENGL_API_ENTRY PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
OPENGL_API_ENTRY PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
OPENGL_API_ENTRY PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
OPENGL_API_ENTRY PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
OPENGL_API_ENTRY PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
OPENGL_API_ENTRY PFNGLSAMPLEMASKIPROC glSampleMaski;

/********************************************************************************************************************************
														OpenGl 3.3
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
typedef GLint(OPENGL_API_CALL PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar* name);
typedef void (OPENGL_API_CALL PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint* samplers);
typedef void (OPENGL_API_CALL PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint* samplers);
typedef GLboolean(OPENGL_API_CALL PFNGLISSAMPLERPROC)(GLuint sampler);
typedef void (OPENGL_API_CALL PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void (OPENGL_API_CALL PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint* param);
typedef void (OPENGL_API_CALL PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat* param);
typedef void (OPENGL_API_CALL PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint* param);
typedef void (OPENGL_API_CALL PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint* param);
typedef void (OPENGL_API_CALL PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint* params);
typedef void (OPENGL_API_CALL PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
typedef void (OPENGL_API_CALL PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64* params);
typedef void (OPENGL_API_CALL PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64* params);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
typedef void (OPENGL_API_CALL PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
typedef void (OPENGL_API_CALL PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
typedef void (OPENGL_API_CALL PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
typedef void (OPENGL_API_CALL PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint* coords);
typedef void (OPENGL_API_CALL PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
typedef void (OPENGL_API_CALL PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint* coords);
typedef void (OPENGL_API_CALL PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
typedef void (OPENGL_API_CALL PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint* coords);
typedef void (OPENGL_API_CALL PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
typedef void (OPENGL_API_CALL PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint* coords);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (OPENGL_API_CALL PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
typedef void (OPENGL_API_CALL PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
typedef void (OPENGL_API_CALL PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint* coords);
typedef void (OPENGL_API_CALL PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (OPENGL_API_CALL PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint* color);
typedef void (OPENGL_API_CALL PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
typedef void (OPENGL_API_CALL PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint* color);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (OPENGL_API_CALL PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint* color);

OPENGL_API_ENTRY PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
OPENGL_API_ENTRY PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
OPENGL_API_ENTRY PFNGLGENSAMPLERSPROC glGenSamplers;
OPENGL_API_ENTRY PFNGLDELETESAMPLERSPROC glDeleteSamplers;
OPENGL_API_ENTRY PFNGLISSAMPLERPROC glIsSampler;
OPENGL_API_ENTRY PFNGLBINDSAMPLERPROC glBindSampler;
OPENGL_API_ENTRY PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
OPENGL_API_ENTRY PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
OPENGL_API_ENTRY PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
OPENGL_API_ENTRY PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
OPENGL_API_ENTRY PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
OPENGL_API_ENTRY PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
OPENGL_API_ENTRY PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
OPENGL_API_ENTRY PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
OPENGL_API_ENTRY PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
OPENGL_API_ENTRY PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
OPENGL_API_ENTRY PFNGLQUERYCOUNTERPROC glQueryCounter;
OPENGL_API_ENTRY PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
OPENGL_API_ENTRY PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
OPENGL_API_ENTRY PFNGLVERTEXP2UIPROC glVertexP2ui;
OPENGL_API_ENTRY PFNGLVERTEXP2UIVPROC glVertexP2uiv;
OPENGL_API_ENTRY PFNGLVERTEXP3UIPROC glVertexP3ui;
OPENGL_API_ENTRY PFNGLVERTEXP3UIVPROC glVertexP3uiv;
OPENGL_API_ENTRY PFNGLVERTEXP4UIPROC glVertexP4ui;
OPENGL_API_ENTRY PFNGLVERTEXP4UIVPROC glVertexP4uiv;
OPENGL_API_ENTRY PFNGLTEXCOORDP1UIPROC glTexCoordP1ui;
OPENGL_API_ENTRY PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv;
OPENGL_API_ENTRY PFNGLTEXCOORDP2UIPROC glTexCoordP2ui;
OPENGL_API_ENTRY PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv;
OPENGL_API_ENTRY PFNGLTEXCOORDP3UIPROC glTexCoordP3ui;
OPENGL_API_ENTRY PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv;
OPENGL_API_ENTRY PFNGLTEXCOORDP4UIPROC glTexCoordP4ui;
OPENGL_API_ENTRY PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui;
OPENGL_API_ENTRY PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui;
OPENGL_API_ENTRY PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui;
OPENGL_API_ENTRY PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv;
OPENGL_API_ENTRY PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui;
OPENGL_API_ENTRY PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv;
OPENGL_API_ENTRY PFNGLNORMALP3UIPROC glNormalP3ui;
OPENGL_API_ENTRY PFNGLNORMALP3UIVPROC glNormalP3uiv;
OPENGL_API_ENTRY PFNGLCOLORP3UIPROC glColorP3ui;
OPENGL_API_ENTRY PFNGLCOLORP3UIVPROC glColorP3uiv;
OPENGL_API_ENTRY PFNGLCOLORP4UIPROC glColorP4ui;
OPENGL_API_ENTRY PFNGLCOLORP4UIVPROC glColorP4uiv;
OPENGL_API_ENTRY PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui;
OPENGL_API_ENTRY PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv;

/********************************************************************************************************************************
														OpenGl 4.0
********************************************************************************************************************************/

typedef void (OPENGL_API_CALL PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
typedef void (OPENGL_API_CALL PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
typedef void (OPENGL_API_CALL PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (OPENGL_API_CALL PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (OPENGL_API_CALL PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (OPENGL_API_CALL PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void* indirect);
typedef void (OPENGL_API_CALL PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void* indirect);
typedef void (OPENGL_API_CALL PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
typedef void (OPENGL_API_CALL PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
typedef void (OPENGL_API_CALL PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (OPENGL_API_CALL PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (OPENGL_API_CALL PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble* params);
typedef GLint(OPENGL_API_CALL PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar* name);
typedef GLuint(OPENGL_API_CALL PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar* name);
typedef void (OPENGL_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
typedef void (OPENGL_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
typedef void (OPENGL_API_CALL PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
typedef void (OPENGL_API_CALL PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint* indices);
typedef void (OPENGL_API_CALL PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint* params);
typedef void (OPENGL_API_CALL PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint* values);
typedef void (OPENGL_API_CALL PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
typedef void (OPENGL_API_CALL PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat* values);
typedef void (OPENGL_API_CALL PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
typedef void (OPENGL_API_CALL PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint* ids);
typedef void (OPENGL_API_CALL PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint* ids);
typedef GLboolean(OPENGL_API_CALL PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
typedef void (OPENGL_API_CALL PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
typedef void (OPENGL_API_CALL PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
typedef void (OPENGL_API_CALL PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
typedef void (OPENGL_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
typedef void (OPENGL_API_CALL PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
typedef void (OPENGL_API_CALL PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
typedef void (OPENGL_API_CALL PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint* params);

OPENGL_API_ENTRY PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
OPENGL_API_ENTRY PFNGLBLENDEQUATIONIPROC glBlendEquationi;
OPENGL_API_ENTRY PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
OPENGL_API_ENTRY PFNGLBLENDFUNCIPROC glBlendFunci;
OPENGL_API_ENTRY PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
OPENGL_API_ENTRY PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
OPENGL_API_ENTRY PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
OPENGL_API_ENTRY PFNGLUNIFORM1DPROC glUniform1d;
OPENGL_API_ENTRY PFNGLUNIFORM2DPROC glUniform2d;
OPENGL_API_ENTRY PFNGLUNIFORM3DPROC glUniform3d;
OPENGL_API_ENTRY PFNGLUNIFORM4DPROC glUniform4d;
OPENGL_API_ENTRY PFNGLUNIFORM1DVPROC glUniform1dv;
OPENGL_API_ENTRY PFNGLUNIFORM2DVPROC glUniform2dv;
OPENGL_API_ENTRY PFNGLUNIFORM3DVPROC glUniform3dv;
OPENGL_API_ENTRY PFNGLUNIFORM4DVPROC glUniform4dv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
OPENGL_API_ENTRY PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
OPENGL_API_ENTRY PFNGLGETUNIFORMDVPROC glGetUniformdv;
OPENGL_API_ENTRY PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
OPENGL_API_ENTRY PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
OPENGL_API_ENTRY PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
OPENGL_API_ENTRY PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
OPENGL_API_ENTRY PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
OPENGL_API_ENTRY PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
OPENGL_API_ENTRY PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
OPENGL_API_ENTRY PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
OPENGL_API_ENTRY PFNGLPATCHPARAMETERIPROC glPatchParameteri;
OPENGL_API_ENTRY PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
OPENGL_API_ENTRY PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
OPENGL_API_ENTRY PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
OPENGL_API_ENTRY PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
OPENGL_API_ENTRY PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
OPENGL_API_ENTRY PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
OPENGL_API_ENTRY PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
OPENGL_API_ENTRY PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
OPENGL_API_ENTRY PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
OPENGL_API_ENTRY PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
OPENGL_API_ENTRY PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
OPENGL_API_ENTRY PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;
/********************************************************************************************************************************
														OpenGl 4.1
********************************************************************************************************************************/
typedef void (OPENGL_API_CALL PFNGLRELEASESHADERCOMPILERPROC)(void);
typedef void (OPENGL_API_CALL PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint* shaders, GLenum binaryFormat, const void* binary, GLsizei length);
typedef void (OPENGL_API_CALL PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
typedef void (OPENGL_API_CALL PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void (OPENGL_API_CALL PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef void (OPENGL_API_CALL PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
typedef void (OPENGL_API_CALL PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length);
typedef void (OPENGL_API_CALL PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void (OPENGL_API_CALL PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (OPENGL_API_CALL PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef GLuint(OPENGL_API_CALL PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar* const* strings);
typedef void (OPENGL_API_CALL PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (OPENGL_API_CALL PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint* pipelines);
typedef void (OPENGL_API_CALL PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint* pipelines);
typedef GLboolean(OPENGL_API_CALL PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (OPENGL_API_CALL PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
typedef void (OPENGL_API_CALL PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (OPENGL_API_CALL PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void (OPENGL_API_CALL PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble* params);
typedef void (OPENGL_API_CALL PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (OPENGL_API_CALL PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint* v);
typedef void (OPENGL_API_CALL PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (OPENGL_API_CALL PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat* data);
typedef void (OPENGL_API_CALL PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble* data);

OPENGL_API_ENTRY PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
OPENGL_API_ENTRY PFNGLSHADERBINARYPROC glShaderBinary;
OPENGL_API_ENTRY PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
OPENGL_API_ENTRY PFNGLDEPTHRANGEFPROC glDepthRangef;
OPENGL_API_ENTRY PFNGLCLEARDEPTHFPROC glClearDepthf;
OPENGL_API_ENTRY PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
OPENGL_API_ENTRY PFNGLPROGRAMBINARYPROC glProgramBinary;
OPENGL_API_ENTRY PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
OPENGL_API_ENTRY PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
OPENGL_API_ENTRY PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
OPENGL_API_ENTRY PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
OPENGL_API_ENTRY PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
OPENGL_API_ENTRY PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
OPENGL_API_ENTRY PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
OPENGL_API_ENTRY PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
OPENGL_API_ENTRY PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
OPENGL_API_ENTRY PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
OPENGL_API_ENTRY PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
OPENGL_API_ENTRY PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
OPENGL_API_ENTRY PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
OPENGL_API_ENTRY PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
OPENGL_API_ENTRY PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
OPENGL_API_ENTRY PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
OPENGL_API_ENTRY PFNGLSCISSORARRAYVPROC glScissorArrayv;
OPENGL_API_ENTRY PFNGLSCISSORINDEXEDPROC glScissorIndexed;
OPENGL_API_ENTRY PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
OPENGL_API_ENTRY PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
OPENGL_API_ENTRY PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
OPENGL_API_ENTRY PFNGLGETFLOATI_VPROC glGetFloati_v;
OPENGL_API_ENTRY PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
/********************************************************************************************************************************
														OpenGl 4.2
********************************************************************************************************************************/
typedef void (OPENGL_API_CALL PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void (OPENGL_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLuint baseinstance);
typedef void (OPENGL_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void (OPENGL_API_CALL PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (OPENGL_API_CALL PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
typedef void (OPENGL_API_CALL PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (OPENGL_API_CALL PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (OPENGL_API_CALL PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
typedef void (OPENGL_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);

OPENGL_API_ENTRY PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
OPENGL_API_ENTRY PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
OPENGL_API_ENTRY PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
OPENGL_API_ENTRY PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ;
OPENGL_API_ENTRY PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
OPENGL_API_ENTRY PFNGLBINDIMAGETEXTUREPROC glBindImageTexture;
OPENGL_API_ENTRY PFNGLMEMORYBARRIERPROC glMemoryBarrier;
OPENGL_API_ENTRY PFNGLTEXSTORAGE1DPROC glTexStorage1D;
OPENGL_API_ENTRY PFNGLTEXSTORAGE2DPROC glTexStorage2D;
OPENGL_API_ENTRY PFNGLTEXSTORAGE3DPROC glTexStorage3D;
OPENGL_API_ENTRY PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
OPENGL_API_ENTRY PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;
/********************************************************************************************************************************
														OpenGl 4.3
********************************************************************************************************************************/
typedef void (OPENGL_API_CALL PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data);
typedef void (OPENGL_API_CALL PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
typedef void (OPENGL_API_CALL PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (OPENGL_API_CALL PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
typedef void (OPENGL_API_CALL PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (OPENGL_API_CALL PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64* params);
typedef void (OPENGL_API_CALL PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef void (OPENGL_API_CALL PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
typedef void (OPENGL_API_CALL PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (OPENGL_API_CALL PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
typedef void (OPENGL_API_CALL PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum* attachments);
typedef void (OPENGL_API_CALL PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride);
typedef void (OPENGL_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride);
typedef void (OPENGL_API_CALL PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint* params);
typedef GLuint(OPENGL_API_CALL PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar* name);
typedef void (OPENGL_API_CALL PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
typedef void (OPENGL_API_CALL PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei count, GLsizei* length, GLint* params);
typedef GLint(OPENGL_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar* name);
typedef GLint(OPENGL_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar* name);
typedef void (OPENGL_API_CALL PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void (OPENGL_API_CALL PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (OPENGL_API_CALL PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (OPENGL_API_CALL PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (OPENGL_API_CALL PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void (OPENGL_API_CALL PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (OPENGL_API_CALL PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
typedef void (OPENGL_API_CALL PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
typedef void (OPENGL_API_CALL PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
typedef void (OPENGL_API_CALL PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
typedef void (OPENGL_API_CALL PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void* userParam);
typedef GLuint(OPENGL_API_CALL PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
typedef void (OPENGL_API_CALL PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar* message);
typedef void (OPENGL_API_CALL PFNGLPOPDEBUGGROUPPROC)(void);
typedef void (OPENGL_API_CALL PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
typedef void (OPENGL_API_CALL PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
typedef void (OPENGL_API_CALL PFNGLOBJECTPTRLABELPROC)(const void* ptr, GLsizei length, const GLchar* label);
typedef void (OPENGL_API_CALL PFNGLGETOBJECTPTRLABELPROC)(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);

OPENGL_API_ENTRY PFNGLCLEARBUFFERDATAPROC glClearBufferData;
OPENGL_API_ENTRY PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData;
OPENGL_API_ENTRY PFNGLDISPATCHCOMPUTEPROC glDispatchCompute;
OPENGL_API_ENTRY PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
OPENGL_API_ENTRY PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
OPENGL_API_ENTRY PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
OPENGL_API_ENTRY PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
OPENGL_API_ENTRY PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v;
OPENGL_API_ENTRY PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
OPENGL_API_ENTRY PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage;
OPENGL_API_ENTRY PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
OPENGL_API_ENTRY PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
OPENGL_API_ENTRY PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
OPENGL_API_ENTRY PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
OPENGL_API_ENTRY PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
OPENGL_API_ENTRY PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
OPENGL_API_ENTRY PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
OPENGL_API_ENTRY PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
OPENGL_API_ENTRY PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
OPENGL_API_ENTRY PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
OPENGL_API_ENTRY PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
OPENGL_API_ENTRY PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
OPENGL_API_ENTRY PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
OPENGL_API_ENTRY PFNGLTEXBUFFERRANGEPROC glTexBufferRange;
OPENGL_API_ENTRY PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
OPENGL_API_ENTRY PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
OPENGL_API_ENTRY PFNGLTEXTUREVIEWPROC glTextureView;
OPENGL_API_ENTRY PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
OPENGL_API_ENTRY PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
OPENGL_API_ENTRY PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
OPENGL_API_ENTRY PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
OPENGL_API_ENTRY PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
OPENGL_API_ENTRY PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
OPENGL_API_ENTRY PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
OPENGL_API_ENTRY PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
OPENGL_API_ENTRY PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
OPENGL_API_ENTRY PFNGLOBJECTLABELPROC glObjectLabel;
OPENGL_API_ENTRY PFNGLGETOBJECTLABELPROC glGetObjectLabel;
OPENGL_API_ENTRY PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
OPENGL_API_ENTRY PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
/********************************************************************************************************************************
														OpenGl 4.4
********************************************************************************************************************************/
typedef void (OPENGL_API_CALL PFNGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void* data, GLbitfield flags);
typedef void (OPENGL_API_CALL PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void* data);
typedef void (OPENGL_API_CALL PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data);
typedef void (OPENGL_API_CALL PFNGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint* buffers);
typedef void (OPENGL_API_CALL PFNGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizeiptr* sizes);
typedef void (OPENGL_API_CALL PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint* textures);
typedef void (OPENGL_API_CALL PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint* samplers);
typedef void (OPENGL_API_CALL PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint* textures);
typedef void (OPENGL_API_CALL PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);

OPENGL_API_ENTRY PFNGLBUFFERSTORAGEPROC glBufferStorage;
OPENGL_API_ENTRY PFNGLCLEARTEXIMAGEPROC glClearTexImage;
OPENGL_API_ENTRY PFNGLCLEARTEXSUBIMAGEPROC glClearTexSubImage;
OPENGL_API_ENTRY PFNGLBINDBUFFERSBASEPROC glBindBuffersBase;
OPENGL_API_ENTRY PFNGLBINDBUFFERSRANGEPROC glBindBuffersRange;
OPENGL_API_ENTRY PFNGLBINDTEXTURESPROC glBindTextures;
OPENGL_API_ENTRY PFNGLBINDSAMPLERSPROC glBindSamplers;
OPENGL_API_ENTRY PFNGLBINDIMAGETEXTURESPROC glBindImageTextures;
OPENGL_API_ENTRY PFNGLBINDVERTEXBUFFERSPROC glBindVertexBuffers;
/********************************************************************************************************************************
														OpenGl 4.5
********************************************************************************************************************************/
typedef void (OPENGL_API_CALL PFNGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
typedef void (OPENGL_API_CALL PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint* ids);
typedef void (OPENGL_API_CALL PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
typedef void (OPENGL_API_CALL PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (OPENGL_API_CALL PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint* param);
typedef void (OPENGL_API_CALL PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint* param);
typedef void (OPENGL_API_CALL PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64* param);
typedef void (OPENGL_API_CALL PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint* buffers);
typedef void (OPENGL_API_CALL PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags);
typedef void (OPENGL_API_CALL PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
typedef void (OPENGL_API_CALL PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
typedef void (OPENGL_API_CALL PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (OPENGL_API_CALL PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
typedef void (OPENGL_API_CALL PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
typedef void* (OPENGL_API_CALL PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
typedef void* (OPENGL_API_CALL PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef GLboolean(OPENGL_API_CALL PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
typedef void (OPENGL_API_CALL PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (OPENGL_API_CALL PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64* params);
typedef void (OPENGL_API_CALL PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void** params);
typedef void (OPENGL_API_CALL PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
typedef void (OPENGL_API_CALL PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
typedef void (OPENGL_API_CALL PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (OPENGL_API_CALL PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (OPENGL_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (OPENGL_API_CALL PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
typedef void (OPENGL_API_CALL PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
typedef void (OPENGL_API_CALL PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
typedef void (OPENGL_API_CALL PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
typedef void (OPENGL_API_CALL PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
typedef void (OPENGL_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
typedef void (OPENGL_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value);
typedef void (OPENGL_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (OPENGL_API_CALL PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum(OPENGL_API_CALL PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
typedef void (OPENGL_API_CALL PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint* param);
typedef void (OPENGL_API_CALL PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
typedef void (OPENGL_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint* textures);
typedef void (OPENGL_API_CALL PFNGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (OPENGL_API_CALL PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (OPENGL_API_CALL PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (OPENGL_API_CALL PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (OPENGL_API_CALL PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (OPENGL_API_CALL PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (OPENGL_API_CALL PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
typedef void (OPENGL_API_CALL PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
typedef void (OPENGL_API_CALL PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
typedef void (OPENGL_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
typedef void (OPENGL_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
typedef void (OPENGL_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
typedef void (OPENGL_API_CALL PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (OPENGL_API_CALL PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (OPENGL_API_CALL PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
typedef void (OPENGL_API_CALL PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat* param);
typedef void (OPENGL_API_CALL PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
typedef void (OPENGL_API_CALL PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint* params);
typedef void (OPENGL_API_CALL PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint* params);
typedef void (OPENGL_API_CALL PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint* param);
typedef void (OPENGL_API_CALL PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
typedef void (OPENGL_API_CALL PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
typedef void (OPENGL_API_CALL PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
typedef void (OPENGL_API_CALL PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void* pixels);
typedef void (OPENGL_API_CALL PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint* params);
typedef void (OPENGL_API_CALL PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint* params);
typedef void (OPENGL_API_CALL PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
typedef void (OPENGL_API_CALL PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void (OPENGL_API_CALL PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void (OPENGL_API_CALL PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
typedef void (OPENGL_API_CALL PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (OPENGL_API_CALL PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
typedef void (OPENGL_API_CALL PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (OPENGL_API_CALL PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (OPENGL_API_CALL PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (OPENGL_API_CALL PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (OPENGL_API_CALL PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (OPENGL_API_CALL PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint* param);
typedef void (OPENGL_API_CALL PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
typedef void (OPENGL_API_CALL PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
typedef void (OPENGL_API_CALL PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint* samplers);
typedef void (OPENGL_API_CALL PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint* pipelines);
typedef void (OPENGL_API_CALL PFNGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint* ids);
typedef void (OPENGL_API_CALL PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (OPENGL_API_CALL PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (OPENGL_API_CALL PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (OPENGL_API_CALL PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (OPENGL_API_CALL PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
typedef void (OPENGL_API_CALL PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
typedef void (OPENGL_API_CALL PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels);
typedef GLenum(OPENGL_API_CALL PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
typedef void (OPENGL_API_CALL PFNGLGETNCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint lod, GLsizei bufSize, void* pixels);
typedef void (OPENGL_API_CALL PFNGLGETNTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
typedef void (OPENGL_API_CALL PFNGLGETNUNIFORMDVPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
typedef void (OPENGL_API_CALL PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
typedef void (OPENGL_API_CALL PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
typedef void (OPENGL_API_CALL PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
typedef void (OPENGL_API_CALL PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
typedef void (OPENGL_API_CALL PFNGLGETNMAPDVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
typedef void (OPENGL_API_CALL PFNGLGETNMAPFVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
typedef void (OPENGL_API_CALL PFNGLGETNMAPIVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
typedef void (OPENGL_API_CALL PFNGLGETNPIXELMAPFVPROC)(GLenum map, GLsizei bufSize, GLfloat* values);
typedef void (OPENGL_API_CALL PFNGLGETNPIXELMAPUIVPROC)(GLenum map, GLsizei bufSize, GLuint* values);
typedef void (OPENGL_API_CALL PFNGLGETNPIXELMAPUSVPROC)(GLenum map, GLsizei bufSize, GLushort* values);
typedef void (OPENGL_API_CALL PFNGLGETNPOLYGONSTIPPLEPROC)(GLsizei bufSize, GLubyte* pattern);
typedef void (OPENGL_API_CALL PFNGLGETNCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
typedef void (OPENGL_API_CALL PFNGLGETNCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
typedef void (OPENGL_API_CALL PFNGLGETNSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
typedef void (OPENGL_API_CALL PFNGLGETNHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
typedef void (OPENGL_API_CALL PFNGLGETNMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
typedef void (OPENGL_API_CALL PFNGLTEXTUREBARRIERPROC)(void);

OPENGL_API_ENTRY PFNGLCLIPCONTROLPROC glClipControl;
OPENGL_API_ENTRY PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks;
OPENGL_API_ENTRY PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase;
OPENGL_API_ENTRY PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange;
OPENGL_API_ENTRY PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv;
OPENGL_API_ENTRY PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v;
OPENGL_API_ENTRY PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v;
OPENGL_API_ENTRY PFNGLCREATEBUFFERSPROC glCreateBuffers;
OPENGL_API_ENTRY PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage;
OPENGL_API_ENTRY PFNGLNAMEDBUFFERDATAPROC glNamedBufferData;
OPENGL_API_ENTRY PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData;
OPENGL_API_ENTRY PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData;
OPENGL_API_ENTRY PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData;
OPENGL_API_ENTRY PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData;
OPENGL_API_ENTRY PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer;
OPENGL_API_ENTRY PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange;
OPENGL_API_ENTRY PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer;
OPENGL_API_ENTRY PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange;
OPENGL_API_ENTRY PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv;
OPENGL_API_ENTRY PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v;
OPENGL_API_ENTRY PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv;
OPENGL_API_ENTRY PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData;
OPENGL_API_ENTRY PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers;
OPENGL_API_ENTRY PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer;
OPENGL_API_ENTRY PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri;
OPENGL_API_ENTRY PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture;
OPENGL_API_ENTRY PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer;
OPENGL_API_ENTRY PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer;
OPENGL_API_ENTRY PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers;
OPENGL_API_ENTRY PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer;
OPENGL_API_ENTRY PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData;
OPENGL_API_ENTRY PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData;
OPENGL_API_ENTRY PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv;
OPENGL_API_ENTRY PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv;
OPENGL_API_ENTRY PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv;
OPENGL_API_ENTRY PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi;
OPENGL_API_ENTRY PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer;
OPENGL_API_ENTRY PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus;
OPENGL_API_ENTRY PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv;
OPENGL_API_ENTRY PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv;
OPENGL_API_ENTRY PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers;
OPENGL_API_ENTRY PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage;
OPENGL_API_ENTRY PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample;
OPENGL_API_ENTRY PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv;
OPENGL_API_ENTRY PFNGLCREATETEXTURESPROC glCreateTextures;
OPENGL_API_ENTRY PFNGLTEXTUREBUFFERPROC glTextureBuffer;
OPENGL_API_ENTRY PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange;
OPENGL_API_ENTRY PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D;
OPENGL_API_ENTRY PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D;
OPENGL_API_ENTRY PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D;
OPENGL_API_ENTRY PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample;
OPENGL_API_ENTRY PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample;
OPENGL_API_ENTRY PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D;
OPENGL_API_ENTRY PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D;
OPENGL_API_ENTRY PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D;
OPENGL_API_ENTRY PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D;
OPENGL_API_ENTRY PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D;
OPENGL_API_ENTRY PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D;
OPENGL_API_ENTRY PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D;
OPENGL_API_ENTRY PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D;
OPENGL_API_ENTRY PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D;
OPENGL_API_ENTRY PFNGLTEXTUREPARAMETERFPROC glTextureParameterf;
OPENGL_API_ENTRY PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv;
OPENGL_API_ENTRY PFNGLTEXTUREPARAMETERIPROC glTextureParameteri;
OPENGL_API_ENTRY PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv;
OPENGL_API_ENTRY PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv;
OPENGL_API_ENTRY PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv;
OPENGL_API_ENTRY PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap;
OPENGL_API_ENTRY PFNGLBINDTEXTUREUNITPROC glBindTextureUnit;
OPENGL_API_ENTRY PFNGLGETTEXTUREIMAGEPROC glGetTextureImage;
OPENGL_API_ENTRY PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage;
OPENGL_API_ENTRY PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv;
OPENGL_API_ENTRY PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv;
OPENGL_API_ENTRY PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv;
OPENGL_API_ENTRY PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv;
OPENGL_API_ENTRY PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv;
OPENGL_API_ENTRY PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv;
OPENGL_API_ENTRY PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays;
OPENGL_API_ENTRY PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib;
OPENGL_API_ENTRY PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib;
OPENGL_API_ENTRY PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer;
OPENGL_API_ENTRY PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer;
OPENGL_API_ENTRY PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers;
OPENGL_API_ENTRY PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding;
OPENGL_API_ENTRY PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat;
OPENGL_API_ENTRY PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat;
OPENGL_API_ENTRY PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat;
OPENGL_API_ENTRY PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor;
OPENGL_API_ENTRY PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv;
OPENGL_API_ENTRY PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv;
OPENGL_API_ENTRY PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv;
OPENGL_API_ENTRY PFNGLCREATESAMPLERSPROC glCreateSamplers;
OPENGL_API_ENTRY PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines;
OPENGL_API_ENTRY PFNGLCREATEQUERIESPROC glCreateQueries;
OPENGL_API_ENTRY PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v;
OPENGL_API_ENTRY PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv;
OPENGL_API_ENTRY PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v;
OPENGL_API_ENTRY PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv;
OPENGL_API_ENTRY PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion;
OPENGL_API_ENTRY PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage;
OPENGL_API_ENTRY PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage;
OPENGL_API_ENTRY PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus;
OPENGL_API_ENTRY PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage;
OPENGL_API_ENTRY PFNGLGETNTEXIMAGEPROC glGetnTexImage;
OPENGL_API_ENTRY PFNGLGETNUNIFORMDVPROC glGetnUniformdv;
OPENGL_API_ENTRY PFNGLGETNUNIFORMFVPROC glGetnUniformfv;
OPENGL_API_ENTRY PFNGLGETNUNIFORMIVPROC glGetnUniformiv;
OPENGL_API_ENTRY PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv;
OPENGL_API_ENTRY PFNGLREADNPIXELSPROC glReadnPixels;
OPENGL_API_ENTRY PFNGLGETNMAPDVPROC glGetnMapdv;
OPENGL_API_ENTRY PFNGLGETNMAPFVPROC glGetnMapfv;
OPENGL_API_ENTRY PFNGLGETNMAPIVPROC glGetnMapiv;
OPENGL_API_ENTRY PFNGLGETNPIXELMAPFVPROC glGetnPixelMapfv;
OPENGL_API_ENTRY PFNGLGETNPIXELMAPUIVPROC glGetnPixelMapuiv;
OPENGL_API_ENTRY PFNGLGETNPIXELMAPUSVPROC glGetnPixelMapusv;
OPENGL_API_ENTRY PFNGLGETNPOLYGONSTIPPLEPROC glGetnPolygonStipple;
OPENGL_API_ENTRY PFNGLGETNCOLORTABLEPROC glGetnColorTable;
OPENGL_API_ENTRY PFNGLGETNCONVOLUTIONFILTERPROC glGetnConvolutionFilter;
OPENGL_API_ENTRY PFNGLGETNSEPARABLEFILTERPROC glGetnSeparableFilter;
OPENGL_API_ENTRY PFNGLGETNHISTOGRAMPROC glGetnHistogram;
OPENGL_API_ENTRY PFNGLGETNMINMAXPROC glGetnMinmax;
OPENGL_API_ENTRY PFNGLTEXTUREBARRIERPROC glTextureBarrier;
/********************************************************************************************************************************
														OpenGl 4.6
********************************************************************************************************************************/
typedef void (OPENGL_API_CALL PFNGLSPECIALIZESHADERPROC)(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue);
typedef void (OPENGL_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (OPENGL_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (OPENGL_API_CALL PFNGLPOLYGONOFFSETCLAMPPROC)(GLfloat factor, GLfloat units, GLfloat clamp);

OPENGL_API_ENTRY PFNGLSPECIALIZESHADERPROC glSpecializeShader;
OPENGL_API_ENTRY PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glMultiDrawArraysIndirectCount;
OPENGL_API_ENTRY PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glMultiDrawElementsIndirectCount;
OPENGL_API_ENTRY PFNGLPOLYGONOFFSETCLAMPPROC glPolygonOffsetClamp;

#if defined(OPENGL_IMPLEMENTATION)

#if defined(_WIN32)
    static HMODULE globalLibraryPtr = NULL;
#elif defined (__unix__)
	void* globalLibraryPtr = NULL;
#endif

void OpenGL_Assert(const char* file, int line, const char* expression)
{
	GLenum code = glGetError();

	char format[] = "OpenGL error: %s expression: %s file: %s line: %d \n";

	if (code != GL_NO_ERROR)
	{
		switch (code)
		{
		case GL_INVALID_ENUM:
			printf(format, "GL_INVALID_ENUM", expression, file, line);
			break;
		case GL_INVALID_VALUE:
			printf(format, "GL_INVALID_VALUE", expression, file, line);
			break;
		case GL_INVALID_OPERATION:
			printf(format, "GL_INVALID_OPERATION", expression, file, line);
			break;
		case GL_STACK_OVERFLOW:
			printf(format, "GL_STACK_OVERFLOW", expression, file, line);
			break;
		case GL_STACK_UNDERFLOW:
			printf(format, "GL_STACK_UNDERFLOW", expression, file, line);
			break;
		case GL_OUT_OF_MEMORY:
			printf(format, "GL_OUT_OF_MEMORY", expression, file, line);
			break;
		default:
			printf(format, "Unknown error", expression, file, line);
		}

		abort();
	}
}

#if defined(_WIN32)

int OpenGL_LoadLibrary()
{
	globalLibraryPtr = LoadLibrary("OpenGL32.dll");

    return (globalLibraryPtr != NULL);
}

OpenGL_Function_Pointer OpenGL_Load(const char* name)
{
	OpenGL_Function_Pointer result = (OpenGL_Function_Pointer)wglGetProcAddress(name);

	if (result == 0
		|| (result == (OpenGL_Function_Pointer)0x1)
		|| (result == (OpenGL_Function_Pointer)0x2)
		|| (result == (OpenGL_Function_Pointer)0x3)
		|| (result == (OpenGL_Function_Pointer)-1))
	{
		result = (OpenGL_Function_Pointer)GetProcAddress(globalLibraryPtr, name);

		if (result == NULL)
		{
			//printf("Not found function: %s\n", name);
			//abort();
		}
	}

	return result;
}

void OpenGL_UnLoad()
{
	CloseHandle(globalLibraryPtr);
}

#elif defined(__unix__)
typedef unsigned char GLubyte;
extern void (*glXGetProcAddress(const GLubyte* procname))(void);

int OpenGL_LoadLibrary()
{
	return true;
}

OpenGL_Function_Pointer OpenGL_Load(const char* name)
{
	OpenGL_Function_Pointer result = (OpenGL_Function_Pointer)glXGetProcAddress((const GLubyte*)name);

	if (result == NULL)
	{
		printf("Not found function: %s\n", name);
		abort();
	}

	return result;
}

void OpenGL_UnLoad()
{
}

#endif

/********************************************************************************************************************************
														OpenGl 1.0
********************************************************************************************************************************/
PFNGLCULLFACEPROC glCullFace = NULL;
PFNGLFRONTFACEPROC glFrontFace = NULL;
PFNGLHINTPROC glHint = NULL;
PFNGLLINEWIDTHPROC glLineWidth = NULL;
PFNGLPOINTSIZEPROC glPointSize = NULL;
PFNGLPOLYGONMODEPROC glPolygonMode = NULL;
PFNGLSCISSORPROC glScissor = NULL;
PFNGLTEXPARAMETERFPROC glTexParameterf = NULL;
PFNGLTEXPARAMETERFVPROC glTexParameterfv = NULL;
PFNGLTEXPARAMETERIPROC glTexParameteri = NULL;
PFNGLTEXPARAMETERIVPROC glTexParameteriv = NULL;
PFNGLTEXIMAGE1DPROC glTexImage1D = NULL;
PFNGLTEXIMAGE2DPROC glTexImage2D = NULL;
PFNGLDRAWBUFFERPROC glDrawBuffer = NULL;
PFNGLCLEARPROC glClear = NULL;
PFNGLCLEARCOLORPROC glClearColor = NULL;
PFNGLCLEARSTENCILPROC glClearStencil = NULL;
PFNGLCLEARDEPTHPROC glClearDepth = NULL;
PFNGLSTENCILMASKPROC glStencilMask = NULL;
PFNGLCOLORMASKPROC glColorMask = NULL;
PFNGLDEPTHMASKPROC glDepthMask = NULL;
PFNGLDISABLEPROC glDisable = NULL;
PFNGLENABLEPROC glEnable = NULL;
PFNGLFINISHPROC glFinish = NULL;
PFNGLFLUSHPROC glFlush = NULL;
PFNGLBLENDFUNCPROC glBlendFunc = NULL;
PFNGLLOGICOPPROC glLogicOp = NULL;
PFNGLSTENCILFUNCPROC glStencilFunc = NULL;
PFNGLSTENCILOPPROC glStencilOp = NULL;
PFNGLDEPTHFUNCPROC glDepthFunc = NULL;
PFNGLPIXELSTOREFPROC glPixelStoref = NULL;
PFNGLPIXELSTOREIPROC glPixelStorei = NULL;
PFNGLREADBUFFERPROC glReadBuffer = NULL;
PFNGLREADPIXELSPROC glReadPixels = NULL;
PFNGLGETBOOLEANVPROC glGetBooleanv = NULL;
PFNGLGETDOUBLEVPROC glGetDoublev = NULL;
PFNGLGETERRORPROC glGetError = NULL;
PFNGLGETFLOATVPROC glGetFloatv = NULL;
PFNGLGETINTEGERVPROC glGetIntegerv = NULL;
PFNGLGETSTRINGPROC glGetString = NULL;
PFNGLGETTEXIMAGEPROC glGetTexImage = NULL;
PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv = NULL;
PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv = NULL;
PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv = NULL;
PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv = NULL;
PFNGLISENABLEDPROC glIsEnabled = NULL;
PFNGLDEPTHRANGEPROC glDepthRange = NULL;
PFNGLVIEWPORTPROC glViewport = NULL;
PFNGLNEWLISTPROC glNewList = NULL;
PFNGLENDLISTPROC glEndList = NULL;
PFNGLCALLLISTPROC glCallList = NULL;
PFNGLCALLLISTSPROC glCallLists = NULL;
PFNGLDELETELISTSPROC glDeleteLists = NULL;
PFNGLGENLISTSPROC glGenLists = NULL;
PFNGLLISTBASEPROC glListBase = NULL;
PFNGLBEGINPROC glBegin = NULL;
PFNGLBITMAPPROC glBitmap = NULL;
PFNGLCOLOR3BPROC glColor3b = NULL;
PFNGLCOLOR3BVPROC glColor3bv = NULL;
PFNGLCOLOR3DPROC glColor3d = NULL;
PFNGLCOLOR3DVPROC glColor3dv = NULL;
PFNGLCOLOR3FPROC glColor3f = NULL;
PFNGLCOLOR3FVPROC glColor3fv = NULL;
PFNGLCOLOR3IPROC glColor3i = NULL;
PFNGLCOLOR3IVPROC glColor3iv = NULL;
PFNGLCOLOR3SPROC glColor3s = NULL;
PFNGLCOLOR3SVPROC glColor3sv = NULL;
PFNGLCOLOR3UBPROC glColor3ub = NULL;
PFNGLCOLOR3UBVPROC glColor3ubv = NULL;
PFNGLCOLOR3UIPROC glColor3ui = NULL;
PFNGLCOLOR3UIVPROC glColor3uiv = NULL;
PFNGLCOLOR3USPROC glColor3us = NULL;
PFNGLCOLOR3USVPROC glColor3usv = NULL;
PFNGLCOLOR4BPROC glColor4b = NULL;
PFNGLCOLOR4BVPROC glColor4bv = NULL;
PFNGLCOLOR4DPROC glColor4d = NULL;
PFNGLCOLOR4DVPROC glColor4dv = NULL;
PFNGLCOLOR4FPROC glColor4f = NULL;
PFNGLCOLOR4FVPROC glColor4fv = NULL;
PFNGLCOLOR4IPROC glColor4i = NULL;
PFNGLCOLOR4IVPROC glColor4iv = NULL;
PFNGLCOLOR4SPROC glColor4s = NULL;
PFNGLCOLOR4SVPROC glColor4sv = NULL;
PFNGLCOLOR4UBPROC glColor4ub = NULL;
PFNGLCOLOR4UBVPROC glColor4ubv = NULL;
PFNGLCOLOR4UIPROC glColor4ui = NULL;
PFNGLCOLOR4UIVPROC glColor4uiv = NULL;
PFNGLCOLOR4USPROC glColor4us = NULL;
PFNGLCOLOR4USVPROC glColor4usv = NULL;
PFNGLEDGEFLAGPROC glEdgeFlag = NULL;
PFNGLEDGEFLAGVPROC glEdgeFlagv = NULL;
PFNGLENDPROC glEnd = NULL;
PFNGLINDEXDPROC glIndexd = NULL;
PFNGLINDEXDVPROC glIndexdv = NULL;
PFNGLINDEXFPROC glIndexf = NULL;
PFNGLINDEXFVPROC glIndexfv = NULL;
PFNGLINDEXIPROC glIndexi = NULL;
PFNGLINDEXIVPROC glIndexiv = NULL;
PFNGLINDEXSPROC glIndexs = NULL;
PFNGLINDEXSVPROC glIndexsv = NULL;
PFNGLNORMAL3BPROC glNormal3b = NULL;
PFNGLNORMAL3BVPROC glNormal3bv = NULL;
PFNGLNORMAL3DPROC glNormal3d = NULL;
PFNGLNORMAL3DVPROC glNormal3dv = NULL;
PFNGLNORMAL3FPROC glNormal3f = NULL;
PFNGLNORMAL3FVPROC glNormal3fv = NULL;
PFNGLNORMAL3IPROC glNormal3i = NULL;
PFNGLNORMAL3IVPROC glNormal3iv = NULL;
PFNGLNORMAL3SPROC glNormal3s = NULL;
PFNGLNORMAL3SVPROC glNormal3sv = NULL;
PFNGLRASTERPOS2DPROC glRasterPos2d = NULL;
PFNGLRASTERPOS2DVPROC glRasterPos2dv = NULL;
PFNGLRASTERPOS2FPROC glRasterPos2f = NULL;
PFNGLRASTERPOS2FVPROC glRasterPos2fv = NULL;
PFNGLRASTERPOS2IPROC glRasterPos2i = NULL;
PFNGLRASTERPOS2IVPROC glRasterPos2iv = NULL;
PFNGLRASTERPOS2SPROC glRasterPos2s = NULL;
PFNGLRASTERPOS2SVPROC glRasterPos2sv = NULL;
PFNGLRASTERPOS3DPROC glRasterPos3d = NULL;
PFNGLRASTERPOS3DVPROC glRasterPos3dv = NULL;
PFNGLRASTERPOS3FPROC glRasterPos3f = NULL;
PFNGLRASTERPOS3FVPROC glRasterPos3fv = NULL;
PFNGLRASTERPOS3IPROC glRasterPos3i = NULL;
PFNGLRASTERPOS3IVPROC glRasterPos3iv = NULL;
PFNGLRASTERPOS3SPROC glRasterPos3s = NULL;
PFNGLRASTERPOS3SVPROC glRasterPos3sv = NULL;
PFNGLRASTERPOS4DPROC glRasterPos4d = NULL;
PFNGLRASTERPOS4DVPROC glRasterPos4dv = NULL;
PFNGLRASTERPOS4FPROC glRasterPos4f = NULL;
PFNGLRASTERPOS4FVPROC glRasterPos4fv = NULL;
PFNGLRASTERPOS4IPROC glRasterPos4i = NULL;
PFNGLRASTERPOS4IVPROC glRasterPos4iv = NULL;
PFNGLRASTERPOS4SPROC glRasterPos4s = NULL;
PFNGLRASTERPOS4SVPROC glRasterPos4sv = NULL;
PFNGLRECTDPROC glRectd = NULL;
PFNGLRECTDVPROC glRectdv = NULL;
PFNGLRECTFPROC glRectf = NULL;
PFNGLRECTFVPROC glRectfv = NULL;
PFNGLRECTIPROC glRecti = NULL;
PFNGLRECTIVPROC glRectiv = NULL;
PFNGLRECTSPROC glRects = NULL;
PFNGLRECTSVPROC glRectsv = NULL;
PFNGLTEXCOORD1DPROC glTexCoord1d = NULL;
PFNGLTEXCOORD1DVPROC glTexCoord1dv = NULL;
PFNGLTEXCOORD1FPROC glTexCoord1f = NULL;
PFNGLTEXCOORD1FVPROC glTexCoord1fv = NULL;
PFNGLTEXCOORD1IPROC glTexCoord1i = NULL;
PFNGLTEXCOORD1IVPROC glTexCoord1iv = NULL;
PFNGLTEXCOORD1SPROC glTexCoord1s = NULL;
PFNGLTEXCOORD1SVPROC glTexCoord1sv = NULL;
PFNGLTEXCOORD2DPROC glTexCoord2d = NULL;
PFNGLTEXCOORD2DVPROC glTexCoord2dv = NULL;
PFNGLTEXCOORD2FPROC glTexCoord2f = NULL;
PFNGLTEXCOORD2FVPROC glTexCoord2fv = NULL;
PFNGLTEXCOORD2IPROC glTexCoord2i = NULL;
PFNGLTEXCOORD2IVPROC glTexCoord2iv = NULL;
PFNGLTEXCOORD2SPROC glTexCoord2s = NULL;
PFNGLTEXCOORD2SVPROC glTexCoord2sv = NULL;
PFNGLTEXCOORD3DPROC glTexCoord3d = NULL;
PFNGLTEXCOORD3DVPROC glTexCoord3dv = NULL;
PFNGLTEXCOORD3FPROC glTexCoord3f = NULL;
PFNGLTEXCOORD3FVPROC glTexCoord3fv = NULL;
PFNGLTEXCOORD3IPROC glTexCoord3i = NULL;
PFNGLTEXCOORD3IVPROC glTexCoord3iv = NULL;
PFNGLTEXCOORD3SPROC glTexCoord3s = NULL;
PFNGLTEXCOORD3SVPROC glTexCoord3sv = NULL;
PFNGLTEXCOORD4DPROC glTexCoord4d = NULL;
PFNGLTEXCOORD4DVPROC glTexCoord4dv = NULL;
PFNGLTEXCOORD4FPROC glTexCoord4f = NULL;
PFNGLTEXCOORD4FVPROC glTexCoord4fv = NULL;
PFNGLTEXCOORD4IPROC glTexCoord4i = NULL;
PFNGLTEXCOORD4IVPROC glTexCoord4iv = NULL;
PFNGLTEXCOORD4SPROC glTexCoord4s = NULL;
PFNGLTEXCOORD4SVPROC glTexCoord4sv = NULL;
PFNGLVERTEX2DPROC glVertex2d = NULL;
PFNGLVERTEX2DVPROC glVertex2dv = NULL;
PFNGLVERTEX2FPROC glVertex2f = NULL;
PFNGLVERTEX2FVPROC glVertex2fv = NULL;
PFNGLVERTEX2IPROC glVertex2i = NULL;
PFNGLVERTEX2IVPROC glVertex2iv = NULL;
PFNGLVERTEX2SPROC glVertex2s = NULL;
PFNGLVERTEX2SVPROC glVertex2sv = NULL;
PFNGLVERTEX3DPROC glVertex3d = NULL;
PFNGLVERTEX3DVPROC glVertex3dv = NULL;
PFNGLVERTEX3FPROC glVertex3f = NULL;
PFNGLVERTEX3FVPROC glVertex3fv = NULL;
PFNGLVERTEX3IPROC glVertex3i = NULL;
PFNGLVERTEX3IVPROC glVertex3iv = NULL;
PFNGLVERTEX3SPROC glVertex3s = NULL;
PFNGLVERTEX3SVPROC glVertex3sv = NULL;
PFNGLVERTEX4DPROC glVertex4d = NULL;
PFNGLVERTEX4DVPROC glVertex4dv = NULL;
PFNGLVERTEX4FPROC glVertex4f = NULL;
PFNGLVERTEX4FVPROC glVertex4fv = NULL;
PFNGLVERTEX4IPROC glVertex4i = NULL;
PFNGLVERTEX4IVPROC glVertex4iv = NULL;
PFNGLVERTEX4SPROC glVertex4s = NULL;
PFNGLVERTEX4SVPROC glVertex4sv = NULL;
PFNGLCLIPPLANEPROC glClipPlane = NULL;
PFNGLCOLORMATERIALPROC glColorMaterial = NULL;
PFNGLFOGFPROC glFogf = NULL;
PFNGLFOGFVPROC glFogfv = NULL;
PFNGLFOGIPROC glFogi = NULL;
PFNGLFOGIVPROC glFogiv = NULL;
PFNGLLIGHTFPROC glLightf = NULL;
PFNGLLIGHTFVPROC glLightfv = NULL;
PFNGLLIGHTIPROC glLighti = NULL;
PFNGLLIGHTIVPROC glLightiv = NULL;
PFNGLLIGHTMODELFPROC glLightModelf = NULL;
PFNGLLIGHTMODELFVPROC glLightModelfv = NULL;
PFNGLLIGHTMODELIPROC glLightModeli = NULL;
PFNGLLIGHTMODELIVPROC glLightModeliv = NULL;
PFNGLLINESTIPPLEPROC glLineStipple = NULL;
PFNGLMATERIALFPROC glMaterialf = NULL;
PFNGLMATERIALFVPROC glMaterialfv = NULL;
PFNGLMATERIALIPROC glMateriali = NULL;
PFNGLMATERIALIVPROC glMaterialiv = NULL;
PFNGLPOLYGONSTIPPLEPROC glPolygonStipple = NULL;
PFNGLSHADEMODELPROC glShadeModel = NULL;
PFNGLTEXENVFPROC glTexEnvf = NULL;
PFNGLTEXENVFVPROC glTexEnvfv = NULL;
PFNGLTEXENVIPROC glTexEnvi = NULL;
PFNGLTEXENVIVPROC glTexEnviv = NULL;
PFNGLTEXGENDPROC glTexGend = NULL;
PFNGLTEXGENDVPROC glTexGendv = NULL;
PFNGLTEXGENFPROC glTexGenf = NULL;
PFNGLTEXGENFVPROC glTexGenfv = NULL;
PFNGLTEXGENIPROC glTexGeni = NULL;
PFNGLTEXGENIVPROC glTexGeniv = NULL;
PFNGLFEEDBACKBUFFERPROC glFeedbackBuffer = NULL;
PFNGLSELECTBUFFERPROC glSelectBuffer = NULL;
PFNGLRENDERMODEPROC glRenderMode = NULL;
PFNGLINITNAMESPROC glInitNames = NULL;
PFNGLLOADNAMEPROC glLoadName = NULL;
PFNGLPASSTHROUGHPROC glPassThrough = NULL;
PFNGLPOPNAMEPROC glPopName = NULL;
PFNGLPUSHNAMEPROC glPushName = NULL;
PFNGLCLEARACCUMPROC glClearAccum = NULL;
PFNGLCLEARINDEXPROC glClearIndex = NULL;
PFNGLINDEXMASKPROC glIndexMask = NULL;
PFNGLACCUMPROC glAccum = NULL;
PFNGLPOPATTRIBPROC glPopAttrib = NULL;
PFNGLPUSHATTRIBPROC glPushAttrib = NULL;
PFNGLMAP1DPROC glMap1d = NULL;
PFNGLMAP1FPROC glMap1f = NULL;
PFNGLMAP2DPROC glMap2d = NULL;
PFNGLMAP2FPROC glMap2f = NULL;
PFNGLMAPGRID1DPROC glMapGrid1d = NULL;
PFNGLMAPGRID1FPROC glMapGrid1f = NULL;
PFNGLMAPGRID2DPROC glMapGrid2d = NULL;
PFNGLMAPGRID2FPROC glMapGrid2f = NULL;
PFNGLEVALCOORD1DPROC glEvalCoord1d = NULL;
PFNGLEVALCOORD1DVPROC glEvalCoord1dv = NULL;
PFNGLEVALCOORD1FPROC glEvalCoord1f = NULL;
PFNGLEVALCOORD1FVPROC glEvalCoord1fv = NULL;
PFNGLEVALCOORD2DPROC glEvalCoord2d = NULL;
PFNGLEVALCOORD2DVPROC glEvalCoord2dv = NULL;
PFNGLEVALCOORD2FPROC glEvalCoord2f = NULL;
PFNGLEVALCOORD2FVPROC glEvalCoord2fv = NULL;
PFNGLEVALMESH1PROC glEvalMesh1 = NULL;
PFNGLEVALPOINT1PROC glEvalPoint1 = NULL;
PFNGLEVALMESH2PROC glEvalMesh2 = NULL;
PFNGLEVALPOINT2PROC glEvalPoint2 = NULL;
PFNGLALPHAFUNCPROC glAlphaFunc = NULL;
PFNGLPIXELZOOMPROC glPixelZoom = NULL;
PFNGLPIXELTRANSFERFPROC glPixelTransferf = NULL;
PFNGLPIXELTRANSFERIPROC glPixelTransferi = NULL;
PFNGLPIXELMAPFVPROC glPixelMapfv = NULL;
PFNGLPIXELMAPUIVPROC glPixelMapuiv = NULL;
PFNGLPIXELMAPUSVPROC glPixelMapusv = NULL;
PFNGLCOPYPIXELSPROC glCopyPixels = NULL;
PFNGLDRAWPIXELSPROC glDrawPixels = NULL;
PFNGLGETCLIPPLANEPROC glGetClipPlane = NULL;
PFNGLGETLIGHTFVPROC glGetLightfv = NULL;
PFNGLGETLIGHTIVPROC glGetLightiv = NULL;
PFNGLGETMAPDVPROC glGetMapdv = NULL;
PFNGLGETMAPFVPROC glGetMapfv = NULL;
PFNGLGETMAPIVPROC glGetMapiv = NULL;
PFNGLGETMATERIALFVPROC glGetMaterialfv = NULL;
PFNGLGETMATERIALIVPROC glGetMaterialiv = NULL;
PFNGLGETPIXELMAPFVPROC glGetPixelMapfv = NULL;
PFNGLGETPIXELMAPUIVPROC glGetPixelMapuiv = NULL;
PFNGLGETPIXELMAPUSVPROC glGetPixelMapusv = NULL;
PFNGLGETPOLYGONSTIPPLEPROC glGetPolygonStipple = NULL;
PFNGLGETTEXENVFVPROC glGetTexEnvfv = NULL;
PFNGLGETTEXENVIVPROC glGetTexEnviv = NULL;
PFNGLGETTEXGENDVPROC glGetTexGendv = NULL;
PFNGLGETTEXGENFVPROC glGetTexGenfv = NULL;
PFNGLGETTEXGENIVPROC glGetTexGeniv = NULL;
PFNGLISLISTPROC glIsList = NULL;
PFNGLFRUSTUMPROC glFrustum = NULL;
PFNGLLOADIDENTITYPROC glLoadIdentity = NULL;
PFNGLLOADMATRIXFPROC glLoadMatrixf = NULL;
PFNGLLOADMATRIXDPROC glLoadMatrixd = NULL;
PFNGLMATRIXMODEPROC glMatrixMode = NULL;
PFNGLMULTMATRIXFPROC glMultMatrixf = NULL;
PFNGLMULTMATRIXDPROC glMultMatrixd = NULL;
PFNGLORTHOPROC glOrtho = NULL;
PFNGLPOPMATRIXPROC glPopMatrix = NULL;
PFNGLPUSHMATRIXPROC glPushMatrix = NULL;
PFNGLROTATEDPROC glRotated = NULL;
PFNGLROTATEFPROC glRotatef = NULL;
PFNGLSCALEDPROC glScaled = NULL;
PFNGLSCALEFPROC glScalef = NULL;
PFNGLTRANSLATEDPROC glTranslated = NULL;
PFNGLTRANSLATEFPROC glTranslatef = NULL;
/********************************************************************************************************************************
														OpenGl 1.1
********************************************************************************************************************************/
PFNGLDRAWARRAYSPROC glDrawArrays = NULL;
PFNGLDRAWELEMENTSPROC glDrawElements = NULL;
PFNGLGETPOINTERVPROC glGetPointerv = NULL;
PFNGLPOLYGONOFFSETPROC glPolygonOffset = NULL;
PFNGLCOPYTEXIMAGE1DPROC glCopyTexImage1D = NULL;
PFNGLCOPYTEXIMAGE2DPROC glCopyTexImage2D = NULL;
PFNGLCOPYTEXSUBIMAGE1DPROC glCopyTexSubImage1D = NULL;
PFNGLCOPYTEXSUBIMAGE2DPROC glCopyTexSubImage2D = NULL;
PFNGLTEXSUBIMAGE1DPROC glTexSubImage1D = NULL;
PFNGLTEXSUBIMAGE2DPROC glTexSubImage2D = NULL;
PFNGLBINDTEXTUREPROC glBindTexture = NULL;
PFNGLDELETETEXTURESPROC glDeleteTextures = NULL;
PFNGLGENTEXTURESPROC glGenTextures = NULL;
PFNGLISTEXTUREPROC glIsTexture = NULL;
PFNGLARRAYELEMENTPROC glArrayElement = NULL;
PFNGLCOLORPOINTERPROC glColorPointer = NULL;
PFNGLDISABLECLIENTSTATEPROC glDisableClientState = NULL;
PFNGLEDGEFLAGPOINTERPROC glEdgeFlagPointer = NULL;
PFNGLENABLECLIENTSTATEPROC glEnableClientState = NULL;
PFNGLINDEXPOINTERPROC glIndexPointer = NULL;
PFNGLINTERLEAVEDARRAYSPROC glInterleavedArrays = NULL;
PFNGLNORMALPOINTERPROC glNormalPointer = NULL;
PFNGLTEXCOORDPOINTERPROC glTexCoordPointer = NULL;
PFNGLVERTEXPOINTERPROC glVertexPointer = NULL;
PFNGLARETEXTURESRESIDENTPROC glAreTexturesResident = NULL;
PFNGLPRIORITIZETEXTURESPROC glPrioritizeTextures = NULL;
PFNGLINDEXUBPROC glIndexub = NULL;
PFNGLINDEXUBVPROC glIndexubv = NULL;
PFNGLPOPCLIENTATTRIBPROC glPopClientAttrib = NULL;
PFNGLPUSHCLIENTATTRIBPROC glPushClientAttrib = NULL;
/********************************************************************************************************************************
														OpenGl 1.2
********************************************************************************************************************************/
PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements = NULL;
PFNGLTEXIMAGE3DPROC glTexImage3D = NULL;
PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D = NULL;
PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D = NULL;
/********************************************************************************************************************************
														OpenGl 1.3
********************************************************************************************************************************/
PFNGLACTIVETEXTUREPROC glActiveTexture = NULL;
PFNGLSAMPLECOVERAGEPROC glSampleCoverage = NULL;
PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D = NULL;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D = NULL;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D = NULL;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D = NULL;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage = NULL;
PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture = NULL;
PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d = NULL;
PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv = NULL;
PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f = NULL;
PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv = NULL;
PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i = NULL;
PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv = NULL;
PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s = NULL;
PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv = NULL;
PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d = NULL;
PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv = NULL;
PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f = NULL;
PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv = NULL;
PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i = NULL;
PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv = NULL;
PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s = NULL;
PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv = NULL;
PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d = NULL;
PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv = NULL;
PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f = NULL;
PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv = NULL;
PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i = NULL;
PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv = NULL;
PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s = NULL;
PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv = NULL;
PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d = NULL;
PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv = NULL;
PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f = NULL;
PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv = NULL;
PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i = NULL;
PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv = NULL;
PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s = NULL;
PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv = NULL;
PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf = NULL;
PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd = NULL;
PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf = NULL;
PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd = NULL;
/********************************************************************************************************************************
														OpenGl 1.4
********************************************************************************************************************************/
PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate = NULL;
PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays = NULL;
PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements = NULL;
PFNGLPOINTPARAMETERFPROC glPointParameterf = NULL;
PFNGLPOINTPARAMETERFVPROC glPointParameterfv = NULL;
PFNGLPOINTPARAMETERIPROC glPointParameteri = NULL;
PFNGLPOINTPARAMETERIVPROC glPointParameteriv = NULL;
PFNGLFOGCOORDFPROC glFogCoordf = NULL;
PFNGLFOGCOORDFVPROC glFogCoordfv = NULL;
PFNGLFOGCOORDDPROC glFogCoordd = NULL;
PFNGLFOGCOORDDVPROC glFogCoorddv = NULL;
PFNGLFOGCOORDPOINTERPROC glFogCoordPointer = NULL;
PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b = NULL;
PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv = NULL;
PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d = NULL;
PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv = NULL;
PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f = NULL;
PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv = NULL;
PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i = NULL;
PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv = NULL;
PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s = NULL;
PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv = NULL;
PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub = NULL;
PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv = NULL;
PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui = NULL;
PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv = NULL;
PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us = NULL;
PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv = NULL;
PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer = NULL;
PFNGLWINDOWPOS2DPROC glWindowPos2d = NULL;
PFNGLWINDOWPOS2DVPROC glWindowPos2dv = NULL;
PFNGLWINDOWPOS2FPROC glWindowPos2f = NULL;
PFNGLWINDOWPOS2FVPROC glWindowPos2fv = NULL;
PFNGLWINDOWPOS2IPROC glWindowPos2i = NULL;
PFNGLWINDOWPOS2IVPROC glWindowPos2iv = NULL;
PFNGLWINDOWPOS2SPROC glWindowPos2s = NULL;
PFNGLWINDOWPOS2SVPROC glWindowPos2sv = NULL;
PFNGLWINDOWPOS3DPROC glWindowPos3d = NULL;
PFNGLWINDOWPOS3DVPROC glWindowPos3dv = NULL;
PFNGLWINDOWPOS3FPROC glWindowPos3f = NULL;
PFNGLWINDOWPOS3FVPROC glWindowPos3fv = NULL;
PFNGLWINDOWPOS3IPROC glWindowPos3i = NULL;
PFNGLWINDOWPOS3IVPROC glWindowPos3iv = NULL;
PFNGLWINDOWPOS3SPROC glWindowPos3s = NULL;
PFNGLWINDOWPOS3SVPROC glWindowPos3sv = NULL;
PFNGLBLENDCOLORPROC glBlendColor = NULL;
PFNGLBLENDEQUATIONPROC glBlendEquation = NULL;
/********************************************************************************************************************************
														OpenGl 1.5
********************************************************************************************************************************/
PFNGLGENQUERIESPROC glGenQueries = NULL;
PFNGLDELETEQUERIESPROC glDeleteQueries = NULL;
PFNGLISQUERYPROC glIsQuery = NULL;
PFNGLBEGINQUERYPROC glBeginQuery = NULL;
PFNGLENDQUERYPROC glEndQuery = NULL;
PFNGLGETQUERYIVPROC glGetQueryiv = NULL;
PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv = NULL;
PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv = NULL;
PFNGLBINDBUFFERPROC glBindBuffer = NULL;
PFNGLDELETEBUFFERSPROC glDeleteBuffers = NULL;
PFNGLGENBUFFERSPROC glGenBuffers = NULL;
PFNGLISBUFFERPROC glIsBuffer = NULL;
PFNGLBUFFERDATAPROC glBufferData = NULL;
PFNGLBUFFERSUBDATAPROC glBufferSubData = NULL;
PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData = NULL;
PFNGLMAPBUFFERPROC glMapBuffer = NULL;
PFNGLUNMAPBUFFERPROC glUnmapBuffer = NULL;
PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv = NULL;
PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv = NULL;
/********************************************************************************************************************************
														OpenGl 2.0
********************************************************************************************************************************/
PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate = NULL;
PFNGLDRAWBUFFERSPROC glDrawBuffers = NULL;
PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate = NULL;
PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate = NULL;
PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate = NULL;
PFNGLATTACHSHADERPROC glAttachShader = NULL;
PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation = NULL;
PFNGLCOMPILESHADERPROC glCompileShader = NULL;
PFNGLCREATEPROGRAMPROC glCreateProgram = NULL;
PFNGLCREATESHADERPROC glCreateShader = NULL;
PFNGLDELETEPROGRAMPROC glDeleteProgram = NULL;
PFNGLDELETESHADERPROC glDeleteShader = NULL;
PFNGLDETACHSHADERPROC glDetachShader = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray = NULL;
PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray = NULL;
PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib = NULL;
PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform = NULL;
PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders = NULL;
PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation = NULL;
PFNGLGETPROGRAMIVPROC glGetProgramiv = NULL;
PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog = NULL;
PFNGLGETSHADERIVPROC glGetShaderiv = NULL;
PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog = NULL;
PFNGLGETSHADERSOURCEPROC glGetShaderSource = NULL;
PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation = NULL;
PFNGLGETUNIFORMFVPROC glGetUniformfv = NULL;
PFNGLGETUNIFORMIVPROC glGetUniformiv = NULL;
PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv = NULL;
PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv = NULL;
PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv = NULL;
PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv = NULL;
PFNGLISPROGRAMPROC glIsProgram = NULL;
PFNGLISSHADERPROC glIsShader = NULL;
PFNGLLINKPROGRAMPROC glLinkProgram = NULL;
PFNGLSHADERSOURCEPROC glShaderSource = NULL;
PFNGLUSEPROGRAMPROC glUseProgram = NULL;
PFNGLUNIFORM1FPROC glUniform1f = NULL;
PFNGLUNIFORM2FPROC glUniform2f = NULL;
PFNGLUNIFORM3FPROC glUniform3f = NULL;
PFNGLUNIFORM4FPROC glUniform4f = NULL;
PFNGLUNIFORM1IPROC glUniform1i = NULL;
PFNGLUNIFORM2IPROC glUniform2i = NULL;
PFNGLUNIFORM3IPROC glUniform3i = NULL;
PFNGLUNIFORM4IPROC glUniform4i = NULL;
PFNGLUNIFORM1FVPROC glUniform1fv = NULL;
PFNGLUNIFORM2FVPROC glUniform2fv = NULL;
PFNGLUNIFORM3FVPROC glUniform3fv = NULL;
PFNGLUNIFORM4FVPROC glUniform4fv = NULL;
PFNGLUNIFORM1IVPROC glUniform1iv = NULL;
PFNGLUNIFORM2IVPROC glUniform2iv = NULL;
PFNGLUNIFORM3IVPROC glUniform3iv = NULL;
PFNGLUNIFORM4IVPROC glUniform4iv = NULL;
PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv = NULL;
PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv = NULL;
PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv = NULL;
PFNGLVALIDATEPROGRAMPROC glValidateProgram = NULL;
PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d = NULL;
PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv = NULL;
PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f = NULL;
PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv = NULL;
PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s = NULL;
PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv = NULL;
PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d = NULL;
PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv = NULL;
PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f = NULL;
PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv = NULL;
PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s = NULL;
PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv = NULL;
PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d = NULL;
PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv = NULL;
PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f = NULL;
PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv = NULL;
PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s = NULL;
PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv = NULL;
PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv = NULL;
PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv = NULL;
PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv = NULL;
PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub = NULL;
PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv = NULL;
PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv = NULL;
PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv = NULL;
PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv = NULL;
PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d = NULL;
PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv = NULL;
PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f = NULL;
PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv = NULL;
PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv = NULL;
PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s = NULL;
PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv = NULL;
PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv = NULL;
PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv = NULL;
PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv = NULL;
PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer = NULL;
/********************************************************************************************************************************
														OpenGl 2.1
********************************************************************************************************************************/
PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv = NULL;
PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv = NULL;
PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv = NULL;
PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv = NULL;
PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv = NULL;
PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv = NULL;
/********************************************************************************************************************************
														OpenGl 3.0
********************************************************************************************************************************/
PFNGLCOLORMASKIPROC glColorMaski = NULL;
PFNGLGETBOOLEANI_VPROC glGetBooleani_v = NULL;
PFNGLGETINTEGERI_VPROC glGetIntegeri_v = NULL;
PFNGLENABLEIPROC glEnablei = NULL;
PFNGLDISABLEIPROC glDisablei = NULL;
PFNGLISENABLEDIPROC glIsEnabledi = NULL;
PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback = NULL;
PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback = NULL;
PFNGLBINDBUFFERRANGEPROC glBindBufferRange = NULL;
PFNGLBINDBUFFERBASEPROC glBindBufferBase = NULL;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings = NULL;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying = NULL;
PFNGLCLAMPCOLORPROC glClampColor = NULL;
PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender = NULL;
PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender = NULL;
PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer = NULL;
PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv = NULL;
PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv = NULL;
PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i = NULL;
PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i = NULL;
PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i = NULL;
PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i = NULL;
PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui = NULL;
PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui = NULL;
PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui = NULL;
PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui = NULL;
PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv = NULL;
PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv = NULL;
PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv = NULL;
PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv = NULL;
PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv = NULL;
PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv = NULL;
PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv = NULL;
PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv = NULL;
PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv = NULL;
PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv = NULL;
PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv = NULL;
PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv = NULL;
PFNGLGETUNIFORMUIVPROC glGetUniformuiv = NULL;
PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation = NULL;
PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation = NULL;
PFNGLUNIFORM1UIPROC glUniform1ui = NULL;
PFNGLUNIFORM2UIPROC glUniform2ui = NULL;
PFNGLUNIFORM3UIPROC glUniform3ui = NULL;
PFNGLUNIFORM4UIPROC glUniform4ui = NULL;
PFNGLUNIFORM1UIVPROC glUniform1uiv = NULL;
PFNGLUNIFORM2UIVPROC glUniform2uiv = NULL;
PFNGLUNIFORM3UIVPROC glUniform3uiv = NULL;
PFNGLUNIFORM4UIVPROC glUniform4uiv = NULL;
PFNGLTEXPARAMETERIIVPROC glTexParameterIiv = NULL;
PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv = NULL;
PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv = NULL;
PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv = NULL;
PFNGLCLEARBUFFERIVPROC glClearBufferiv = NULL;
PFNGLCLEARBUFFERUIVPROC glClearBufferuiv = NULL;
PFNGLCLEARBUFFERFVPROC glClearBufferfv = NULL;
PFNGLCLEARBUFFERFIPROC glClearBufferfi = NULL;
PFNGLGETSTRINGIPROC glGetStringi = NULL;
PFNGLISRENDERBUFFERPROC glIsRenderbuffer = NULL;
PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer = NULL;
PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers = NULL;
PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers = NULL;
PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage = NULL;
PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv = NULL;
PFNGLISFRAMEBUFFERPROC glIsFramebuffer = NULL;
PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer = NULL;
PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers = NULL;
PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers = NULL;
PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus = NULL;
PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D = NULL;
PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D = NULL;
PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D = NULL;
PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer = NULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv = NULL;
PFNGLGENERATEMIPMAPPROC glGenerateMipmap = NULL;
PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer = NULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample = NULL;
PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer = NULL;
PFNGLMAPBUFFERRANGEPROC glMapBufferRange = NULL;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange = NULL;
PFNGLBINDVERTEXARRAYPROC glBindVertexArray = NULL;
PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays = NULL;
PFNGLGENVERTEXARRAYSPROC glGenVertexArrays = NULL;
PFNGLISVERTEXARRAYPROC glIsVertexArray = NULL;
/********************************************************************************************************************************
														OpenGl 3.1
********************************************************************************************************************************/
PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced = NULL;
PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced = NULL;
PFNGLTEXBUFFERPROC glTexBuffer = NULL;
PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex = NULL;
PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData = NULL;
PFNGLGETUNIFORMINDICESPROC glGetUniformIndices = NULL;
PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv = NULL;
PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName = NULL;
PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex = NULL;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv = NULL;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName = NULL;
PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding = NULL;
/********************************************************************************************************************************
														OpenGl 3.2
********************************************************************************************************************************/
PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex = NULL;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex = NULL;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex = NULL;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex = NULL;
PFNGLPROVOKINGVERTEXPROC glProvokingVertex = NULL;
PFNGLFENCESYNCPROC glFenceSync = NULL;
PFNGLISSYNCPROC glIsSync = NULL;
PFNGLDELETESYNCPROC glDeleteSync = NULL;
PFNGLCLIENTWAITSYNCPROC glClientWaitSync = NULL;
PFNGLWAITSYNCPROC glWaitSync = NULL;
PFNGLGETINTEGER64VPROC glGetInteger64v = NULL;
PFNGLGETSYNCIVPROC glGetSynciv = NULL;
PFNGLGETINTEGER64I_VPROC glGetInteger64i_v = NULL;
PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v = NULL;
PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture = NULL;
PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample = NULL;
PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample = NULL;
PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv = NULL;
PFNGLSAMPLEMASKIPROC glSampleMaski = NULL;
/********************************************************************************************************************************
														OpenGl 3.3
********************************************************************************************************************************/
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed = NULL;
PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex = NULL;
PFNGLGENSAMPLERSPROC glGenSamplers = NULL;
PFNGLDELETESAMPLERSPROC glDeleteSamplers = NULL;
PFNGLISSAMPLERPROC glIsSampler = NULL;
PFNGLBINDSAMPLERPROC glBindSampler = NULL;
PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri = NULL;
PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv = NULL;
PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf = NULL;
PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv = NULL;
PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv = NULL;
PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv = NULL;
PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv = NULL;
PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv = NULL;
PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv = NULL;
PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv = NULL;
PFNGLQUERYCOUNTERPROC glQueryCounter = NULL;
PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v = NULL;
PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v = NULL;
PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor = NULL;
PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui = NULL;
PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv = NULL;
PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui = NULL;
PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv = NULL;
PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui = NULL;
PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv = NULL;
PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui = NULL;
PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv = NULL;
PFNGLVERTEXP2UIPROC glVertexP2ui = NULL;
PFNGLVERTEXP2UIVPROC glVertexP2uiv = NULL;
PFNGLVERTEXP3UIPROC glVertexP3ui = NULL;
PFNGLVERTEXP3UIVPROC glVertexP3uiv = NULL;
PFNGLVERTEXP4UIPROC glVertexP4ui = NULL;
PFNGLVERTEXP4UIVPROC glVertexP4uiv = NULL;
PFNGLTEXCOORDP1UIPROC glTexCoordP1ui = NULL;
PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv = NULL;
PFNGLTEXCOORDP2UIPROC glTexCoordP2ui = NULL;
PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv = NULL;
PFNGLTEXCOORDP3UIPROC glTexCoordP3ui = NULL;
PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv = NULL;
PFNGLTEXCOORDP4UIPROC glTexCoordP4ui = NULL;
PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv = NULL;
PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui = NULL;
PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv = NULL;
PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui = NULL;
PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv = NULL;
PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui = NULL;
PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv = NULL;
PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui = NULL;
PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv = NULL;
PFNGLNORMALP3UIPROC glNormalP3ui = NULL;
PFNGLNORMALP3UIVPROC glNormalP3uiv = NULL;
PFNGLCOLORP3UIPROC glColorP3ui = NULL;
PFNGLCOLORP3UIVPROC glColorP3uiv = NULL;
PFNGLCOLORP4UIPROC glColorP4ui = NULL;
PFNGLCOLORP4UIVPROC glColorP4uiv = NULL;
PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui = NULL;
PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv = NULL;
/********************************************************************************************************************************
														OpenGl 4.0
********************************************************************************************************************************/
PFNGLMINSAMPLESHADINGPROC glMinSampleShading = NULL;
PFNGLBLENDEQUATIONIPROC glBlendEquationi = NULL;
PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei = NULL;
PFNGLBLENDFUNCIPROC glBlendFunci = NULL;
PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei = NULL;
PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect = NULL;
PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect = NULL;
PFNGLUNIFORM1DPROC glUniform1d = NULL;
PFNGLUNIFORM2DPROC glUniform2d = NULL;
PFNGLUNIFORM3DPROC glUniform3d = NULL;
PFNGLUNIFORM4DPROC glUniform4d = NULL;
PFNGLUNIFORM1DVPROC glUniform1dv = NULL;
PFNGLUNIFORM2DVPROC glUniform2dv = NULL;
PFNGLUNIFORM3DVPROC glUniform3dv = NULL;
PFNGLUNIFORM4DVPROC glUniform4dv = NULL;
PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv = NULL;
PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv = NULL;
PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv = NULL;
PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv = NULL;
PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv = NULL;
PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv = NULL;
PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv = NULL;
PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv = NULL;
PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv = NULL;
PFNGLGETUNIFORMDVPROC glGetUniformdv = NULL;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation = NULL;
PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex = NULL;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv = NULL;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName = NULL;
PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName = NULL;
PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv = NULL;
PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv = NULL;
PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv = NULL;
PFNGLPATCHPARAMETERIPROC glPatchParameteri = NULL;
PFNGLPATCHPARAMETERFVPROC glPatchParameterfv = NULL;
PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback = NULL;
PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks = NULL;
PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks = NULL;
PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback = NULL;
PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback = NULL;
PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback = NULL;
PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback = NULL;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream = NULL;
PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed = NULL;
PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed = NULL;
PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv = NULL;
/********************************************************************************************************************************
														OpenGl 4.1
********************************************************************************************************************************/
PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler = NULL;
PFNGLSHADERBINARYPROC glShaderBinary = NULL;
PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat = NULL;
PFNGLDEPTHRANGEFPROC glDepthRangef = NULL;
PFNGLCLEARDEPTHFPROC glClearDepthf = NULL;
PFNGLGETPROGRAMBINARYPROC glGetProgramBinary = NULL;
PFNGLPROGRAMBINARYPROC glProgramBinary = NULL;
PFNGLPROGRAMPARAMETERIPROC glProgramParameteri = NULL;
PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages = NULL;
PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram = NULL;
PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv = NULL;
PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline = NULL;
PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines = NULL;
PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines = NULL;
PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline = NULL;
PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv = NULL;
PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i = NULL;
PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv = NULL;
PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f = NULL;
PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv = NULL;
PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d = NULL;
PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv = NULL;
PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui = NULL;
PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv = NULL;
PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i = NULL;
PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv = NULL;
PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f = NULL;
PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv = NULL;
PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d = NULL;
PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv = NULL;
PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui = NULL;
PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv = NULL;
PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i = NULL;
PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv = NULL;
PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f = NULL;
PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv = NULL;
PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d = NULL;
PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv = NULL;
PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui = NULL;
PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv = NULL;
PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i = NULL;
PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv = NULL;
PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f = NULL;
PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv = NULL;
PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d = NULL;
PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv = NULL;
PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui = NULL;
PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv = NULL;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv = NULL;
PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline = NULL;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog = NULL;
PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d = NULL;
PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d = NULL;
PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d = NULL;
PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d = NULL;
PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv = NULL;
PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv = NULL;
PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv = NULL;
PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv = NULL;
PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer = NULL;
PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv = NULL;
PFNGLVIEWPORTARRAYVPROC glViewportArrayv = NULL;
PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf = NULL;
PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv = NULL;
PFNGLSCISSORARRAYVPROC glScissorArrayv = NULL;
PFNGLSCISSORINDEXEDPROC glScissorIndexed = NULL;
PFNGLSCISSORINDEXEDVPROC glScissorIndexedv = NULL;
PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv = NULL;
PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed = NULL;
PFNGLGETFLOATI_VPROC glGetFloati_v = NULL;
PFNGLGETDOUBLEI_VPROC glGetDoublei_v = NULL;
/********************************************************************************************************************************
														OpenGl 4.2
********************************************************************************************************************************/
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance = NULL;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance = NULL;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance = NULL;
PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ = NULL;
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv = NULL;
PFNGLBINDIMAGETEXTUREPROC glBindImageTexture = NULL;
PFNGLMEMORYBARRIERPROC glMemoryBarrier = NULL;
PFNGLTEXSTORAGE1DPROC glTexStorage1D = NULL;
PFNGLTEXSTORAGE2DPROC glTexStorage2D = NULL;
PFNGLTEXSTORAGE3DPROC glTexStorage3D = NULL;
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced = NULL;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced = NULL;
/********************************************************************************************************************************
														OpenGl 4.3
********************************************************************************************************************************/
PFNGLCLEARBUFFERDATAPROC glClearBufferData = NULL;
PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData = NULL;
PFNGLDISPATCHCOMPUTEPROC glDispatchCompute = NULL;
PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect = NULL;
PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData = NULL;
PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri = NULL;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv = NULL;
PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v = NULL;
PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage = NULL;
PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage = NULL;
PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData = NULL;
PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData = NULL;
PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer = NULL;
PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer = NULL;
PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect = NULL;
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect = NULL;
PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv = NULL;
PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex = NULL;
PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName = NULL;
PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv = NULL;
PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation = NULL;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex = NULL;
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding = NULL;
PFNGLTEXBUFFERRANGEPROC glTexBufferRange = NULL;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample = NULL;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample = NULL;
PFNGLTEXTUREVIEWPROC glTextureView = NULL;
PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer = NULL;
PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat = NULL;
PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat = NULL;
PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat = NULL;
PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding = NULL;
PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor = NULL;
PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl = NULL;
PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert = NULL;
PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback = NULL;
PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog = NULL;
PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup = NULL;
PFNGLPOPDEBUGGROUPPROC glPopDebugGroup = NULL;
PFNGLOBJECTLABELPROC glObjectLabel = NULL;
PFNGLGETOBJECTLABELPROC glGetObjectLabel = NULL;
PFNGLOBJECTPTRLABELPROC glObjectPtrLabel = NULL;
PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel = NULL;
/********************************************************************************************************************************
														OpenGl 4.4
********************************************************************************************************************************/
PFNGLBUFFERSTORAGEPROC glBufferStorage = NULL;
PFNGLCLEARTEXIMAGEPROC glClearTexImage = NULL;
PFNGLCLEARTEXSUBIMAGEPROC glClearTexSubImage = NULL;
PFNGLBINDBUFFERSBASEPROC glBindBuffersBase = NULL;
PFNGLBINDBUFFERSRANGEPROC glBindBuffersRange = NULL;
PFNGLBINDTEXTURESPROC glBindTextures = NULL;
PFNGLBINDSAMPLERSPROC glBindSamplers = NULL;
PFNGLBINDIMAGETEXTURESPROC glBindImageTextures = NULL;
PFNGLBINDVERTEXBUFFERSPROC glBindVertexBuffers = NULL;
/********************************************************************************************************************************
														OpenGl 4.5
********************************************************************************************************************************/
PFNGLCLIPCONTROLPROC glClipControl = NULL;
PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks = NULL;
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase = NULL;
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange = NULL;
PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv = NULL;
PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v = NULL;
PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v = NULL;
PFNGLCREATEBUFFERSPROC glCreateBuffers = NULL;
PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage = NULL;
PFNGLNAMEDBUFFERDATAPROC glNamedBufferData = NULL;
PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData = NULL;
PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData = NULL;
PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData = NULL;
PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData = NULL;
PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer = NULL;
PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange = NULL;
PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer = NULL;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange = NULL;
PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv = NULL;
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v = NULL;
PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv = NULL;
PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData = NULL;
PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers = NULL;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer = NULL;
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture = NULL;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer = NULL;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer = NULL;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers = NULL;
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer = NULL;
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData = NULL;
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData = NULL;
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv = NULL;
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv = NULL;
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv = NULL;
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi = NULL;
PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer = NULL;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus = NULL;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv = NULL;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv = NULL;
PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage = NULL;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample = NULL;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv = NULL;
PFNGLCREATETEXTURESPROC glCreateTextures = NULL;
PFNGLTEXTUREBUFFERPROC glTextureBuffer = NULL;
PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange = NULL;
PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D = NULL;
PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D = NULL;
PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D = NULL;
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample = NULL;
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample = NULL;
PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D = NULL;
PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D = NULL;
PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D = NULL;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D = NULL;
PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D = NULL;
PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D = NULL;
PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D = NULL;
PFNGLTEXTUREPARAMETERFPROC glTextureParameterf = NULL;
PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv = NULL;
PFNGLTEXTUREPARAMETERIPROC glTextureParameteri = NULL;
PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv = NULL;
PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv = NULL;
PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv = NULL;
PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap = NULL;
PFNGLBINDTEXTUREUNITPROC glBindTextureUnit = NULL;
PFNGLGETTEXTUREIMAGEPROC glGetTextureImage = NULL;
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage = NULL;
PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv = NULL;
PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv = NULL;
PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv = NULL;
PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv = NULL;
PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv = NULL;
PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv = NULL;
PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays = NULL;
PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib = NULL;
PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib = NULL;
PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer = NULL;
PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer = NULL;
PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers = NULL;
PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding = NULL;
PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat = NULL;
PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat = NULL;
PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat = NULL;
PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor = NULL;
PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv = NULL;
PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv = NULL;
PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv = NULL;
PFNGLCREATESAMPLERSPROC glCreateSamplers = NULL;
PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines = NULL;
PFNGLCREATEQUERIESPROC glCreateQueries = NULL;
PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v = NULL;
PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv = NULL;
PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v = NULL;
PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv = NULL;
PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion = NULL;
PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage = NULL;
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage = NULL;
PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus = NULL;
PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage = NULL;
PFNGLGETNTEXIMAGEPROC glGetnTexImage = NULL;
PFNGLGETNUNIFORMDVPROC glGetnUniformdv = NULL;
PFNGLGETNUNIFORMFVPROC glGetnUniformfv = NULL;
PFNGLGETNUNIFORMIVPROC glGetnUniformiv = NULL;
PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv = NULL;
PFNGLREADNPIXELSPROC glReadnPixels = NULL;
PFNGLGETNMAPDVPROC glGetnMapdv = NULL;
PFNGLGETNMAPFVPROC glGetnMapfv = NULL;
PFNGLGETNMAPIVPROC glGetnMapiv = NULL;
PFNGLGETNPIXELMAPFVPROC glGetnPixelMapfv = NULL;
PFNGLGETNPIXELMAPUIVPROC glGetnPixelMapuiv = NULL;
PFNGLGETNPIXELMAPUSVPROC glGetnPixelMapusv = NULL;
PFNGLGETNPOLYGONSTIPPLEPROC glGetnPolygonStipple = NULL;
PFNGLGETNCOLORTABLEPROC glGetnColorTable = NULL;
PFNGLGETNCONVOLUTIONFILTERPROC glGetnConvolutionFilter = NULL;
PFNGLGETNSEPARABLEFILTERPROC glGetnSeparableFilter = NULL;
PFNGLGETNHISTOGRAMPROC glGetnHistogram = NULL;
PFNGLGETNMINMAXPROC glGetnMinmax = NULL;
PFNGLTEXTUREBARRIERPROC glTextureBarrier = NULL;
/********************************************************************************************************************************
														OpenGl 4.6
********************************************************************************************************************************/
PFNGLSPECIALIZESHADERPROC glSpecializeShader = NULL;
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glMultiDrawArraysIndirectCount = NULL;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glMultiDrawElementsIndirectCount = NULL;
PFNGLPOLYGONOFFSETCLAMPPROC glPolygonOffsetClamp = NULL;

void OpenGL_Init_1_0()
{
	glCullFace = (PFNGLCULLFACEPROC)OpenGL_Load("glCullFace");
	glFrontFace = (PFNGLFRONTFACEPROC)OpenGL_Load("glFrontFace");
	glHint = (PFNGLHINTPROC)OpenGL_Load("glHint");
	glLineWidth = (PFNGLLINEWIDTHPROC)OpenGL_Load("glLineWidth");
	glPointSize = (PFNGLPOINTSIZEPROC)OpenGL_Load("glPointSize");
	glPolygonMode = (PFNGLPOLYGONMODEPROC)OpenGL_Load("glPolygonMode");
	glScissor = (PFNGLSCISSORPROC)OpenGL_Load("glScissor");
	glTexParameterf = (PFNGLTEXPARAMETERFPROC)OpenGL_Load("glTexParameterf");
	glTexParameterfv = (PFNGLTEXPARAMETERFVPROC)OpenGL_Load("glTexParameterfv");
	glTexParameteri = (PFNGLTEXPARAMETERIPROC)OpenGL_Load("glTexParameteri");
	glTexParameteriv = (PFNGLTEXPARAMETERIVPROC)OpenGL_Load("glTexParameteriv");
	glTexImage1D = (PFNGLTEXIMAGE1DPROC)OpenGL_Load("glTexImage1D");
	glTexImage2D = (PFNGLTEXIMAGE2DPROC)OpenGL_Load("glTexImage2D");
	glDrawBuffer = (PFNGLDRAWBUFFERPROC)OpenGL_Load("glDrawBuffer");
	glClear = (PFNGLCLEARPROC)OpenGL_Load("glClear");
	glClearColor = (PFNGLCLEARCOLORPROC)OpenGL_Load("glClearColor");
	glClearStencil = (PFNGLCLEARSTENCILPROC)OpenGL_Load("glClearStencil");
	glClearDepth = (PFNGLCLEARDEPTHPROC)OpenGL_Load("glClearDepth");
	glStencilMask = (PFNGLSTENCILMASKPROC)OpenGL_Load("glStencilMask");
	glColorMask = (PFNGLCOLORMASKPROC)OpenGL_Load("glColorMask");
	glDepthMask = (PFNGLDEPTHMASKPROC)OpenGL_Load("glDepthMask");
	glDisable = (PFNGLDISABLEPROC)OpenGL_Load("glDisable");
	glEnable = (PFNGLENABLEPROC)OpenGL_Load("glEnable");
	glFinish = (PFNGLFINISHPROC)OpenGL_Load("glFinish");
	glFlush = (PFNGLFLUSHPROC)OpenGL_Load("glFlush");
	glBlendFunc = (PFNGLBLENDFUNCPROC)OpenGL_Load("glBlendFunc");
	glLogicOp = (PFNGLLOGICOPPROC)OpenGL_Load("glLogicOp");
	glStencilFunc = (PFNGLSTENCILFUNCPROC)OpenGL_Load("glStencilFunc");
	glStencilOp = (PFNGLSTENCILOPPROC)OpenGL_Load("glStencilOp");
	glDepthFunc = (PFNGLDEPTHFUNCPROC)OpenGL_Load("glDepthFunc");
	glPixelStoref = (PFNGLPIXELSTOREFPROC)OpenGL_Load("glPixelStoref");
	glPixelStorei = (PFNGLPIXELSTOREIPROC)OpenGL_Load("glPixelStorei");
	glReadBuffer = (PFNGLREADBUFFERPROC)OpenGL_Load("glReadBuffer");
	glReadPixels = (PFNGLREADPIXELSPROC)OpenGL_Load("glReadPixels");
	glGetBooleanv = (PFNGLGETBOOLEANVPROC)OpenGL_Load("glGetBooleanv");
	glGetDoublev = (PFNGLGETDOUBLEVPROC)OpenGL_Load("glGetDoublev");
	glGetError = (PFNGLGETERRORPROC)OpenGL_Load("glGetError");
	glGetFloatv = (PFNGLGETFLOATVPROC)OpenGL_Load("glGetFloatv");
	glGetIntegerv = (PFNGLGETINTEGERVPROC)OpenGL_Load("glGetIntegerv");
	glGetString = (PFNGLGETSTRINGPROC)OpenGL_Load("glGetString");
	glGetTexImage = (PFNGLGETTEXIMAGEPROC)OpenGL_Load("glGetTexImage");
	glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC)OpenGL_Load("glGetTexParameterfv");
	glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC)OpenGL_Load("glGetTexParameteriv");
	glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)OpenGL_Load("glGetTexLevelParameterfv");
	glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)OpenGL_Load("glGetTexLevelParameteriv");
	glIsEnabled = (PFNGLISENABLEDPROC)OpenGL_Load("glIsEnabled");
	glDepthRange = (PFNGLDEPTHRANGEPROC)OpenGL_Load("glDepthRange");
	glViewport = (PFNGLVIEWPORTPROC)OpenGL_Load("glViewport");
	glNewList = (PFNGLNEWLISTPROC)OpenGL_Load("glNewList");
	glEndList = (PFNGLENDLISTPROC)OpenGL_Load("glEndList");
	glCallList = (PFNGLCALLLISTPROC)OpenGL_Load("glCallList");
	glCallLists = (PFNGLCALLLISTSPROC)OpenGL_Load("glCallLists");
	glDeleteLists = (PFNGLDELETELISTSPROC)OpenGL_Load("glDeleteLists");
	glGenLists = (PFNGLGENLISTSPROC)OpenGL_Load("glGenLists");
	glListBase = (PFNGLLISTBASEPROC)OpenGL_Load("glListBase");
	glBegin = (PFNGLBEGINPROC)OpenGL_Load("glBegin");
	glBitmap = (PFNGLBITMAPPROC)OpenGL_Load("glBitmap");
	glColor3b = (PFNGLCOLOR3BPROC)OpenGL_Load("glColor3b");
	glColor3bv = (PFNGLCOLOR3BVPROC)OpenGL_Load("glColor3bv");
	glColor3d = (PFNGLCOLOR3DPROC)OpenGL_Load("glColor3d");
	glColor3dv = (PFNGLCOLOR3DVPROC)OpenGL_Load("glColor3dv");
	glColor3f = (PFNGLCOLOR3FPROC)OpenGL_Load("glColor3f");
	glColor3fv = (PFNGLCOLOR3FVPROC)OpenGL_Load("glColor3fv");
	glColor3i = (PFNGLCOLOR3IPROC)OpenGL_Load("glColor3i");
	glColor3iv = (PFNGLCOLOR3IVPROC)OpenGL_Load("glColor3iv");
	glColor3s = (PFNGLCOLOR3SPROC)OpenGL_Load("glColor3s");
	glColor3sv = (PFNGLCOLOR3SVPROC)OpenGL_Load("glColor3sv");
	glColor3ub = (PFNGLCOLOR3UBPROC)OpenGL_Load("glColor3ub");
	glColor3ubv = (PFNGLCOLOR3UBVPROC)OpenGL_Load("glColor3ubv");
	glColor3ui = (PFNGLCOLOR3UIPROC)OpenGL_Load("glColor3ui");
	glColor3uiv = (PFNGLCOLOR3UIVPROC)OpenGL_Load("glColor3uiv");
	glColor3us = (PFNGLCOLOR3USPROC)OpenGL_Load("glColor3us");
	glColor3usv = (PFNGLCOLOR3USVPROC)OpenGL_Load("glColor3usv");
	glColor4b = (PFNGLCOLOR4BPROC)OpenGL_Load("glColor4b");
	glColor4bv = (PFNGLCOLOR4BVPROC)OpenGL_Load("glColor4bv");
	glColor4d = (PFNGLCOLOR4DPROC)OpenGL_Load("glColor4d");
	glColor4dv = (PFNGLCOLOR4DVPROC)OpenGL_Load("glColor4dv");
	glColor4f = (PFNGLCOLOR4FPROC)OpenGL_Load("glColor4f");
	glColor4fv = (PFNGLCOLOR4FVPROC)OpenGL_Load("glColor4fv");
	glColor4i = (PFNGLCOLOR4IPROC)OpenGL_Load("glColor4i");
	glColor4iv = (PFNGLCOLOR4IVPROC)OpenGL_Load("glColor4iv");
	glColor4s = (PFNGLCOLOR4SPROC)OpenGL_Load("glColor4s");
	glColor4sv = (PFNGLCOLOR4SVPROC)OpenGL_Load("glColor4sv");
	glColor4ub = (PFNGLCOLOR4UBPROC)OpenGL_Load("glColor4ub");
	glColor4ubv = (PFNGLCOLOR4UBVPROC)OpenGL_Load("glColor4ubv");
	glColor4ui = (PFNGLCOLOR4UIPROC)OpenGL_Load("glColor4ui");
	glColor4uiv = (PFNGLCOLOR4UIVPROC)OpenGL_Load("glColor4uiv");
	glColor4us = (PFNGLCOLOR4USPROC)OpenGL_Load("glColor4us");
	glColor4usv = (PFNGLCOLOR4USVPROC)OpenGL_Load("glColor4usv");
	glEdgeFlag = (PFNGLEDGEFLAGPROC)OpenGL_Load("glEdgeFlag");
	glEdgeFlagv = (PFNGLEDGEFLAGVPROC)OpenGL_Load("glEdgeFlagv");
	glEnd = (PFNGLENDPROC)OpenGL_Load("glEnd");
	glIndexd = (PFNGLINDEXDPROC)OpenGL_Load("glIndexd");
	glIndexdv = (PFNGLINDEXDVPROC)OpenGL_Load("glIndexdv");
	glIndexf = (PFNGLINDEXFPROC)OpenGL_Load("glIndexf");
	glIndexfv = (PFNGLINDEXFVPROC)OpenGL_Load("glIndexfv");
	glIndexi = (PFNGLINDEXIPROC)OpenGL_Load("glIndexi");
	glIndexiv = (PFNGLINDEXIVPROC)OpenGL_Load("glIndexiv");
	glIndexs = (PFNGLINDEXSPROC)OpenGL_Load("glIndexs");
	glIndexsv = (PFNGLINDEXSVPROC)OpenGL_Load("glIndexsv");
	glNormal3b = (PFNGLNORMAL3BPROC)OpenGL_Load("glNormal3b");
	glNormal3bv = (PFNGLNORMAL3BVPROC)OpenGL_Load("glNormal3bv");
	glNormal3d = (PFNGLNORMAL3DPROC)OpenGL_Load("glNormal3d");
	glNormal3dv = (PFNGLNORMAL3DVPROC)OpenGL_Load("glNormal3dv");
	glNormal3f = (PFNGLNORMAL3FPROC)OpenGL_Load("glNormal3f");
	glNormal3fv = (PFNGLNORMAL3FVPROC)OpenGL_Load("glNormal3fv");
	glNormal3i = (PFNGLNORMAL3IPROC)OpenGL_Load("glNormal3i");
	glNormal3iv = (PFNGLNORMAL3IVPROC)OpenGL_Load("glNormal3iv");
	glNormal3s = (PFNGLNORMAL3SPROC)OpenGL_Load("glNormal3s");
	glNormal3sv = (PFNGLNORMAL3SVPROC)OpenGL_Load("glNormal3sv");
	glRasterPos2d = (PFNGLRASTERPOS2DPROC)OpenGL_Load("glRasterPos2d");
	glRasterPos2dv = (PFNGLRASTERPOS2DVPROC)OpenGL_Load("glRasterPos2dv");
	glRasterPos2f = (PFNGLRASTERPOS2FPROC)OpenGL_Load("glRasterPos2f");
	glRasterPos2fv = (PFNGLRASTERPOS2FVPROC)OpenGL_Load("glRasterPos2fv");
	glRasterPos2i = (PFNGLRASTERPOS2IPROC)OpenGL_Load("glRasterPos2i");
	glRasterPos2iv = (PFNGLRASTERPOS2IVPROC)OpenGL_Load("glRasterPos2iv");
	glRasterPos2s = (PFNGLRASTERPOS2SPROC)OpenGL_Load("glRasterPos2s");
	glRasterPos2sv = (PFNGLRASTERPOS2SVPROC)OpenGL_Load("glRasterPos2sv");
	glRasterPos3d = (PFNGLRASTERPOS3DPROC)OpenGL_Load("glRasterPos3d");
	glRasterPos3dv = (PFNGLRASTERPOS3DVPROC)OpenGL_Load("glRasterPos3dv");
	glRasterPos3f = (PFNGLRASTERPOS3FPROC)OpenGL_Load("glRasterPos3f");
	glRasterPos3fv = (PFNGLRASTERPOS3FVPROC)OpenGL_Load("glRasterPos3fv");
	glRasterPos3i = (PFNGLRASTERPOS3IPROC)OpenGL_Load("glRasterPos3i");
	glRasterPos3iv = (PFNGLRASTERPOS3IVPROC)OpenGL_Load("glRasterPos3iv");
	glRasterPos3s = (PFNGLRASTERPOS3SPROC)OpenGL_Load("glRasterPos3s");
	glRasterPos3sv = (PFNGLRASTERPOS3SVPROC)OpenGL_Load("glRasterPos3sv");
	glRasterPos4d = (PFNGLRASTERPOS4DPROC)OpenGL_Load("glRasterPos4d");
	glRasterPos4dv = (PFNGLRASTERPOS4DVPROC)OpenGL_Load("glRasterPos4dv");
	glRasterPos4f = (PFNGLRASTERPOS4FPROC)OpenGL_Load("glRasterPos4f");
	glRasterPos4fv = (PFNGLRASTERPOS4FVPROC)OpenGL_Load("glRasterPos4fv");
	glRasterPos4i = (PFNGLRASTERPOS4IPROC)OpenGL_Load("glRasterPos4i");
	glRasterPos4iv = (PFNGLRASTERPOS4IVPROC)OpenGL_Load("glRasterPos4iv");
	glRasterPos4s = (PFNGLRASTERPOS4SPROC)OpenGL_Load("glRasterPos4s");
	glRasterPos4sv = (PFNGLRASTERPOS4SVPROC)OpenGL_Load("glRasterPos4sv");
	glRectd = (PFNGLRECTDPROC)OpenGL_Load("glRectd");
	glRectdv = (PFNGLRECTDVPROC)OpenGL_Load("glRectdv");
	glRectf = (PFNGLRECTFPROC)OpenGL_Load("glRectf");
	glRectfv = (PFNGLRECTFVPROC)OpenGL_Load("glRectfv");
	glRecti = (PFNGLRECTIPROC)OpenGL_Load("glRecti");
	glRectiv = (PFNGLRECTIVPROC)OpenGL_Load("glRectiv");
	glRects = (PFNGLRECTSPROC)OpenGL_Load("glRects");
	glRectsv = (PFNGLRECTSVPROC)OpenGL_Load("glRectsv");
	glTexCoord1d = (PFNGLTEXCOORD1DPROC)OpenGL_Load("glTexCoord1d");
	glTexCoord1dv = (PFNGLTEXCOORD1DVPROC)OpenGL_Load("glTexCoord1dv");
	glTexCoord1f = (PFNGLTEXCOORD1FPROC)OpenGL_Load("glTexCoord1f");
	glTexCoord1fv = (PFNGLTEXCOORD1FVPROC)OpenGL_Load("glTexCoord1fv");
	glTexCoord1i = (PFNGLTEXCOORD1IPROC)OpenGL_Load("glTexCoord1i");
	glTexCoord1iv = (PFNGLTEXCOORD1IVPROC)OpenGL_Load("glTexCoord1iv");
	glTexCoord1s = (PFNGLTEXCOORD1SPROC)OpenGL_Load("glTexCoord1s");
	glTexCoord1sv = (PFNGLTEXCOORD1SVPROC)OpenGL_Load("glTexCoord1sv");
	glTexCoord2d = (PFNGLTEXCOORD2DPROC)OpenGL_Load("glTexCoord2d");
	glTexCoord2dv = (PFNGLTEXCOORD2DVPROC)OpenGL_Load("glTexCoord2dv");
	glTexCoord2f = (PFNGLTEXCOORD2FPROC)OpenGL_Load("glTexCoord2f");
	glTexCoord2fv = (PFNGLTEXCOORD2FVPROC)OpenGL_Load("glTexCoord2fv");
	glTexCoord2i = (PFNGLTEXCOORD2IPROC)OpenGL_Load("glTexCoord2i");
	glTexCoord2iv = (PFNGLTEXCOORD2IVPROC)OpenGL_Load("glTexCoord2iv");
	glTexCoord2s = (PFNGLTEXCOORD2SPROC)OpenGL_Load("glTexCoord2s");
	glTexCoord2sv = (PFNGLTEXCOORD2SVPROC)OpenGL_Load("glTexCoord2sv");
	glTexCoord3d = (PFNGLTEXCOORD3DPROC)OpenGL_Load("glTexCoord3d");
	glTexCoord3dv = (PFNGLTEXCOORD3DVPROC)OpenGL_Load("glTexCoord3dv");
	glTexCoord3f = (PFNGLTEXCOORD3FPROC)OpenGL_Load("glTexCoord3f");
	glTexCoord3fv = (PFNGLTEXCOORD3FVPROC)OpenGL_Load("glTexCoord3fv");
	glTexCoord3i = (PFNGLTEXCOORD3IPROC)OpenGL_Load("glTexCoord3i");
	glTexCoord3iv = (PFNGLTEXCOORD3IVPROC)OpenGL_Load("glTexCoord3iv");
	glTexCoord3s = (PFNGLTEXCOORD3SPROC)OpenGL_Load("glTexCoord3s");
	glTexCoord3sv = (PFNGLTEXCOORD3SVPROC)OpenGL_Load("glTexCoord3sv");
	glTexCoord4d = (PFNGLTEXCOORD4DPROC)OpenGL_Load("glTexCoord4d");
	glTexCoord4dv = (PFNGLTEXCOORD4DVPROC)OpenGL_Load("glTexCoord4dv");
	glTexCoord4f = (PFNGLTEXCOORD4FPROC)OpenGL_Load("glTexCoord4f");
	glTexCoord4fv = (PFNGLTEXCOORD4FVPROC)OpenGL_Load("glTexCoord4fv");
	glTexCoord4i = (PFNGLTEXCOORD4IPROC)OpenGL_Load("glTexCoord4i");
	glTexCoord4iv = (PFNGLTEXCOORD4IVPROC)OpenGL_Load("glTexCoord4iv");
	glTexCoord4s = (PFNGLTEXCOORD4SPROC)OpenGL_Load("glTexCoord4s");
	glTexCoord4sv = (PFNGLTEXCOORD4SVPROC)OpenGL_Load("glTexCoord4sv");
	glVertex2d = (PFNGLVERTEX2DPROC)OpenGL_Load("glVertex2d");
	glVertex2dv = (PFNGLVERTEX2DVPROC)OpenGL_Load("glVertex2dv");
	glVertex2f = (PFNGLVERTEX2FPROC)OpenGL_Load("glVertex2f");
	glVertex2fv = (PFNGLVERTEX2FVPROC)OpenGL_Load("glVertex2fv");
	glVertex2i = (PFNGLVERTEX2IPROC)OpenGL_Load("glVertex2i");
	glVertex2iv = (PFNGLVERTEX2IVPROC)OpenGL_Load("glVertex2iv");
	glVertex2s = (PFNGLVERTEX2SPROC)OpenGL_Load("glVertex2s");
	glVertex2sv = (PFNGLVERTEX2SVPROC)OpenGL_Load("glVertex2sv");
	glVertex3d = (PFNGLVERTEX3DPROC)OpenGL_Load("glVertex3d");
	glVertex3dv = (PFNGLVERTEX3DVPROC)OpenGL_Load("glVertex3dv");
	glVertex3f = (PFNGLVERTEX3FPROC)OpenGL_Load("glVertex3f");
	glVertex3fv = (PFNGLVERTEX3FVPROC)OpenGL_Load("glVertex3fv");
	glVertex3i = (PFNGLVERTEX3IPROC)OpenGL_Load("glVertex3i");
	glVertex3iv = (PFNGLVERTEX3IVPROC)OpenGL_Load("glVertex3iv");
	glVertex3s = (PFNGLVERTEX3SPROC)OpenGL_Load("glVertex3s");
	glVertex3sv = (PFNGLVERTEX3SVPROC)OpenGL_Load("glVertex3sv");
	glVertex4d = (PFNGLVERTEX4DPROC)OpenGL_Load("glVertex4d");
	glVertex4dv = (PFNGLVERTEX4DVPROC)OpenGL_Load("glVertex4dv");
	glVertex4f = (PFNGLVERTEX4FPROC)OpenGL_Load("glVertex4f");
	glVertex4fv = (PFNGLVERTEX4FVPROC)OpenGL_Load("glVertex4fv");
	glVertex4i = (PFNGLVERTEX4IPROC)OpenGL_Load("glVertex4i");
	glVertex4iv = (PFNGLVERTEX4IVPROC)OpenGL_Load("glVertex4iv");
	glVertex4s = (PFNGLVERTEX4SPROC)OpenGL_Load("glVertex4s");
	glVertex4sv = (PFNGLVERTEX4SVPROC)OpenGL_Load("glVertex4sv");
	glClipPlane = (PFNGLCLIPPLANEPROC)OpenGL_Load("glClipPlane");
	glColorMaterial = (PFNGLCOLORMATERIALPROC)OpenGL_Load("glColorMaterial");
	glFogf = (PFNGLFOGFPROC)OpenGL_Load("glFogf");
	glFogfv = (PFNGLFOGFVPROC)OpenGL_Load("glFogfv");
	glFogi = (PFNGLFOGIPROC)OpenGL_Load("glFogi");
	glFogiv = (PFNGLFOGIVPROC)OpenGL_Load("glFogiv");
	glLightf = (PFNGLLIGHTFPROC)OpenGL_Load("glLightf");
	glLightfv = (PFNGLLIGHTFVPROC)OpenGL_Load("glLightfv");
	glLighti = (PFNGLLIGHTIPROC)OpenGL_Load("glLighti");
	glLightiv = (PFNGLLIGHTIVPROC)OpenGL_Load("glLightiv");
	glLightModelf = (PFNGLLIGHTMODELFPROC)OpenGL_Load("glLightModelf");
	glLightModelfv = (PFNGLLIGHTMODELFVPROC)OpenGL_Load("glLightModelfv");
	glLightModeli = (PFNGLLIGHTMODELIPROC)OpenGL_Load("glLightModeli");
	glLightModeliv = (PFNGLLIGHTMODELIVPROC)OpenGL_Load("glLightModeliv");
	glLineStipple = (PFNGLLINESTIPPLEPROC)OpenGL_Load("glLineStipple");
	glMaterialf = (PFNGLMATERIALFPROC)OpenGL_Load("glMaterialf");
	glMaterialfv = (PFNGLMATERIALFVPROC)OpenGL_Load("glMaterialfv");
	glMateriali = (PFNGLMATERIALIPROC)OpenGL_Load("glMateriali");
	glMaterialiv = (PFNGLMATERIALIVPROC)OpenGL_Load("glMaterialiv");
	glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC)OpenGL_Load("glPolygonStipple");
	glShadeModel = (PFNGLSHADEMODELPROC)OpenGL_Load("glShadeModel");
	glTexEnvf = (PFNGLTEXENVFPROC)OpenGL_Load("glTexEnvf");
	glTexEnvfv = (PFNGLTEXENVFVPROC)OpenGL_Load("glTexEnvfv");
	glTexEnvi = (PFNGLTEXENVIPROC)OpenGL_Load("glTexEnvi");
	glTexEnviv = (PFNGLTEXENVIVPROC)OpenGL_Load("glTexEnviv");
	glTexGend = (PFNGLTEXGENDPROC)OpenGL_Load("glTexGend");
	glTexGendv = (PFNGLTEXGENDVPROC)OpenGL_Load("glTexGendv");
	glTexGenf = (PFNGLTEXGENFPROC)OpenGL_Load("glTexGenf");
	glTexGenfv = (PFNGLTEXGENFVPROC)OpenGL_Load("glTexGenfv");
	glTexGeni = (PFNGLTEXGENIPROC)OpenGL_Load("glTexGeni");
	glTexGeniv = (PFNGLTEXGENIVPROC)OpenGL_Load("glTexGeniv");
	glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC)OpenGL_Load("glFeedbackBuffer");
	glSelectBuffer = (PFNGLSELECTBUFFERPROC)OpenGL_Load("glSelectBuffer");
	glRenderMode = (PFNGLRENDERMODEPROC)OpenGL_Load("glRenderMode");
	glInitNames = (PFNGLINITNAMESPROC)OpenGL_Load("glInitNames");
	glLoadName = (PFNGLLOADNAMEPROC)OpenGL_Load("glLoadName");
	glPassThrough = (PFNGLPASSTHROUGHPROC)OpenGL_Load("glPassThrough");
	glPopName = (PFNGLPOPNAMEPROC)OpenGL_Load("glPopName");
	glPushName = (PFNGLPUSHNAMEPROC)OpenGL_Load("glPushName");
	glClearAccum = (PFNGLCLEARACCUMPROC)OpenGL_Load("glClearAccum");
	glClearIndex = (PFNGLCLEARINDEXPROC)OpenGL_Load("glClearIndex");
	glIndexMask = (PFNGLINDEXMASKPROC)OpenGL_Load("glIndexMask");
	glAccum = (PFNGLACCUMPROC)OpenGL_Load("glAccum");
	glPopAttrib = (PFNGLPOPATTRIBPROC)OpenGL_Load("glPopAttrib");
	glPushAttrib = (PFNGLPUSHATTRIBPROC)OpenGL_Load("glPushAttrib");
	glMap1d = (PFNGLMAP1DPROC)OpenGL_Load("glMap1d");
	glMap1f = (PFNGLMAP1FPROC)OpenGL_Load("glMap1f");
	glMap2d = (PFNGLMAP2DPROC)OpenGL_Load("glMap2d");
	glMap2f = (PFNGLMAP2FPROC)OpenGL_Load("glMap2f");
	glMapGrid1d = (PFNGLMAPGRID1DPROC)OpenGL_Load("glMapGrid1d");
	glMapGrid1f = (PFNGLMAPGRID1FPROC)OpenGL_Load("glMapGrid1f");
	glMapGrid2d = (PFNGLMAPGRID2DPROC)OpenGL_Load("glMapGrid2d");
	glMapGrid2f = (PFNGLMAPGRID2FPROC)OpenGL_Load("glMapGrid2f");
	glEvalCoord1d = (PFNGLEVALCOORD1DPROC)OpenGL_Load("glEvalCoord1d");
	glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC)OpenGL_Load("glEvalCoord1dv");
	glEvalCoord1f = (PFNGLEVALCOORD1FPROC)OpenGL_Load("glEvalCoord1f");
	glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC)OpenGL_Load("glEvalCoord1fv");
	glEvalCoord2d = (PFNGLEVALCOORD2DPROC)OpenGL_Load("glEvalCoord2d");
	glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC)OpenGL_Load("glEvalCoord2dv");
	glEvalCoord2f = (PFNGLEVALCOORD2FPROC)OpenGL_Load("glEvalCoord2f");
	glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC)OpenGL_Load("glEvalCoord2fv");
	glEvalMesh1 = (PFNGLEVALMESH1PROC)OpenGL_Load("glEvalMesh1");
	glEvalPoint1 = (PFNGLEVALPOINT1PROC)OpenGL_Load("glEvalPoint1");
	glEvalMesh2 = (PFNGLEVALMESH2PROC)OpenGL_Load("glEvalMesh2");
	glEvalPoint2 = (PFNGLEVALPOINT2PROC)OpenGL_Load("glEvalPoint2");
	glAlphaFunc = (PFNGLALPHAFUNCPROC)OpenGL_Load("glAlphaFunc");
	glPixelZoom = (PFNGLPIXELZOOMPROC)OpenGL_Load("glPixelZoom");
	glPixelTransferf = (PFNGLPIXELTRANSFERFPROC)OpenGL_Load("glPixelTransferf");
	glPixelTransferi = (PFNGLPIXELTRANSFERIPROC)OpenGL_Load("glPixelTransferi");
	glPixelMapfv = (PFNGLPIXELMAPFVPROC)OpenGL_Load("glPixelMapfv");
	glPixelMapuiv = (PFNGLPIXELMAPUIVPROC)OpenGL_Load("glPixelMapuiv");
	glPixelMapusv = (PFNGLPIXELMAPUSVPROC)OpenGL_Load("glPixelMapusv");
	glCopyPixels = (PFNGLCOPYPIXELSPROC)OpenGL_Load("glCopyPixels");
	glDrawPixels = (PFNGLDRAWPIXELSPROC)OpenGL_Load("glDrawPixels");
	glGetClipPlane = (PFNGLGETCLIPPLANEPROC)OpenGL_Load("glGetClipPlane");
	glGetLightfv = (PFNGLGETLIGHTFVPROC)OpenGL_Load("glGetLightfv");
	glGetLightiv = (PFNGLGETLIGHTIVPROC)OpenGL_Load("glGetLightiv");
	glGetMapdv = (PFNGLGETMAPDVPROC)OpenGL_Load("glGetMapdv");
	glGetMapfv = (PFNGLGETMAPFVPROC)OpenGL_Load("glGetMapfv");
	glGetMapiv = (PFNGLGETMAPIVPROC)OpenGL_Load("glGetMapiv");
	glGetMaterialfv = (PFNGLGETMATERIALFVPROC)OpenGL_Load("glGetMaterialfv");
	glGetMaterialiv = (PFNGLGETMATERIALIVPROC)OpenGL_Load("glGetMaterialiv");
	glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC)OpenGL_Load("glGetPixelMapfv");
	glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC)OpenGL_Load("glGetPixelMapuiv");
	glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC)OpenGL_Load("glGetPixelMapusv");
	glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC)OpenGL_Load("glGetPolygonStipple");
	glGetTexEnvfv = (PFNGLGETTEXENVFVPROC)OpenGL_Load("glGetTexEnvfv");
	glGetTexEnviv = (PFNGLGETTEXENVIVPROC)OpenGL_Load("glGetTexEnviv");
	glGetTexGendv = (PFNGLGETTEXGENDVPROC)OpenGL_Load("glGetTexGendv");
	glGetTexGenfv = (PFNGLGETTEXGENFVPROC)OpenGL_Load("glGetTexGenfv");
	glGetTexGeniv = (PFNGLGETTEXGENIVPROC)OpenGL_Load("glGetTexGeniv");
	glIsList = (PFNGLISLISTPROC)OpenGL_Load("glIsList");
	glFrustum = (PFNGLFRUSTUMPROC)OpenGL_Load("glFrustum");
	glLoadIdentity = (PFNGLLOADIDENTITYPROC)OpenGL_Load("glLoadIdentity");
	glLoadMatrixf = (PFNGLLOADMATRIXFPROC)OpenGL_Load("glLoadMatrixf");
	glLoadMatrixd = (PFNGLLOADMATRIXDPROC)OpenGL_Load("glLoadMatrixd");
	glMatrixMode = (PFNGLMATRIXMODEPROC)OpenGL_Load("glMatrixMode");
	glMultMatrixf = (PFNGLMULTMATRIXFPROC)OpenGL_Load("glMultMatrixf");
	glMultMatrixd = (PFNGLMULTMATRIXDPROC)OpenGL_Load("glMultMatrixd");
	glOrtho = (PFNGLORTHOPROC)OpenGL_Load("glOrtho");
	glPopMatrix = (PFNGLPOPMATRIXPROC)OpenGL_Load("glPopMatrix");
	glPushMatrix = (PFNGLPUSHMATRIXPROC)OpenGL_Load("glPushMatrix");
	glRotated = (PFNGLROTATEDPROC)OpenGL_Load("glRotated");
	glRotatef = (PFNGLROTATEFPROC)OpenGL_Load("glRotatef");
	glScaled = (PFNGLSCALEDPROC)OpenGL_Load("glScaled");
	glScalef = (PFNGLSCALEFPROC)OpenGL_Load("glScalef");
	glTranslated = (PFNGLTRANSLATEDPROC)OpenGL_Load("glTranslated");
	glTranslatef = (PFNGLTRANSLATEFPROC)OpenGL_Load("glTranslatef");
}

void OpenGL_Init_1_1()
{
	glDrawArrays = (PFNGLDRAWARRAYSPROC)OpenGL_Load("glDrawArrays");
	glDrawElements = (PFNGLDRAWELEMENTSPROC)OpenGL_Load("glDrawElements");
	glGetPointerv = (PFNGLGETPOINTERVPROC)OpenGL_Load("glGetPointerv");
	glPolygonOffset = (PFNGLPOLYGONOFFSETPROC)OpenGL_Load("glPolygonOffset");
	glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)OpenGL_Load("glCopyTexImage1D");
	glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)OpenGL_Load("glCopyTexImage2D");
	glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)OpenGL_Load("glCopyTexSubImage1D");
	glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)OpenGL_Load("glCopyTexSubImage2D");
	glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)OpenGL_Load("glTexSubImage1D");
	glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)OpenGL_Load("glTexSubImage2D");
	glBindTexture = (PFNGLBINDTEXTUREPROC)OpenGL_Load("glBindTexture");
	glDeleteTextures = (PFNGLDELETETEXTURESPROC)OpenGL_Load("glDeleteTextures");
	glGenTextures = (PFNGLGENTEXTURESPROC)OpenGL_Load("glGenTextures");
	glIsTexture = (PFNGLISTEXTUREPROC)OpenGL_Load("glIsTexture");
	glArrayElement = (PFNGLARRAYELEMENTPROC)OpenGL_Load("glArrayElement");
	glColorPointer = (PFNGLCOLORPOINTERPROC)OpenGL_Load("glColorPointer");
	glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC)OpenGL_Load("glDisableClientState");
	glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC)OpenGL_Load("glEdgeFlagPointer");
	glEnableClientState = (PFNGLENABLECLIENTSTATEPROC)OpenGL_Load("glEnableClientState");
	glIndexPointer = (PFNGLINDEXPOINTERPROC)OpenGL_Load("glIndexPointer");
	glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC)OpenGL_Load("glInterleavedArrays");
	glNormalPointer = (PFNGLNORMALPOINTERPROC)OpenGL_Load("glNormalPointer");
	glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC)OpenGL_Load("glTexCoordPointer");
	glVertexPointer = (PFNGLVERTEXPOINTERPROC)OpenGL_Load("glVertexPointer");
	glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC)OpenGL_Load("glAreTexturesResident");
	glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC)OpenGL_Load("glPrioritizeTextures");
	glIndexub = (PFNGLINDEXUBPROC)OpenGL_Load("glIndexub");
	glIndexubv = (PFNGLINDEXUBVPROC)OpenGL_Load("glIndexubv");
	glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC)OpenGL_Load("glPopClientAttrib");
	glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC)OpenGL_Load("glPushClientAttrib");
}

void OpenGL_Init_1_2()
{
	glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)OpenGL_Load("glDrawRangeElements");
	glTexImage3D = (PFNGLTEXIMAGE3DPROC)OpenGL_Load("glTexImage3D");
	glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)OpenGL_Load("glTexSubImage3D");
	glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)OpenGL_Load("glCopyTexSubImage3D");
}

void OpenGL_Init_1_3()
{
	glActiveTexture = (PFNGLACTIVETEXTUREPROC)OpenGL_Load("glActiveTexture");
	glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)OpenGL_Load("glSampleCoverage");
	glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)OpenGL_Load("glCompressedTexImage3D");
	glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)OpenGL_Load("glCompressedTexImage2D");
	glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)OpenGL_Load("glCompressedTexImage1D");
	glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)OpenGL_Load("glCompressedTexSubImage3D");
	glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)OpenGL_Load("glCompressedTexSubImage2D");
	glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)OpenGL_Load("glCompressedTexSubImage1D");
	glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)OpenGL_Load("glGetCompressedTexImage");
	glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)OpenGL_Load("glClientActiveTexture");
	glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)OpenGL_Load("glMultiTexCoord1d");
	glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)OpenGL_Load("glMultiTexCoord1dv");
	glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)OpenGL_Load("glMultiTexCoord1f");
	glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)OpenGL_Load("glMultiTexCoord1fv");
	glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)OpenGL_Load("glMultiTexCoord1i");
	glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)OpenGL_Load("glMultiTexCoord1iv");
	glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)OpenGL_Load("glMultiTexCoord1s");
	glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)OpenGL_Load("glMultiTexCoord1sv");
	glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)OpenGL_Load("glMultiTexCoord2d");
	glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)OpenGL_Load("glMultiTexCoord2dv");
	glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)OpenGL_Load("glMultiTexCoord2f");
	glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)OpenGL_Load("glMultiTexCoord2fv");
	glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)OpenGL_Load("glMultiTexCoord2i");
	glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)OpenGL_Load("glMultiTexCoord2iv");
	glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)OpenGL_Load("glMultiTexCoord2s");
	glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)OpenGL_Load("glMultiTexCoord2sv");
	glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)OpenGL_Load("glMultiTexCoord3d");
	glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)OpenGL_Load("glMultiTexCoord3dv");
	glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)OpenGL_Load("glMultiTexCoord3f");
	glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)OpenGL_Load("glMultiTexCoord3fv");
	glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)OpenGL_Load("glMultiTexCoord3i");
	glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)OpenGL_Load("glMultiTexCoord3iv");
	glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)OpenGL_Load("glMultiTexCoord3s");
	glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)OpenGL_Load("glMultiTexCoord3sv");
	glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)OpenGL_Load("glMultiTexCoord4d");
	glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)OpenGL_Load("glMultiTexCoord4dv");
	glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)OpenGL_Load("glMultiTexCoord4f");
	glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)OpenGL_Load("glMultiTexCoord4fv");
	glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)OpenGL_Load("glMultiTexCoord4i");
	glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)OpenGL_Load("glMultiTexCoord4iv");
	glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)OpenGL_Load("glMultiTexCoord4s");
	glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)OpenGL_Load("glMultiTexCoord4sv");
	glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)OpenGL_Load("glLoadTransposeMatrixf");
	glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)OpenGL_Load("glLoadTransposeMatrixd");
	glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)OpenGL_Load("glMultTransposeMatrixf");
	glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)OpenGL_Load("glMultTransposeMatrixd");
}

void OpenGL_Init_1_4()
{
	glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)OpenGL_Load("glBlendFuncSeparate");
	glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)OpenGL_Load("glMultiDrawArrays");
	glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)OpenGL_Load("glMultiDrawElements");
	glPointParameterf = (PFNGLPOINTPARAMETERFPROC)OpenGL_Load("glPointParameterf");
	glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)OpenGL_Load("glPointParameterfv");
	glPointParameteri = (PFNGLPOINTPARAMETERIPROC)OpenGL_Load("glPointParameteri");
	glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)OpenGL_Load("glPointParameteriv");
	glFogCoordf = (PFNGLFOGCOORDFPROC)OpenGL_Load("glFogCoordf");
	glFogCoordfv = (PFNGLFOGCOORDFVPROC)OpenGL_Load("glFogCoordfv");
	glFogCoordd = (PFNGLFOGCOORDDPROC)OpenGL_Load("glFogCoordd");
	glFogCoorddv = (PFNGLFOGCOORDDVPROC)OpenGL_Load("glFogCoorddv");
	glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)OpenGL_Load("glFogCoordPointer");
	glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)OpenGL_Load("glSecondaryColor3b");
	glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)OpenGL_Load("glSecondaryColor3bv");
	glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)OpenGL_Load("glSecondaryColor3d");
	glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)OpenGL_Load("glSecondaryColor3dv");
	glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)OpenGL_Load("glSecondaryColor3f");
	glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)OpenGL_Load("glSecondaryColor3fv");
	glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)OpenGL_Load("glSecondaryColor3i");
	glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)OpenGL_Load("glSecondaryColor3iv");
	glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)OpenGL_Load("glSecondaryColor3s");
	glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)OpenGL_Load("glSecondaryColor3sv");
	glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)OpenGL_Load("glSecondaryColor3ub");
	glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)OpenGL_Load("glSecondaryColor3ubv");
	glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)OpenGL_Load("glSecondaryColor3ui");
	glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)OpenGL_Load("glSecondaryColor3uiv");
	glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)OpenGL_Load("glSecondaryColor3us");
	glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)OpenGL_Load("glSecondaryColor3usv");
	glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)OpenGL_Load("glSecondaryColorPointer");
	glWindowPos2d = (PFNGLWINDOWPOS2DPROC)OpenGL_Load("glWindowPos2d");
	glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)OpenGL_Load("glWindowPos2dv");
	glWindowPos2f = (PFNGLWINDOWPOS2FPROC)OpenGL_Load("glWindowPos2f");
	glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)OpenGL_Load("glWindowPos2fv");
	glWindowPos2i = (PFNGLWINDOWPOS2IPROC)OpenGL_Load("glWindowPos2i");
	glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)OpenGL_Load("glWindowPos2iv");
	glWindowPos2s = (PFNGLWINDOWPOS2SPROC)OpenGL_Load("glWindowPos2s");
	glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)OpenGL_Load("glWindowPos2sv");
	glWindowPos3d = (PFNGLWINDOWPOS3DPROC)OpenGL_Load("glWindowPos3d");
	glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)OpenGL_Load("glWindowPos3dv");
	glWindowPos3f = (PFNGLWINDOWPOS3FPROC)OpenGL_Load("glWindowPos3f");
	glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)OpenGL_Load("glWindowPos3fv");
	glWindowPos3i = (PFNGLWINDOWPOS3IPROC)OpenGL_Load("glWindowPos3i");
	glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)OpenGL_Load("glWindowPos3iv");
	glWindowPos3s = (PFNGLWINDOWPOS3SPROC)OpenGL_Load("glWindowPos3s");
	glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)OpenGL_Load("glWindowPos3sv");
	glBlendColor = (PFNGLBLENDCOLORPROC)OpenGL_Load("glBlendColor");
	glBlendEquation = (PFNGLBLENDEQUATIONPROC)OpenGL_Load("glBlendEquation");
}

void OpenGL_Init_1_5()
{
	glGenQueries = (PFNGLGENQUERIESPROC)OpenGL_Load("glGenQueries");
	glDeleteQueries = (PFNGLDELETEQUERIESPROC)OpenGL_Load("glDeleteQueries");
	glIsQuery = (PFNGLISQUERYPROC)OpenGL_Load("glIsQuery");
	glBeginQuery = (PFNGLBEGINQUERYPROC)OpenGL_Load("glBeginQuery");
	glEndQuery = (PFNGLENDQUERYPROC)OpenGL_Load("glEndQuery");
	glGetQueryiv = (PFNGLGETQUERYIVPROC)OpenGL_Load("glGetQueryiv");
	glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)OpenGL_Load("glGetQueryObjectiv");
	glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)OpenGL_Load("glGetQueryObjectuiv");
	glBindBuffer = (PFNGLBINDBUFFERPROC)OpenGL_Load("glBindBuffer");
	glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)OpenGL_Load("glDeleteBuffers");
	glGenBuffers = (PFNGLGENBUFFERSPROC)OpenGL_Load("glGenBuffers");
	glIsBuffer = (PFNGLISBUFFERPROC)OpenGL_Load("glIsBuffer");
	glBufferData = (PFNGLBUFFERDATAPROC)OpenGL_Load("glBufferData");
	glBufferSubData = (PFNGLBUFFERSUBDATAPROC)OpenGL_Load("glBufferSubData");
	glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)OpenGL_Load("glGetBufferSubData");
	glMapBuffer = (PFNGLMAPBUFFERPROC)OpenGL_Load("glMapBuffer");
	glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)OpenGL_Load("glUnmapBuffer");
	glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)OpenGL_Load("glGetBufferParameteriv");
	glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)OpenGL_Load("glGetBufferPointerv");
}

void OpenGL_Init_2_0()
{
	glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)OpenGL_Load("glBlendEquationSeparate");
	glDrawBuffers = (PFNGLDRAWBUFFERSPROC)OpenGL_Load("glDrawBuffers");
	glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)OpenGL_Load("glStencilOpSeparate");
	glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)OpenGL_Load("glStencilFuncSeparate");
	glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)OpenGL_Load("glStencilMaskSeparate");
	glAttachShader = (PFNGLATTACHSHADERPROC)OpenGL_Load("glAttachShader");
	glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)OpenGL_Load("glBindAttribLocation");
	glCompileShader = (PFNGLCOMPILESHADERPROC)OpenGL_Load("glCompileShader");
	glCreateProgram = (PFNGLCREATEPROGRAMPROC)OpenGL_Load("glCreateProgram");
	glCreateShader = (PFNGLCREATESHADERPROC)OpenGL_Load("glCreateShader");
	glDeleteProgram = (PFNGLDELETEPROGRAMPROC)OpenGL_Load("glDeleteProgram");
	glDeleteShader = (PFNGLDELETESHADERPROC)OpenGL_Load("glDeleteShader");
	glDetachShader = (PFNGLDETACHSHADERPROC)OpenGL_Load("glDetachShader");
	glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)OpenGL_Load("glDisableVertexAttribArray");
	glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)OpenGL_Load("glEnableVertexAttribArray");
	glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)OpenGL_Load("glGetActiveAttrib");
	glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)OpenGL_Load("glGetActiveUniform");
	glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)OpenGL_Load("glGetAttachedShaders");
	glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)OpenGL_Load("glGetAttribLocation");
	glGetProgramiv = (PFNGLGETPROGRAMIVPROC)OpenGL_Load("glGetProgramiv");
	glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)OpenGL_Load("glGetProgramInfoLog");
	glGetShaderiv = (PFNGLGETSHADERIVPROC)OpenGL_Load("glGetShaderiv");
	glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)OpenGL_Load("glGetShaderInfoLog");
	glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)OpenGL_Load("glGetShaderSource");
	glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)OpenGL_Load("glGetUniformLocation");
	glGetUniformfv = (PFNGLGETUNIFORMFVPROC)OpenGL_Load("glGetUniformfv");
	glGetUniformiv = (PFNGLGETUNIFORMIVPROC)OpenGL_Load("glGetUniformiv");
	glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)OpenGL_Load("glGetVertexAttribdv");
	glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)OpenGL_Load("glGetVertexAttribfv");
	glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)OpenGL_Load("glGetVertexAttribiv");
	glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)OpenGL_Load("glGetVertexAttribPointerv");
	glIsProgram = (PFNGLISPROGRAMPROC)OpenGL_Load("glIsProgram");
	glIsShader = (PFNGLISSHADERPROC)OpenGL_Load("glIsShader");
	glLinkProgram = (PFNGLLINKPROGRAMPROC)OpenGL_Load("glLinkProgram");
	glShaderSource = (PFNGLSHADERSOURCEPROC)OpenGL_Load("glShaderSource");
	glUseProgram = (PFNGLUSEPROGRAMPROC)OpenGL_Load("glUseProgram");
	glUniform1f = (PFNGLUNIFORM1FPROC)OpenGL_Load("glUniform1f");
	glUniform2f = (PFNGLUNIFORM2FPROC)OpenGL_Load("glUniform2f");
	glUniform3f = (PFNGLUNIFORM3FPROC)OpenGL_Load("glUniform3f");
	glUniform4f = (PFNGLUNIFORM4FPROC)OpenGL_Load("glUniform4f");
	glUniform1i = (PFNGLUNIFORM1IPROC)OpenGL_Load("glUniform1i");
	glUniform2i = (PFNGLUNIFORM2IPROC)OpenGL_Load("glUniform2i");
	glUniform3i = (PFNGLUNIFORM3IPROC)OpenGL_Load("glUniform3i");
	glUniform4i = (PFNGLUNIFORM4IPROC)OpenGL_Load("glUniform4i");
	glUniform1fv = (PFNGLUNIFORM1FVPROC)OpenGL_Load("glUniform1fv");
	glUniform2fv = (PFNGLUNIFORM2FVPROC)OpenGL_Load("glUniform2fv");
	glUniform3fv = (PFNGLUNIFORM3FVPROC)OpenGL_Load("glUniform3fv");
	glUniform4fv = (PFNGLUNIFORM4FVPROC)OpenGL_Load("glUniform4fv");
	glUniform1iv = (PFNGLUNIFORM1IVPROC)OpenGL_Load("glUniform1iv");
	glUniform2iv = (PFNGLUNIFORM2IVPROC)OpenGL_Load("glUniform2iv");
	glUniform3iv = (PFNGLUNIFORM3IVPROC)OpenGL_Load("glUniform3iv");
	glUniform4iv = (PFNGLUNIFORM4IVPROC)OpenGL_Load("glUniform4iv");
	glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)OpenGL_Load("glUniformMatrix2fv");
	glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)OpenGL_Load("glUniformMatrix3fv");
	glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)OpenGL_Load("glUniformMatrix4fv");
	glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)OpenGL_Load("glValidateProgram");
	glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)OpenGL_Load("glVertexAttrib1d");
	glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)OpenGL_Load("glVertexAttrib1dv");
	glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)OpenGL_Load("glVertexAttrib1f");
	glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)OpenGL_Load("glVertexAttrib1fv");
	glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)OpenGL_Load("glVertexAttrib1s");
	glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)OpenGL_Load("glVertexAttrib1sv");
	glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)OpenGL_Load("glVertexAttrib2d");
	glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)OpenGL_Load("glVertexAttrib2dv");
	glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)OpenGL_Load("glVertexAttrib2f");
	glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)OpenGL_Load("glVertexAttrib2fv");
	glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)OpenGL_Load("glVertexAttrib2s");
	glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)OpenGL_Load("glVertexAttrib2sv");
	glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)OpenGL_Load("glVertexAttrib3d");
	glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)OpenGL_Load("glVertexAttrib3dv");
	glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)OpenGL_Load("glVertexAttrib3f");
	glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)OpenGL_Load("glVertexAttrib3fv");
	glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)OpenGL_Load("glVertexAttrib3s");
	glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)OpenGL_Load("glVertexAttrib3sv");
	glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)OpenGL_Load("glVertexAttrib4Nbv");
	glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)OpenGL_Load("glVertexAttrib4Niv");
	glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)OpenGL_Load("glVertexAttrib4Nsv");
	glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)OpenGL_Load("glVertexAttrib4Nub");
	glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)OpenGL_Load("glVertexAttrib4Nubv");
	glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)OpenGL_Load("glVertexAttrib4Nuiv");
	glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)OpenGL_Load("glVertexAttrib4Nusv");
	glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)OpenGL_Load("glVertexAttrib4bv");
	glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)OpenGL_Load("glVertexAttrib4d");
	glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)OpenGL_Load("glVertexAttrib4dv");
	glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)OpenGL_Load("glVertexAttrib4f");
	glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)OpenGL_Load("glVertexAttrib4fv");
	glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)OpenGL_Load("glVertexAttrib4iv");
	glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)OpenGL_Load("glVertexAttrib4s");
	glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)OpenGL_Load("glVertexAttrib4sv");
	glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)OpenGL_Load("glVertexAttrib4ubv");
	glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)OpenGL_Load("glVertexAttrib4uiv");
	glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)OpenGL_Load("glVertexAttrib4usv");
	glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)OpenGL_Load("glVertexAttribPointer");
}

void OpenGL_Init_2_1()
{
	glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)OpenGL_Load("glUniformMatrix2x3fv");
	glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)OpenGL_Load("glUniformMatrix3x2fv");
	glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)OpenGL_Load("glUniformMatrix2x4fv");
	glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)OpenGL_Load("glUniformMatrix4x2fv");
	glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)OpenGL_Load("glUniformMatrix3x4fv");
	glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)OpenGL_Load("glUniformMatrix4x3fv");
}

void OpenGL_Init_3_0()
{
	glColorMaski = (PFNGLCOLORMASKIPROC)OpenGL_Load("glColorMaski");
	glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)OpenGL_Load("glGetBooleani_v");
	glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)OpenGL_Load("glGetIntegeri_v");
	glEnablei = (PFNGLENABLEIPROC)OpenGL_Load("glEnablei");
	glDisablei = (PFNGLDISABLEIPROC)OpenGL_Load("glDisablei");
	glIsEnabledi = (PFNGLISENABLEDIPROC)OpenGL_Load("glIsEnabledi");
	glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)OpenGL_Load("glBeginTransformFeedback");
	glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)OpenGL_Load("glEndTransformFeedback");
	glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)OpenGL_Load("glBindBufferRange");
	glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)OpenGL_Load("glBindBufferBase");
	glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)OpenGL_Load("glTransformFeedbackVaryings");
	glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)OpenGL_Load("glGetTransformFeedbackVarying");
	glClampColor = (PFNGLCLAMPCOLORPROC)OpenGL_Load("glClampColor");
	glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)OpenGL_Load("glBeginConditionalRender");
	glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)OpenGL_Load("glEndConditionalRender");
	glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)OpenGL_Load("glVertexAttribIPointer");
	glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)OpenGL_Load("glGetVertexAttribIiv");
	glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)OpenGL_Load("glGetVertexAttribIuiv");
	glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)OpenGL_Load("glVertexAttribI1i");
	glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)OpenGL_Load("glVertexAttribI2i");
	glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)OpenGL_Load("glVertexAttribI3i");
	glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)OpenGL_Load("glVertexAttribI4i");
	glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)OpenGL_Load("glVertexAttribI1ui");
	glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)OpenGL_Load("glVertexAttribI2ui");
	glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)OpenGL_Load("glVertexAttribI3ui");
	glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)OpenGL_Load("glVertexAttribI4ui");
	glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)OpenGL_Load("glVertexAttribI1iv");
	glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)OpenGL_Load("glVertexAttribI2iv");
	glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)OpenGL_Load("glVertexAttribI3iv");
	glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)OpenGL_Load("glVertexAttribI4iv");
	glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)OpenGL_Load("glVertexAttribI1uiv");
	glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)OpenGL_Load("glVertexAttribI2uiv");
	glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)OpenGL_Load("glVertexAttribI3uiv");
	glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)OpenGL_Load("glVertexAttribI4uiv");
	glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)OpenGL_Load("glVertexAttribI4bv");
	glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)OpenGL_Load("glVertexAttribI4sv");
	glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)OpenGL_Load("glVertexAttribI4ubv");
	glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)OpenGL_Load("glVertexAttribI4usv");
	glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)OpenGL_Load("glGetUniformuiv");
	glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)OpenGL_Load("glBindFragDataLocation");
	glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)OpenGL_Load("glGetFragDataLocation");
	glUniform1ui = (PFNGLUNIFORM1UIPROC)OpenGL_Load("glUniform1ui");
	glUniform2ui = (PFNGLUNIFORM2UIPROC)OpenGL_Load("glUniform2ui");
	glUniform3ui = (PFNGLUNIFORM3UIPROC)OpenGL_Load("glUniform3ui");
	glUniform4ui = (PFNGLUNIFORM4UIPROC)OpenGL_Load("glUniform4ui");
	glUniform1uiv = (PFNGLUNIFORM1UIVPROC)OpenGL_Load("glUniform1uiv");
	glUniform2uiv = (PFNGLUNIFORM2UIVPROC)OpenGL_Load("glUniform2uiv");
	glUniform3uiv = (PFNGLUNIFORM3UIVPROC)OpenGL_Load("glUniform3uiv");
	glUniform4uiv = (PFNGLUNIFORM4UIVPROC)OpenGL_Load("glUniform4uiv");
	glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)OpenGL_Load("glTexParameterIiv");
	glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)OpenGL_Load("glTexParameterIuiv");
	glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)OpenGL_Load("glGetTexParameterIiv");
	glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)OpenGL_Load("glGetTexParameterIuiv");
	glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)OpenGL_Load("glClearBufferiv");
	glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)OpenGL_Load("glClearBufferuiv");
	glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)OpenGL_Load("glClearBufferfv");
	glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)OpenGL_Load("glClearBufferfi");
	glGetStringi = (PFNGLGETSTRINGIPROC)OpenGL_Load("glGetStringi");
	glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)OpenGL_Load("glIsRenderbuffer");
	glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)OpenGL_Load("glBindRenderbuffer");
	glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)OpenGL_Load("glDeleteRenderbuffers");
	glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)OpenGL_Load("glGenRenderbuffers");
	glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)OpenGL_Load("glRenderbufferStorage");
	glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)OpenGL_Load("glGetRenderbufferParameteriv");
	glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)OpenGL_Load("glIsFramebuffer");
	glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)OpenGL_Load("glBindFramebuffer");
	glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)OpenGL_Load("glDeleteFramebuffers");
	glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)OpenGL_Load("glGenFramebuffers");
	glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)OpenGL_Load("glCheckFramebufferStatus");
	glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)OpenGL_Load("glFramebufferTexture1D");
	glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)OpenGL_Load("glFramebufferTexture2D");
	glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)OpenGL_Load("glFramebufferTexture3D");
	glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)OpenGL_Load("glFramebufferRenderbuffer");
	glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)OpenGL_Load("glGetFramebufferAttachmentParameteriv");
	glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)OpenGL_Load("glGenerateMipmap");
	glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)OpenGL_Load("glBlitFramebuffer");
	glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)OpenGL_Load("glRenderbufferStorageMultisample");
	glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)OpenGL_Load("glFramebufferTextureLayer");
	glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)OpenGL_Load("glMapBufferRange");
	glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)OpenGL_Load("glFlushMappedBufferRange");
	glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)OpenGL_Load("glBindVertexArray");
	glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)OpenGL_Load("glDeleteVertexArrays");
	glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)OpenGL_Load("glGenVertexArrays");
	glIsVertexArray = (PFNGLISVERTEXARRAYPROC)OpenGL_Load("glIsVertexArray");
}

void OpenGL_Init_3_1()
{
	glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)OpenGL_Load("glDrawArraysInstanced");
	glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)OpenGL_Load("glDrawElementsInstanced");
	glTexBuffer = (PFNGLTEXBUFFERPROC)OpenGL_Load("glTexBuffer");
	glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)OpenGL_Load("glPrimitiveRestartIndex");
	glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)OpenGL_Load("glCopyBufferSubData");
	glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)OpenGL_Load("glGetUniformIndices");
	glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)OpenGL_Load("glGetActiveUniformsiv");
	glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)OpenGL_Load("glGetActiveUniformName");
	glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)OpenGL_Load("glGetUniformBlockIndex");
	glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)OpenGL_Load("glGetActiveUniformBlockiv");
	glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)OpenGL_Load("glGetActiveUniformBlockName");
	glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)OpenGL_Load("glUniformBlockBinding");
}

void OpenGL_Init_3_2()
{
	glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)OpenGL_Load("glDrawElementsBaseVertex");
	glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)OpenGL_Load("glDrawRangeElementsBaseVertex");
	glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)OpenGL_Load("glDrawElementsInstancedBaseVertex");
	glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)OpenGL_Load("glMultiDrawElementsBaseVertex");
	glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)OpenGL_Load("glProvokingVertex");
	glFenceSync = (PFNGLFENCESYNCPROC)OpenGL_Load("glFenceSync");
	glIsSync = (PFNGLISSYNCPROC)OpenGL_Load("glIsSync");
	glDeleteSync = (PFNGLDELETESYNCPROC)OpenGL_Load("glDeleteSync");
	glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)OpenGL_Load("glClientWaitSync");
	glWaitSync = (PFNGLWAITSYNCPROC)OpenGL_Load("glWaitSync");
	glGetInteger64v = (PFNGLGETINTEGER64VPROC)OpenGL_Load("glGetInteger64v");
	glGetSynciv = (PFNGLGETSYNCIVPROC)OpenGL_Load("glGetSynciv");
	glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)OpenGL_Load("glGetInteger64i_v");
	glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)OpenGL_Load("glGetBufferParameteri64v");
	glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)OpenGL_Load("glFramebufferTexture");
	glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)OpenGL_Load("glTexImage2DMultisample");
	glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)OpenGL_Load("glTexImage3DMultisample");
	glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)OpenGL_Load("glGetMultisamplefv");
	glSampleMaski = (PFNGLSAMPLEMASKIPROC)OpenGL_Load("glSampleMaski");
}

void OpenGL_Init_3_3()
{
	glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)OpenGL_Load("glBindFragDataLocationIndexed");
	glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)OpenGL_Load("glGetFragDataIndex");
	glGenSamplers = (PFNGLGENSAMPLERSPROC)OpenGL_Load("glGenSamplers");
	glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)OpenGL_Load("glDeleteSamplers");
	glIsSampler = (PFNGLISSAMPLERPROC)OpenGL_Load("glIsSampler");
	glBindSampler = (PFNGLBINDSAMPLERPROC)OpenGL_Load("glBindSampler");
	glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)OpenGL_Load("glSamplerParameteri");
	glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)OpenGL_Load("glSamplerParameteriv");
	glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)OpenGL_Load("glSamplerParameterf");
	glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)OpenGL_Load("glSamplerParameterfv");
	glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)OpenGL_Load("glSamplerParameterIiv");
	glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)OpenGL_Load("glSamplerParameterIuiv");
	glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)OpenGL_Load("glGetSamplerParameteriv");
	glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)OpenGL_Load("glGetSamplerParameterIiv");
	glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)OpenGL_Load("glGetSamplerParameterfv");
	glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)OpenGL_Load("glGetSamplerParameterIuiv");
	glQueryCounter = (PFNGLQUERYCOUNTERPROC)OpenGL_Load("glQueryCounter");
	glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)OpenGL_Load("glGetQueryObjecti64v");
	glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)OpenGL_Load("glGetQueryObjectui64v");
	glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)OpenGL_Load("glVertexAttribDivisor");
	glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)OpenGL_Load("glVertexAttribP1ui");
	glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)OpenGL_Load("glVertexAttribP1uiv");
	glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)OpenGL_Load("glVertexAttribP2ui");
	glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)OpenGL_Load("glVertexAttribP2uiv");
	glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)OpenGL_Load("glVertexAttribP3ui");
	glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)OpenGL_Load("glVertexAttribP3uiv");
	glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)OpenGL_Load("glVertexAttribP4ui");
	glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)OpenGL_Load("glVertexAttribP4uiv");
	glVertexP2ui = (PFNGLVERTEXP2UIPROC)OpenGL_Load("glVertexP2ui");
	glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)OpenGL_Load("glVertexP2uiv");
	glVertexP3ui = (PFNGLVERTEXP3UIPROC)OpenGL_Load("glVertexP3ui");
	glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)OpenGL_Load("glVertexP3uiv");
	glVertexP4ui = (PFNGLVERTEXP4UIPROC)OpenGL_Load("glVertexP4ui");
	glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)OpenGL_Load("glVertexP4uiv");
	glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)OpenGL_Load("glTexCoordP1ui");
	glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)OpenGL_Load("glTexCoordP1uiv");
	glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)OpenGL_Load("glTexCoordP2ui");
	glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)OpenGL_Load("glTexCoordP2uiv");
	glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)OpenGL_Load("glTexCoordP3ui");
	glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)OpenGL_Load("glTexCoordP3uiv");
	glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)OpenGL_Load("glTexCoordP4ui");
	glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)OpenGL_Load("glTexCoordP4uiv");
	glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)OpenGL_Load("glMultiTexCoordP1ui");
	glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)OpenGL_Load("glMultiTexCoordP1uiv");
	glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)OpenGL_Load("glMultiTexCoordP2ui");
	glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)OpenGL_Load("glMultiTexCoordP2uiv");
	glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)OpenGL_Load("glMultiTexCoordP3ui");
	glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)OpenGL_Load("glMultiTexCoordP3uiv");
	glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)OpenGL_Load("glMultiTexCoordP4ui");
	glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)OpenGL_Load("glMultiTexCoordP4uiv");
	glNormalP3ui = (PFNGLNORMALP3UIPROC)OpenGL_Load("glNormalP3ui");
	glNormalP3uiv = (PFNGLNORMALP3UIVPROC)OpenGL_Load("glNormalP3uiv");
	glColorP3ui = (PFNGLCOLORP3UIPROC)OpenGL_Load("glColorP3ui");
	glColorP3uiv = (PFNGLCOLORP3UIVPROC)OpenGL_Load("glColorP3uiv");
	glColorP4ui = (PFNGLCOLORP4UIPROC)OpenGL_Load("glColorP4ui");
	glColorP4uiv = (PFNGLCOLORP4UIVPROC)OpenGL_Load("glColorP4uiv");
	glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)OpenGL_Load("glSecondaryColorP3ui");
	glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)OpenGL_Load("glSecondaryColorP3uiv");
}

void OpenGL_Init_4_0()
{
	glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)OpenGL_Load("glMinSampleShading");
	glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)OpenGL_Load("glBlendEquationi");
	glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)OpenGL_Load("glBlendEquationSeparatei");
	glBlendFunci = (PFNGLBLENDFUNCIPROC)OpenGL_Load("glBlendFunci");
	glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)OpenGL_Load("glBlendFuncSeparatei");
	glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)OpenGL_Load("glDrawArraysIndirect");
	glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)OpenGL_Load("glDrawElementsIndirect");
	glUniform1d = (PFNGLUNIFORM1DPROC)OpenGL_Load("glUniform1d");
	glUniform2d = (PFNGLUNIFORM2DPROC)OpenGL_Load("glUniform2d");
	glUniform3d = (PFNGLUNIFORM3DPROC)OpenGL_Load("glUniform3d");
	glUniform4d = (PFNGLUNIFORM4DPROC)OpenGL_Load("glUniform4d");
	glUniform1dv = (PFNGLUNIFORM1DVPROC)OpenGL_Load("glUniform1dv");
	glUniform2dv = (PFNGLUNIFORM2DVPROC)OpenGL_Load("glUniform2dv");
	glUniform3dv = (PFNGLUNIFORM3DVPROC)OpenGL_Load("glUniform3dv");
	glUniform4dv = (PFNGLUNIFORM4DVPROC)OpenGL_Load("glUniform4dv");
	glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)OpenGL_Load("glUniformMatrix2dv");
	glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)OpenGL_Load("glUniformMatrix3dv");
	glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)OpenGL_Load("glUniformMatrix4dv");
	glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)OpenGL_Load("glUniformMatrix2x3dv");
	glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)OpenGL_Load("glUniformMatrix2x4dv");
	glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)OpenGL_Load("glUniformMatrix3x2dv");
	glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)OpenGL_Load("glUniformMatrix3x4dv");
	glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)OpenGL_Load("glUniformMatrix4x2dv");
	glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)OpenGL_Load("glUniformMatrix4x3dv");
	glGetUniformdv = (PFNGLGETUNIFORMDVPROC)OpenGL_Load("glGetUniformdv");
	glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)OpenGL_Load("glGetSubroutineUniformLocation");
	glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)OpenGL_Load("glGetSubroutineIndex");
	glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)OpenGL_Load("glGetActiveSubroutineUniformiv");
	glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)OpenGL_Load("glGetActiveSubroutineUniformName");
	glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)OpenGL_Load("glGetActiveSubroutineName");
	glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)OpenGL_Load("glUniformSubroutinesuiv");
	glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)OpenGL_Load("glGetUniformSubroutineuiv");
	glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)OpenGL_Load("glGetProgramStageiv");
	glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)OpenGL_Load("glPatchParameteri");
	glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)OpenGL_Load("glPatchParameterfv");
	glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)OpenGL_Load("glBindTransformFeedback");
	glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)OpenGL_Load("glDeleteTransformFeedbacks");
	glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)OpenGL_Load("glGenTransformFeedbacks");
	glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)OpenGL_Load("glIsTransformFeedback");
	glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)OpenGL_Load("glPauseTransformFeedback");
	glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)OpenGL_Load("glResumeTransformFeedback");
	glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)OpenGL_Load("glDrawTransformFeedback");
	glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)OpenGL_Load("glDrawTransformFeedbackStream");
	glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)OpenGL_Load("glBeginQueryIndexed");
	glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)OpenGL_Load("glEndQueryIndexed");
	glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)OpenGL_Load("glGetQueryIndexediv");
}

void OpenGL_Init_4_1()
{
	glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)OpenGL_Load("glReleaseShaderCompiler");
	glShaderBinary = (PFNGLSHADERBINARYPROC)OpenGL_Load("glShaderBinary");
	glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)OpenGL_Load("glGetShaderPrecisionFormat");
	glDepthRangef = (PFNGLDEPTHRANGEFPROC)OpenGL_Load("glDepthRangef");
	glClearDepthf = (PFNGLCLEARDEPTHFPROC)OpenGL_Load("glClearDepthf");
	glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)OpenGL_Load("glGetProgramBinary");
	glProgramBinary = (PFNGLPROGRAMBINARYPROC)OpenGL_Load("glProgramBinary");
	glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)OpenGL_Load("glProgramParameteri");
	glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)OpenGL_Load("glUseProgramStages");
	glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)OpenGL_Load("glActiveShaderProgram");
	glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)OpenGL_Load("glCreateShaderProgramv");
	glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)OpenGL_Load("glBindProgramPipeline");
	glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)OpenGL_Load("glDeleteProgramPipelines");
	glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)OpenGL_Load("glGenProgramPipelines");
	glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)OpenGL_Load("glIsProgramPipeline");
	glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)OpenGL_Load("glGetProgramPipelineiv");
	glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)OpenGL_Load("glProgramUniform1i");
	glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)OpenGL_Load("glProgramUniform1iv");
	glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)OpenGL_Load("glProgramUniform1f");
	glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)OpenGL_Load("glProgramUniform1fv");
	glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)OpenGL_Load("glProgramUniform1d");
	glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)OpenGL_Load("glProgramUniform1dv");
	glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)OpenGL_Load("glProgramUniform1ui");
	glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)OpenGL_Load("glProgramUniform1uiv");
	glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)OpenGL_Load("glProgramUniform2i");
	glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)OpenGL_Load("glProgramUniform2iv");
	glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)OpenGL_Load("glProgramUniform2f");
	glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)OpenGL_Load("glProgramUniform2fv");
	glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)OpenGL_Load("glProgramUniform2d");
	glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)OpenGL_Load("glProgramUniform2dv");
	glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)OpenGL_Load("glProgramUniform2ui");
	glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)OpenGL_Load("glProgramUniform2uiv");
	glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)OpenGL_Load("glProgramUniform3i");
	glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)OpenGL_Load("glProgramUniform3iv");
	glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)OpenGL_Load("glProgramUniform3f");
	glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)OpenGL_Load("glProgramUniform3fv");
	glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)OpenGL_Load("glProgramUniform3d");
	glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)OpenGL_Load("glProgramUniform3dv");
	glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)OpenGL_Load("glProgramUniform3ui");
	glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)OpenGL_Load("glProgramUniform3uiv");
	glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)OpenGL_Load("glProgramUniform4i");
	glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)OpenGL_Load("glProgramUniform4iv");
	glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)OpenGL_Load("glProgramUniform4f");
	glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)OpenGL_Load("glProgramUniform4fv");
	glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)OpenGL_Load("glProgramUniform4d");
	glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)OpenGL_Load("glProgramUniform4dv");
	glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)OpenGL_Load("glProgramUniform4ui");
	glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)OpenGL_Load("glProgramUniform4uiv");
	glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)OpenGL_Load("glProgramUniformMatrix2fv");
	glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)OpenGL_Load("glProgramUniformMatrix3fv");
	glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)OpenGL_Load("glProgramUniformMatrix4fv");
	glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)OpenGL_Load("glProgramUniformMatrix2dv");
	glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)OpenGL_Load("glProgramUniformMatrix3dv");
	glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)OpenGL_Load("glProgramUniformMatrix4dv");
	glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)OpenGL_Load("glProgramUniformMatrix2x3fv");
	glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)OpenGL_Load("glProgramUniformMatrix3x2fv");
	glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)OpenGL_Load("glProgramUniformMatrix2x4fv");
	glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)OpenGL_Load("glProgramUniformMatrix4x2fv");
	glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)OpenGL_Load("glProgramUniformMatrix3x4fv");
	glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)OpenGL_Load("glProgramUniformMatrix4x3fv");
	glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)OpenGL_Load("glProgramUniformMatrix2x3dv");
	glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)OpenGL_Load("glProgramUniformMatrix3x2dv");
	glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)OpenGL_Load("glProgramUniformMatrix2x4dv");
	glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)OpenGL_Load("glProgramUniformMatrix4x2dv");
	glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)OpenGL_Load("glProgramUniformMatrix3x4dv");
	glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)OpenGL_Load("glProgramUniformMatrix4x3dv");
	glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)OpenGL_Load("glValidateProgramPipeline");
	glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)OpenGL_Load("glGetProgramPipelineInfoLog");
	glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)OpenGL_Load("glVertexAttribL1d");
	glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)OpenGL_Load("glVertexAttribL2d");
	glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)OpenGL_Load("glVertexAttribL3d");
	glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)OpenGL_Load("glVertexAttribL4d");
	glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)OpenGL_Load("glVertexAttribL1dv");
	glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)OpenGL_Load("glVertexAttribL2dv");
	glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)OpenGL_Load("glVertexAttribL3dv");
	glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)OpenGL_Load("glVertexAttribL4dv");
	glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)OpenGL_Load("glVertexAttribLPointer");
	glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)OpenGL_Load("glGetVertexAttribLdv");
	glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)OpenGL_Load("glViewportArrayv");
	glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)OpenGL_Load("glViewportIndexedf");
	glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)OpenGL_Load("glViewportIndexedfv");
	glScissorArrayv = (PFNGLSCISSORARRAYVPROC)OpenGL_Load("glScissorArrayv");
	glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)OpenGL_Load("glScissorIndexed");
	glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)OpenGL_Load("glScissorIndexedv");
	glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)OpenGL_Load("glDepthRangeArrayv");
	glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)OpenGL_Load("glDepthRangeIndexed");
	glGetFloati_v = (PFNGLGETFLOATI_VPROC)OpenGL_Load("glGetFloati_v");
	glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)OpenGL_Load("glGetDoublei_v");
}

void OpenGL_Init_4_2()
{
	glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)OpenGL_Load("glDrawArraysInstancedBaseInstance");
	glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)OpenGL_Load("glDrawElementsInstancedBaseInstance");
	glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)OpenGL_Load("glDrawElementsInstancedBaseVertexBaseInstance");
	glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC)OpenGL_Load("glGetInternalformativ");
	glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)OpenGL_Load("glGetActiveAtomicCounterBufferiv");
	glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC)OpenGL_Load("glBindImageTexture");
	glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)OpenGL_Load("glMemoryBarrier");
	glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)OpenGL_Load("glTexStorage1D");
	glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)OpenGL_Load("glTexStorage2D");
	glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)OpenGL_Load("glTexStorage3D");
	glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)OpenGL_Load("glDrawTransformFeedbackInstanced");
	glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)OpenGL_Load("glDrawTransformFeedbackStreamInstanced");
}

void OpenGL_Init_4_3()
{
	glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)OpenGL_Load("glClearBufferData");
	glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)OpenGL_Load("glClearBufferSubData");
	glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC)OpenGL_Load("glDispatchCompute");
	glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)OpenGL_Load("glDispatchComputeIndirect");
	glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)OpenGL_Load("glCopyImageSubData");
	glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC)OpenGL_Load("glFramebufferParameteri");
	glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)OpenGL_Load("glGetFramebufferParameteriv");
	glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC)OpenGL_Load("glGetInternalformati64v");
	glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC)OpenGL_Load("glInvalidateTexSubImage");
	glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC)OpenGL_Load("glInvalidateTexImage");
	glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC)OpenGL_Load("glInvalidateBufferSubData");
	glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC)OpenGL_Load("glInvalidateBufferData");
	glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC)OpenGL_Load("glInvalidateFramebuffer");
	glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC)OpenGL_Load("glInvalidateSubFramebuffer");
	glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)OpenGL_Load("glMultiDrawArraysIndirect");
	glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)OpenGL_Load("glMultiDrawElementsIndirect");
	glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC)OpenGL_Load("glGetProgramInterfaceiv");
	glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC)OpenGL_Load("glGetProgramResourceIndex");
	glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC)OpenGL_Load("glGetProgramResourceName");
	glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC)OpenGL_Load("glGetProgramResourceiv");
	glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)OpenGL_Load("glGetProgramResourceLocation");
	glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)OpenGL_Load("glGetProgramResourceLocationIndex");
	glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)OpenGL_Load("glShaderStorageBlockBinding");
	glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC)OpenGL_Load("glTexBufferRange");
	glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)OpenGL_Load("glTexStorage2DMultisample");
	glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)OpenGL_Load("glTexStorage3DMultisample");
	glTextureView = (PFNGLTEXTUREVIEWPROC)OpenGL_Load("glTextureView");
	glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC)OpenGL_Load("glBindVertexBuffer");
	glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC)OpenGL_Load("glVertexAttribFormat");
	glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC)OpenGL_Load("glVertexAttribIFormat");
	glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC)OpenGL_Load("glVertexAttribLFormat");
	glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC)OpenGL_Load("glVertexAttribBinding");
	glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC)OpenGL_Load("glVertexBindingDivisor");
	glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)OpenGL_Load("glDebugMessageControl");
	glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)OpenGL_Load("glDebugMessageInsert");
	glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)OpenGL_Load("glDebugMessageCallback");
	glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)OpenGL_Load("glGetDebugMessageLog");
	glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)OpenGL_Load("glPushDebugGroup");
	glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC)OpenGL_Load("glPopDebugGroup");
	glObjectLabel = (PFNGLOBJECTLABELPROC)OpenGL_Load("glObjectLabel");
	glGetObjectLabel = (PFNGLGETOBJECTLABELPROC)OpenGL_Load("glGetObjectLabel");
	glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC)OpenGL_Load("glObjectPtrLabel");
	glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)OpenGL_Load("glGetObjectPtrLabel");
}

void OpenGL_Init_4_4()
{
	glBufferStorage = (PFNGLBUFFERSTORAGEPROC)OpenGL_Load("glBufferStorage");
	glClearTexImage = (PFNGLCLEARTEXIMAGEPROC)OpenGL_Load("glClearTexImage");
	glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC)OpenGL_Load("glClearTexSubImage");
	glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC)OpenGL_Load("glBindBuffersBase");
	glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC)OpenGL_Load("glBindBuffersRange");
	glBindTextures = (PFNGLBINDTEXTURESPROC)OpenGL_Load("glBindTextures");
	glBindSamplers = (PFNGLBINDSAMPLERSPROC)OpenGL_Load("glBindSamplers");
	glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC)OpenGL_Load("glBindImageTextures");
	glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC)OpenGL_Load("glBindVertexBuffers");

}

void OpenGL_Init_4_5()
{
	glClipControl = (PFNGLCLIPCONTROLPROC)OpenGL_Load("glClipControl");
	glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC)OpenGL_Load("glCreateTransformFeedbacks");
	glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)OpenGL_Load("glTransformFeedbackBufferBase");
	glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)OpenGL_Load("glTransformFeedbackBufferRange");
	glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC)OpenGL_Load("glGetTransformFeedbackiv");
	glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC)OpenGL_Load("glGetTransformFeedbacki_v");
	glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC)OpenGL_Load("glGetTransformFeedbacki64_v");
	glCreateBuffers = (PFNGLCREATEBUFFERSPROC)OpenGL_Load("glCreateBuffers");
	glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC)OpenGL_Load("glNamedBufferStorage");
	glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC)OpenGL_Load("glNamedBufferData");
	glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC)OpenGL_Load("glNamedBufferSubData");
	glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC)OpenGL_Load("glCopyNamedBufferSubData");
	glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC)OpenGL_Load("glClearNamedBufferData");
	glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC)OpenGL_Load("glClearNamedBufferSubData");
	glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC)OpenGL_Load("glMapNamedBuffer");
	glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC)OpenGL_Load("glMapNamedBufferRange");
	glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC)OpenGL_Load("glUnmapNamedBuffer");
	glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)OpenGL_Load("glFlushMappedNamedBufferRange");
	glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC)OpenGL_Load("glGetNamedBufferParameteriv");
	glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)OpenGL_Load("glGetNamedBufferParameteri64v");
	glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC)OpenGL_Load("glGetNamedBufferPointerv");
	glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC)OpenGL_Load("glGetNamedBufferSubData");
	glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC)OpenGL_Load("glCreateFramebuffers");
	glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)OpenGL_Load("glNamedFramebufferRenderbuffer");
	glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)OpenGL_Load("glNamedFramebufferParameteri");
	glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)OpenGL_Load("glNamedFramebufferTexture");
	glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)OpenGL_Load("glNamedFramebufferTextureLayer");
	glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)OpenGL_Load("glNamedFramebufferDrawBuffer");
	glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)OpenGL_Load("glNamedFramebufferDrawBuffers");
	glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)OpenGL_Load("glNamedFramebufferReadBuffer");
	glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)OpenGL_Load("glInvalidateNamedFramebufferData");
	glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)OpenGL_Load("glInvalidateNamedFramebufferSubData");
	glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)OpenGL_Load("glClearNamedFramebufferiv");
	glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)OpenGL_Load("glClearNamedFramebufferuiv");
	glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)OpenGL_Load("glClearNamedFramebufferfv");
	glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)OpenGL_Load("glClearNamedFramebufferfi");
	glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC)OpenGL_Load("glBlitNamedFramebuffer");
	glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)OpenGL_Load("glCheckNamedFramebufferStatus");
	glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)OpenGL_Load("glGetNamedFramebufferParameteriv");
	glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)OpenGL_Load("glGetNamedFramebufferAttachmentParameteriv");
	glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC)OpenGL_Load("glCreateRenderbuffers");
	glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC)OpenGL_Load("glNamedRenderbufferStorage");
	glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)OpenGL_Load("glNamedRenderbufferStorageMultisample");
	glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)OpenGL_Load("glGetNamedRenderbufferParameteriv");
	glCreateTextures = (PFNGLCREATETEXTURESPROC)OpenGL_Load("glCreateTextures");
	glTextureBuffer = (PFNGLTEXTUREBUFFERPROC)OpenGL_Load("glTextureBuffer");
	glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC)OpenGL_Load("glTextureBufferRange");
	glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC)OpenGL_Load("glTextureStorage1D");
	glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC)OpenGL_Load("glTextureStorage2D");
	glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC)OpenGL_Load("glTextureStorage3D");
	glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)OpenGL_Load("glTextureStorage2DMultisample");
	glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)OpenGL_Load("glTextureStorage3DMultisample");
	glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC)OpenGL_Load("glTextureSubImage1D");
	glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC)OpenGL_Load("glTextureSubImage2D");
	glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC)OpenGL_Load("glTextureSubImage3D");
	glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)OpenGL_Load("glCompressedTextureSubImage1D");
	glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)OpenGL_Load("glCompressedTextureSubImage2D");
	glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)OpenGL_Load("glCompressedTextureSubImage3D");
	glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC)OpenGL_Load("glCopyTextureSubImage1D");
	glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC)OpenGL_Load("glCopyTextureSubImage2D");
	glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC)OpenGL_Load("glCopyTextureSubImage3D");
	glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC)OpenGL_Load("glTextureParameterf");
	glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC)OpenGL_Load("glTextureParameterfv");
	glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC)OpenGL_Load("glTextureParameteri");
	glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC)OpenGL_Load("glTextureParameterIiv");
	glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC)OpenGL_Load("glTextureParameterIuiv");
	glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC)OpenGL_Load("glTextureParameteriv");
	glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC)OpenGL_Load("glGenerateTextureMipmap");
	glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC)OpenGL_Load("glBindTextureUnit");
	glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC)OpenGL_Load("glGetTextureImage");
	glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)OpenGL_Load("glGetCompressedTextureImage");
	glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC)OpenGL_Load("glGetTextureLevelParameterfv");
	glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC)OpenGL_Load("glGetTextureLevelParameteriv");
	glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC)OpenGL_Load("glGetTextureParameterfv");
	glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC)OpenGL_Load("glGetTextureParameterIiv");
	glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC)OpenGL_Load("glGetTextureParameterIuiv");
	glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC)OpenGL_Load("glGetTextureParameteriv");
	glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC)OpenGL_Load("glCreateVertexArrays");
	glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC)OpenGL_Load("glDisableVertexArrayAttrib");
	glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC)OpenGL_Load("glEnableVertexArrayAttrib");
	glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC)OpenGL_Load("glVertexArrayElementBuffer");
	glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC)OpenGL_Load("glVertexArrayVertexBuffer");
	glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC)OpenGL_Load("glVertexArrayVertexBuffers");
	glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC)OpenGL_Load("glVertexArrayAttribBinding");
	glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC)OpenGL_Load("glVertexArrayAttribFormat");
	glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC)OpenGL_Load("glVertexArrayAttribIFormat");
	glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC)OpenGL_Load("glVertexArrayAttribLFormat");
	glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC)OpenGL_Load("glVertexArrayBindingDivisor");
	glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC)OpenGL_Load("glGetVertexArrayiv");
	glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC)OpenGL_Load("glGetVertexArrayIndexediv");
	glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC)OpenGL_Load("glGetVertexArrayIndexed64iv");
	glCreateSamplers = (PFNGLCREATESAMPLERSPROC)OpenGL_Load("glCreateSamplers");
	glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC)OpenGL_Load("glCreateProgramPipelines");
	glCreateQueries = (PFNGLCREATEQUERIESPROC)OpenGL_Load("glCreateQueries");
	glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC)OpenGL_Load("glGetQueryBufferObjecti64v");
	glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC)OpenGL_Load("glGetQueryBufferObjectiv");
	glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC)OpenGL_Load("glGetQueryBufferObjectui64v");
	glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC)OpenGL_Load("glGetQueryBufferObjectuiv");
	glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC)OpenGL_Load("glMemoryBarrierByRegion");
	glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC)OpenGL_Load("glGetTextureSubImage");
	glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)OpenGL_Load("glGetCompressedTextureSubImage");
	glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC)OpenGL_Load("glGetGraphicsResetStatus");
	glGetnCompressedTexImage = (PFNGLGETNCOMPRESSEDTEXIMAGEPROC)OpenGL_Load("glGetnCompressedTexImage");
	glGetnTexImage = (PFNGLGETNTEXIMAGEPROC)OpenGL_Load("glGetnTexImage");
	glGetnUniformdv = (PFNGLGETNUNIFORMDVPROC)OpenGL_Load("glGetnUniformdv");
	glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC)OpenGL_Load("glGetnUniformfv");
	glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC)OpenGL_Load("glGetnUniformiv");
	glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC)OpenGL_Load("glGetnUniformuiv");
	glReadnPixels = (PFNGLREADNPIXELSPROC)OpenGL_Load("glReadnPixels");
	glGetnMapdv = (PFNGLGETNMAPDVPROC)OpenGL_Load("glGetnMapdv");
	glGetnMapfv = (PFNGLGETNMAPFVPROC)OpenGL_Load("glGetnMapfv");
	glGetnMapiv = (PFNGLGETNMAPIVPROC)OpenGL_Load("glGetnMapiv");
	glGetnPixelMapfv = (PFNGLGETNPIXELMAPFVPROC)OpenGL_Load("glGetnPixelMapfv");
	glGetnPixelMapuiv = (PFNGLGETNPIXELMAPUIVPROC)OpenGL_Load("glGetnPixelMapuiv");
	glGetnPixelMapusv = (PFNGLGETNPIXELMAPUSVPROC)OpenGL_Load("glGetnPixelMapusv");
	glGetnPolygonStipple = (PFNGLGETNPOLYGONSTIPPLEPROC)OpenGL_Load("glGetnPolygonStipple");
	glGetnColorTable = (PFNGLGETNCOLORTABLEPROC)OpenGL_Load("glGetnColorTable");
	glGetnConvolutionFilter = (PFNGLGETNCONVOLUTIONFILTERPROC)OpenGL_Load("glGetnConvolutionFilter");
	glGetnSeparableFilter = (PFNGLGETNSEPARABLEFILTERPROC)OpenGL_Load("glGetnSeparableFilter");
	glGetnHistogram = (PFNGLGETNHISTOGRAMPROC)OpenGL_Load("glGetnHistogram");
	glGetnMinmax = (PFNGLGETNMINMAXPROC)OpenGL_Load("glGetnMinmax");
	glTextureBarrier = (PFNGLTEXTUREBARRIERPROC)OpenGL_Load("glTextureBarrier");
}

void OpenGL_Init_4_6()
{
	glSpecializeShader = (PFNGLSPECIALIZESHADERPROC)OpenGL_Load("glSpecializeShader");
	glMultiDrawArraysIndirectCount = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)OpenGL_Load("glMultiDrawArraysIndirectCount");
	glMultiDrawElementsIndirectCount = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)OpenGL_Load("glMultiDrawElementsIndirectCount");
	glPolygonOffsetClamp = (PFNGLPOLYGONOFFSETCLAMPPROC)OpenGL_Load("glPolygonOffsetClamp");
}

void OpenGL_Compatibility_Init(int major, int minor)
{
	OpenGL_LoadLibrary();

	if (major == 1 && minor == 0)
	{
		OpenGL_Init_1_0();
	}
	else if (major == 1 && minor == 1)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
	}
	else if (major == 1 && minor == 2)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
	}
	else if (major == 1 && minor == 3)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
	}
	else if (major == 1 && minor == 4)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
	}
	else if (major == 1 && minor == 5)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
	}
	else if (major == 2 && minor == 0)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
	}
	else if (major == 2 && minor == 1)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
	}
	else if (major == 3 && minor == 0)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
	}
	else if (major == 3 && minor == 1)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
		OpenGL_Init_3_1();
	}
	else if (major == 3 && minor == 2)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
		OpenGL_Init_3_1();
		OpenGL_Init_3_2();
	}
	else if (major == 3 && minor == 3)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
		OpenGL_Init_3_1();
		OpenGL_Init_3_2();
		OpenGL_Init_3_3();
	}
	else if (major == 4 && minor == 0)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
		OpenGL_Init_3_1();
		OpenGL_Init_3_2();
		OpenGL_Init_3_3();
		OpenGL_Init_4_0();
	}
	else if (major == 4 && minor == 1)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
		OpenGL_Init_3_1();
		OpenGL_Init_3_2();
		OpenGL_Init_3_3();
		OpenGL_Init_4_0();
		OpenGL_Init_4_1();
	}
	else if (major == 4 && minor == 2)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
		OpenGL_Init_3_1();
		OpenGL_Init_3_2();
		OpenGL_Init_3_3();
		OpenGL_Init_4_0();
		OpenGL_Init_4_1();
		OpenGL_Init_4_2();
	}
	else if (major == 4 && minor == 3)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
		OpenGL_Init_3_1();
		OpenGL_Init_3_2();
		OpenGL_Init_3_3();
		OpenGL_Init_4_0();
		OpenGL_Init_4_1();
		OpenGL_Init_4_2();
		OpenGL_Init_4_3();
	}
	else if (major == 4 && minor == 4)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
		OpenGL_Init_3_1();
		OpenGL_Init_3_2();
		OpenGL_Init_3_3();
		OpenGL_Init_4_0();
		OpenGL_Init_4_1();
		OpenGL_Init_4_2();
		OpenGL_Init_4_3();
		OpenGL_Init_4_4();
	}
	else if (major == 4 && minor == 5)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
		OpenGL_Init_3_1();
		OpenGL_Init_3_2();
		OpenGL_Init_3_3();
		OpenGL_Init_4_0();
		OpenGL_Init_4_1();
		OpenGL_Init_4_2();
		OpenGL_Init_4_3();
		OpenGL_Init_4_4();
		OpenGL_Init_4_5();
	}
	else if (major == 4 && minor == 6)
	{
		OpenGL_Init_1_0();
		OpenGL_Init_1_1();
		OpenGL_Init_1_2();
		OpenGL_Init_1_3();
		OpenGL_Init_1_4();
		OpenGL_Init_1_5();
		OpenGL_Init_2_0();
		OpenGL_Init_2_1();
		OpenGL_Init_3_0();
		OpenGL_Init_3_1();
		OpenGL_Init_3_2();
		OpenGL_Init_3_3();
		OpenGL_Init_4_0();
		OpenGL_Init_4_1();
		OpenGL_Init_4_2();
		OpenGL_Init_4_3();
		OpenGL_Init_4_4();
		OpenGL_Init_4_6();
	}
}

#endif

#ifdef __cplusplus
}
#endif

#endif
