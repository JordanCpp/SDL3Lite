/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include <SDL3Lite/Application.hpp>
#include <SDL3Lite/Window.hpp>
#include <SDL3Lite/OpenGLContext.hpp>
#include <assert.h>

bool SDL_GL_SetAttribute(SDL_GLAttr attr, int value)
{
	switch (attr)
	{
	case SDL_GL_RED_SIZE:
		break;
	case SDL_GL_GREEN_SIZE:
		break;
	case SDL_GL_BLUE_SIZE:
		break;
	case SDL_GL_ALPHA_SIZE:
		break;
	case SDL_GL_BUFFER_SIZE:
		break;
	case SDL_GL_DOUBLEBUFFER:
		break;
	case SDL_GL_DEPTH_SIZE:
		break;
	case SDL_GL_STENCIL_SIZE:
		break;
	case SDL_GL_ACCUM_RED_SIZE:
		break;
	case SDL_GL_ACCUM_GREEN_SIZE:
		break;
	case SDL_GL_ACCUM_BLUE_SIZE:
		break;
	case SDL_GL_ACCUM_ALPHA_SIZE:
		break;
	case SDL_GL_STEREO:
		break;
	case SDL_GL_MULTISAMPLEBUFFERS:
		break;
	case SDL_GL_MULTISAMPLESAMPLES:
		break;
	case SDL_GL_ACCELERATED_VISUAL:
		break;
	case SDL_GL_RETAINED_BACKING:
		break;
	case SDL_GL_CONTEXT_MAJOR_VERSION:
		SDL::GetApplication().GetOpenGLAttributes().SetMajor(value);
		break;
	case SDL_GL_CONTEXT_MINOR_VERSION:
		SDL::GetApplication().GetOpenGLAttributes().SetMinor(value);
		break;
	case SDL_GL_CONTEXT_FLAGS:
		break;
	case SDL_GL_CONTEXT_PROFILE_MASK:
		break;
	case SDL_GL_SHARE_WITH_CURRENT_CONTEXT:
		break;
	case SDL_GL_FRAMEBUFFER_SRGB_CAPABLE:
		break;
	case SDL_GL_CONTEXT_RELEASE_BEHAVIOR:
		break;
	case SDL_GL_CONTEXT_RESET_NOTIFICATION:
		break;
	case SDL_GL_CONTEXT_NO_ERROR:
		break;
	case SDL_GL_FLOATBUFFERS:
		break;
	case SDL_GL_EGL_PLATFORM:
		break;
	default:
		break;
	}

	return true;
}

SDL_GLContext* SDL_GL_CreateContext(SDL_Window* window)
{
	assert(window);

	SDL_GLContext* context = new SDL_GLContext();
	assert(context);

	return context;
}

void SDL_GL_DestroyContext(SDL_GLContext* context)
{
	assert(context);

	delete context;
}

bool SDL_GL_SwapWindow(SDL_Window* window)
{
	assert(window);

	return window->Present();
}
